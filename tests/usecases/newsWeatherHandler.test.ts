import { NewsWeatherHandler, ScheduledTask } from '../../src/usecases/newsWeatherHandler';
import { NewsWeatherMonitor } from '../../src/domain/newsWeatherMonitor';
import TelegramBot from 'node-telegram-bot-api';
import { NewsCommandsFuzzyMatcher } from '../../src/config/vocabulary/newsCommandsFuzzyMatcher';

// –ú–æ–∫–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
jest.mock('../../src/domain/newsWeatherMonitor');
jest.mock('node-telegram-bot-api');
jest.mock('../../src/config/vocabulary/newsCommandsFuzzyMatcher');

// –ú–æ–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
const mockSetTimeout = jest.fn();
global.setTimeout = mockSetTimeout as any;

describe('NewsWeatherHandler', () => {
  let handler: NewsWeatherHandler;
  let mockBot: jest.Mocked<TelegramBot>;
  let mockMonitor: jest.Mocked<NewsWeatherMonitor>;
  let mockFuzzyMatcher: jest.Mocked<NewsCommandsFuzzyMatcher>;

  const mockNewsApiKey = 'test-news-key';
  const mockWeatherApiKey = 'test-weather-key';

  beforeEach(() => {
    mockBot = {
      sendMessage: jest.fn().mockResolvedValue({}),
    } as any;

    mockMonitor = {
      createMorningSummary: jest.fn(),
      checkCriticalNews: jest.fn(),
      formatCriticalAlert: jest.fn(),
      getUkrainianNews: jest.fn(),
      getWeatherData: jest.fn(),
    } as any;

    mockFuzzyMatcher = {
      recognizeCommand: jest.fn(),
      getRecognitionStats: jest.fn().mockReturnValue({
        totalKeywords: 50,
        totalVariations: 100,
        supportedCities: 16
      })
    } as any;

    (NewsWeatherMonitor as jest.Mock).mockImplementation(() => mockMonitor);
    (NewsCommandsFuzzyMatcher as jest.Mock).mockImplementation(() => mockFuzzyMatcher);

    jest.clearAllTimers();
    jest.useFakeTimers();
    mockSetTimeout.mockClear();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π handler –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É –∑ —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—Ç–æ–º
    handler = new NewsWeatherHandler(
      mockNewsApiKey,
      mockWeatherApiKey,
      mockBot,
      [] // –ß–∏—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤
    );
  });

  afterEach(() => {
    jest.useRealTimers();
    jest.clearAllMocks();
  });

  describe('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', () => {
    it('–º–∞—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä NewsWeatherMonitor', () => {
      expect(NewsWeatherMonitor).toHaveBeenCalledWith(
        mockNewsApiKey,
        mockWeatherApiKey
      );
    });

    it('–º–∞—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å', () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è
      const status = handler.getSchedulerStatus();
      expect(status).toContain('morning_summary');
      expect(status).toContain('critical_monitoring');
    });
  });

  describe('handleNewsCommand', () => {
    describe('–ó–∞–ø–∏—Ç–∏ –Ω–æ–≤–∏–Ω', () => {
      const newsRequests = [
        '–Ø–∫—ñ –Ω–æ–≤–∏–Ω–∏?',
        '–©–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Å–≤—ñ—Ç—ñ?',
        '–†–æ–∑–∫–∞–∂–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏',
        '–©–æ —Ç–≤–æ—Ä–∏—Ç—å—Å—è?',
        '–°–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏'
      ];

      newsRequests.forEach(request => {
        it(`–º–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ "${request}" —è–∫ –∑–∞–ø–∏—Ç –Ω–æ–≤–∏–Ω`, async () => {
          // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
          mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
            type: 'news',
            confidence: 0.9,
            originalText: request,
            matchedKeyword: '–Ω–æ–≤–∏–Ω–∏'
          });

          const mockNews = [
            {
              id: '1',
              title: '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞',
              description: '–û–ø–∏—Å –Ω–æ–≤–∏–Ω–∏',
              url: 'https://example.com',
              publishedAt: new Date(),
              severity: 'medium' as const,
              category: 'general' as const,
              source: '–¢–µ—Å—Ç'
            }
          ];

          mockMonitor.getUkrainianNews.mockResolvedValueOnce(mockNews);

          const response = await handler.handleNewsCommand(123, request);

          expect(response).toContain('üì∞ **–í–ê–ñ–õ–ò–í–Ü –ù–û–í–ò–ù–ò:**');
          expect(response).toContain('–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞');
          expect(mockMonitor.getUkrainianNews).toHaveBeenCalledWith(24);
        });
      });
    });

    describe('–ó–∞–ø–∏—Ç–∏ –ø–æ–≥–æ–¥–∏', () => {
      const weatherRequests = [
        '–Ø–∫–∞ –ø–æ–≥–æ–¥–∞?',
        '–ü–æ–≥–æ–¥–∞ –≤ –ö–∏—î–≤—ñ',
        '–Ø–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞?',
        '–Ø–∫ –Ω–∞ –≤—É–ª–∏—Ü—ñ?'
      ];

      weatherRequests.forEach(request => {
        it(`–º–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ "${request}" —è–∫ –∑–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏`, async () => {
          // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
          mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
            type: 'weather',
            confidence: 0.85,
            originalText: request,
            matchedKeyword: '–ø–æ–≥–æ–¥–∞',
            city: '–ö–∏—ó–≤'
          });

          const mockWeather = {
            temperature: 15,
            condition: '—è—Å–Ω–æ',
            humidity: 60,
            windSpeed: 10,
            pressure: 760,
            alerts: [],
            city: '–ö–∏—ó–≤',
            description: '15¬∞C, —è—Å–Ω–æ'
          };

          mockMonitor.getWeatherData.mockResolvedValueOnce(mockWeather);

          const response = await handler.handleNewsCommand(123, request);

          expect(response).toContain('üå§ **–ü–æ–≥–æ–¥–∞ –≤ –ö–∏—ó–≤:**');
          expect(response).toContain('15¬∞C');
          expect(response).toContain('—è—Å–Ω–æ');
          expect(mockMonitor.getWeatherData).toHaveBeenCalled();
        });
      });
    });

    describe('–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é', () => {
      it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É', async () => {
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'subscribe',
          confidence: 0.9,
          originalText: '–•–æ—á—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏',
          matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
        });

        const response = await handler.handleNewsCommand(1001, '–•–æ—á—É –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏');

        expect(response).toContain('üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏!');
      });

      it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –≤—ñ–¥–ø–∏—Å–∫—É', async () => {
        // –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'subscribe',
          confidence: 0.9,
          originalText: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–æ–≤–∏–Ω–∏',
          matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
        });
        await handler.handleNewsCommand(1002, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–æ–≤–∏–Ω–∏');
        
        // –ü–æ—Ç—ñ–º –≤—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'unsubscribe',
          confidence: 0.9,
          originalText: '–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ –Ω–æ–≤–∏–Ω',
          matchedKeyword: '–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
        });
        const response = await handler.handleNewsCommand(1002, '–≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –≤—ñ–¥ –Ω–æ–≤–∏–Ω');

        expect(response).toContain('üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫');
      });

      it('–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –≤–∂–µ —ñ—Å–Ω—É—é—á—É –ø—ñ–¥–ø–∏—Å–∫—É', async () => {
        // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –¥–≤—ñ—á—ñ
        mockFuzzyMatcher.recognizeCommand.mockReturnValue({
          type: 'subscribe',
          confidence: 0.9,
          originalText: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
          matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
        });
        await handler.handleNewsCommand(1003, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');
        const response = await handler.handleNewsCommand(1003, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');

        expect(response).toContain('‚úÖ –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏');
      });
    });

    describe('–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∞', () => {
      const cityTests = [
        { text: '–ü–æ–≥–æ–¥–∞ –≤ –•–∞—Ä–∫–æ–≤—ñ', expectedCity: '–•–∞—Ä–∫—ñ–≤' },
        { text: '–Ø–∫–∞ –ø–æ–≥–æ–¥–∞ –≤ –û–¥–µ—Å—ñ?', expectedCity: '–û–¥–µ—Å–∞' },
        { text: '–õ—å–≤—ñ–≤ –ø–æ–≥–æ–¥–∞', expectedCity: '–õ—å–≤—ñ–≤' },
        { text: '–î–Ω—ñ–ø—Ä–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', expectedCity: '–î–Ω—ñ–ø—Ä–æ' }
      ];

      cityTests.forEach(({ text, expectedCity }) => {
        it(`–º–∞—î –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –º—ñ—Å—Ç–æ "${expectedCity}" –∑ —Ç–µ–∫—Å—Ç—É "${text}"`, async () => {
          // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–≥–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –∑ –º—ñ—Å—Ç–æ–º
          mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
            type: 'weather',
            confidence: 0.85,
            originalText: text,
            matchedKeyword: '–ø–æ–≥–æ–¥–∞',
            city: expectedCity
          });

          const mockWeather = {
            temperature: 10,
            condition: '—Ö–º–∞—Ä–Ω–æ',
            humidity: 70,
            windSpeed: 5,
            pressure: 755,
            alerts: [],
            city: expectedCity,
            description: '10¬∞C, —Ö–º–∞—Ä–Ω–æ'
          };

          mockMonitor.getWeatherData.mockResolvedValueOnce(mockWeather);

          const response = await handler.handleNewsCommand(123, text);

          expect(mockMonitor.getWeatherData).toHaveBeenCalledWith(expectedCity);
          expect(response).toContain(expectedCity);
        });
      });
    });

    it('–º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –Ω–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥', async () => {
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –º–æ–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è null (–Ω–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞)
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce(null);

      const response = await handler.handleNewsCommand(123, '–≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç');

      expect(response).toBe('');
    });
  });

  describe('–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å', () => {
    it('–º–∞—î –ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏', () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ
      const status = handler.getSchedulerStatus();
      expect(status).toContain('morning_summary');
      expect(status).toContain('‚úÖ'); // –ó–∞–≤–¥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ
    });

    it('–º–∞—î –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω', () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ
      const status = handler.getSchedulerStatus();
      expect(status).toContain('critical_monitoring');
      expect(status).toContain('‚úÖ'); // –ó–∞–≤–¥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–µ
    });
  });

  describe('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫', () => {
    it('–º–∞—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ä–∞–Ω–∫–æ–≤—É –∑–≤–æ–¥–∫—É –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º —á–∞—Ç–∞–º', async () => {
      // –ü—ñ–¥–ø–∏—Å—É—î–º–æ —á–∞—Ç
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'subscribe',
        confidence: 0.9,
        originalText: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
        matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
      });
      await handler.handleNewsCommand(2001, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —á–∞—Ç –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
      const subscribedChats = handler.getSubscribedChats();
      expect(subscribedChats).toContain(2001);
    });

    it('–Ω–µ –º–∞—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∑–≤–æ–¥–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤', async () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤
      const subscribedChats = handler.getSubscribedChats();
      expect(subscribedChats).toHaveLength(0);
    });
  });

  describe('–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω', () => {
    it('–º–∞—î –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º —á–∞—Ç–∞–º', async () => {
      // –ü—ñ–¥–ø–∏—Å—É—î–º–æ —á–∞—Ç
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'subscribe',
        confidence: 0.9,
        originalText: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
        matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
      });
      await handler.handleNewsCommand(3001, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
      const status = handler.getSchedulerStatus();
      expect(status).toContain('critical_monitoring');
      expect(status).toContain('‚úÖ');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —á–∞—Ç –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π
      const subscribedChats = handler.getSubscribedChats();
      expect(subscribedChats).toContain(3001);
    });
  });

  describe('–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º', () => {
    it('–º–∞—î –≤–º–∏–∫–∞—Ç–∏ —Ç–∞ –≤–∏–º–∏–∫–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥', () => {
      const enabledResult = handler.toggleCriticalMonitoring(true);
      expect(enabledResult).toContain('‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ');

      const disabledResult = handler.toggleCriticalMonitoring(false);
      expect(disabledResult).toContain('‚ùå –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω –≤–∏–º–∫–Ω–µ–Ω–æ');
    });

    it('–º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞', () => {
      const status = handler.getSchedulerStatus();
      
      expect(status).toContain('üìÖ **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞:**');
      expect(status).toContain('morning_summary');
      expect(status).toContain('critical_monitoring');
    });
  });

  describe('–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫', () => {
    it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'news',
        confidence: 0.9,
        originalText: '–Ω–æ–≤–∏–Ω–∏',
        matchedKeyword: '–Ω–æ–≤–∏–Ω–∏'
      });
      mockMonitor.getUkrainianNews.mockRejectedValueOnce(new Error('API Error'));

      const response = await handler.handleNewsCommand(123, '–Ω–æ–≤–∏–Ω–∏');

      expect(response).toContain('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏');
    });

    it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'weather',
        confidence: 0.85,
        originalText: '–ø–æ–≥–æ–¥–∞',
        matchedKeyword: '–ø–æ–≥–æ–¥–∞',
        city: '–ö–∏—ó–≤'
      });
      mockMonitor.getWeatherData.mockRejectedValueOnce(new Error('Weather API Error'));

      const response = await handler.handleNewsCommand(123, '–ø–æ–≥–æ–¥–∞');

      expect(response).toContain('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É');
    });

    it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'weather',
        confidence: 0.85,
        originalText: '–ø–æ–≥–æ–¥–∞ –≤ –ö–∏—î–≤—ñ',
        matchedKeyword: '–ø–æ–≥–æ–¥–∞',
        city: '–ö–∏—ó–≤'
      });
      mockMonitor.getWeatherData.mockResolvedValueOnce(null);

      const response = await handler.handleNewsCommand(123, '–ø–æ–≥–æ–¥–∞ –≤ –ö–∏—î–≤—ñ');

      expect(response).toContain('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –ö–∏—ó–≤');
    });

    it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
        type: 'news',
        confidence: 0.9,
        originalText: '–Ω–æ–≤–∏–Ω–∏',
        matchedKeyword: '–Ω–æ–≤–∏–Ω–∏'
      });
      mockMonitor.getUkrainianNews.mockResolvedValueOnce([]);

      const response = await handler.handleNewsCommand(123, '–Ω–æ–≤–∏–Ω–∏');

      expect(response).toContain('üì∞ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É');
    });
  });

  describe('–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤', () => {
    it('–º–∞—î –æ—á–∏—â–∞—Ç–∏ —Ç–∞–π–º–µ—Ä–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏', () => {
      const clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
      
      handler.cleanup();

      expect(clearTimeoutSpy).toHaveBeenCalled();
    });
  });

  describe('–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤', () => {
    it('–º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValue({
        type: 'subscribe',
        confidence: 0.9,
        originalText: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
        matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
      });
      
      await handler.handleNewsCommand(4001, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');
      await handler.handleNewsCommand(4002, '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è');

      const subscribedChats = handler.getSubscribedChats();

      expect(subscribedChats).toContain(4001);
      expect(subscribedChats).toContain(4002);
      expect(subscribedChats).toHaveLength(2);
    });
  });

  describe('Fuzzy matching —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å', () => {
    it('–º–∞—î —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥', () => {
      const testResult = handler.testCommandRecognition('–Ω–æ–≤–∏–Ω–∏');
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è (–º–æ–∂–ª–∏–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –º–æ–∫—É)
      expect(typeof testResult).toBeDefined();
    });

    it('–º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è', () => {
      const stats = handler.getRecognitionStats();
      expect(stats).toBeDefined();
      expect(typeof stats.totalKeywords).toBe('number');
      expect(typeof stats.totalVariations).toBe('number');
      expect(typeof stats.supportedCities).toBe('number');
    });
  });

  describe('–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å –¥–æ –ø–æ–º–∏–ª–æ–∫ —É –∫–æ–º–∞–Ω–¥–∞—Ö', () => {
    beforeEach(() => {
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π mockFuzzyMatcher –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É
      // @ts-ignore - –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
      handler.fuzzyMatcher = mockFuzzyMatcher;
    });

    it('–º–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –Ω–æ–≤–∏–Ω –∑ –ø–æ–º–∏–ª–∫–∞–º–∏', async () => {
      const commandsWithTypos = [
        '–Ω–æ–≤—ã–Ω–∏',
        '—à–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è',
        '—è–∫—ñ –Ω–æ–≤—ã–Ω—ã',
        '–æ—Å—Ç–∞–Ω–Ω—ñ–µ –ø–æ–¥—ñ—ñ'
      ];

      commandsWithTypos.forEach(async (command, index) => {
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'news',
          confidence: 0.85,
          originalText: command,
          matchedKeyword: '–Ω–æ–≤–∏–Ω–∏'
        });

        const mockNews = [
          {
            id: '1',
            title: '–¢–µ—Å—Ç–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞',
            description: '–û–ø–∏—Å –Ω–æ–≤–∏–Ω–∏',
            url: 'https://example.com',
            publishedAt: new Date(),
            severity: 'medium' as const,
            category: 'general' as const,
            source: '–¢–µ—Å—Ç'
          }
        ];

        mockMonitor.getUkrainianNews.mockResolvedValueOnce(mockNews);

        const response = await handler.handleNewsCommand(5100 + index, command);
        expect(response).toContain('üì∞ **–í–ê–ñ–õ–ò–í–Ü –ù–û–í–ò–ù–ò:**');
      });
    });

    it('–º–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –ø–æ–≥–æ–¥–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏', async () => {
      const commandsWithTypos = [
        '–ø–æ–≥–æ–¥—ã –≤ –∫–∏–µ–≤—ñ',
        '—Ç–µ–º–ø–∏—Ä–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Ö–∞—Ä—å–∫–æ–≤—ñ',
        '—è–∫ –Ω–∞–≤—É–ª–∏—Ü—ñ –≤ –æ–¥–µ—Å—Å—ñ'
      ];

      commandsWithTypos.forEach(async (command, index) => {
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'weather',
          confidence: 0.8,
          originalText: command,
          matchedKeyword: '–ø–æ–≥–æ–¥–∞',
          city: '–ö–∏—ó–≤'
        });

        const mockWeather = {
          temperature: 15,
          condition: '—è—Å–Ω–æ',
          humidity: 60,
          windSpeed: 10,
          pressure: 760,
          alerts: [],
          city: '–ö–∏—ó–≤',
          description: '15¬∞C, —è—Å–Ω–æ'
        };

        mockMonitor.getWeatherData.mockResolvedValueOnce(mockWeather);

        const response = await handler.handleNewsCommand(5200 + index, command);
        expect(response).toContain('üå§ **–ü–æ–≥–æ–¥–∞ –≤ –ö–∏—ó–≤:**');
      });
    });

    it('–º–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏', async () => {
      const commandsWithTypos = [
        '–ø—ñ—Ç–ø–∏—Å–∞—Ç–∏—Å—è',
        '–ø—ñ–¥–ø—ñ—Å–∫–∞ –Ω–∞ –Ω–æ–≤–∏–Ω–∏',
        '—Ö–æ—á—é —Ä–∞–Ω–∫–æ–≤—ñ –Ω–æ–≤—ã–Ω—ã'
      ];

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ chatId –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
      commandsWithTypos.forEach(async (command, index) => {
        mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce({
          type: 'subscribe',
          confidence: 0.75,
          originalText: command,
          matchedKeyword: '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'
        });

        const response = await handler.handleNewsCommand(5000 + index, command);
        expect(response).toContain('üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏!');
      });
    });

    it('–º–∞—î –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥', async () => {
      mockFuzzyMatcher.recognizeCommand.mockImplementationOnce(() => {
        throw new Error('Fuzzy matching error');
      });

      const response = await handler.handleNewsCommand(5300, '–Ω–æ–≤–∏–Ω–∏');
      expect(response).toContain('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É');
    });

    it('–º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –Ω–µ—Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥', async () => {
      mockFuzzyMatcher.recognizeCommand.mockReturnValueOnce(null);

      const response = await handler.handleNewsCommand(5400, '–≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç');
      expect(response).toBe('');
    });
  });
}); 