import { ModerationHandler, ModerationResponse, ModerationConfig } from '../../src/usecases/moderationHandler';

describe('ModerationHandler', () => {
  let moderationHandler: ModerationHandler;

  beforeEach(() => {
    moderationHandler = new ModerationHandler();
  });

  describe('Initialization', () => {
    it('should initialize with default configuration', () => {
      const config = moderationHandler.getConfig();
      
      expect(config.enableModerationInGroups).toBe(true);
      expect(config.enableModerationInPrivate).toBe(false);
      expect(config.warnOnMild).toBe(true);
      expect(config.moderateOnModerate).toBe(true);
      expect(config.strictOnSevere).toBe(true);
      expect(config.customResponses.warning.length).toBeGreaterThan(0);
      expect(config.customResponses.moderate.length).toBeGreaterThan(0);
      expect(config.customResponses.strict.length).toBeGreaterThan(0);
    });

    it('should accept custom configuration', () => {
      const customConfig: Partial<ModerationConfig> = {
        enableModerationInPrivate: true,
        warnOnMild: false
      };
      
      const handler = new ModerationHandler(customConfig);
      const config = handler.getConfig();
      
      expect(config.enableModerationInPrivate).toBe(true);
      expect(config.warnOnMild).toBe(false);
    });
  });

  describe('Clean messages', () => {
    it('should ignore clean messages in groups', () => {
      const response = moderationHandler.analyzeMessage(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
      expect(response.responseType).toBe('ignore');
      expect(response.reasoning).toContain('No profanity detected');
    });

    it('should ignore clean messages in private chats', () => {
      const response = moderationHandler.analyzeMessage(
        'Hello, how are you?',
        'private',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
      expect(response.responseType).toBe('ignore');
    });
  });

  describe('Chat type restrictions', () => {
    it('should ignore profanity in private chats by default', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å —â–æ –∑–∞ —Ñ—ñ–≥–Ω—è',
        'private',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
      expect(response.reasoning).toContain('Moderation disabled for private chats');
    });

    it('should respond to profanity in groups by default', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å —â–æ –∑–∞ —Ñ—ñ–≥–Ω—è',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
      expect(response.responseType).not.toBe('ignore');
    });

    it('should allow enabling moderation in private chats', () => {
      moderationHandler.updateConfig({ enableModerationInPrivate: true });
      
      const response = moderationHandler.analyzeMessage(
        '–º—É–¥–∞–∫ —è–∫–∏–π—Å—å',
        'private',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
    });
  });

  describe('Severity-based responses', () => {
    it('should provide warning response for mild profanity', () => {
      const response = moderationHandler.analyzeMessage(
        '—Å—É–∫–∞ —è–∫–∞ –Ω–µ–ø—Ä–∏—î–º–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è',
        'group',
        'user123',
        'chat456'
      );
      
      if (response.shouldRespond) {
        expect(response.responseType).toBe('warning');
        expect(response.response).toMatch(/–±–µ–∑|—Ç–æ–∫—Å–∏—á–Ω|–Ω–µ—Ü–µ–Ω–∑—É—Ä/i);
        expect(response.confidence).toBeGreaterThan(0.5);
      }
    });

    it('should provide moderate response for moderate profanity', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å –º—É–¥–∞–∫ —è–∫–∏–π',
        'group',
        'user123',
        'chat456'
      );
      
      if (response.shouldRespond) {
        expect(response.responseType).toBe('moderate');
        expect(response.response).toMatch(/–¥–µ–±—ñ–ª|–æ–±—Ä–∞–∂–∞–π|–æ–±—Ä–∞–∑–∏|–ø–∏–∑–¥–µ—Ü—å|–∫–∞—Ä–º—ñ|–•–≤–∞—Ç–∏—Ç|–ª–∏—Ç–∏|–∞–±'—é–∑–∏–≤–Ω—É|—Ö—Ä—ñ–Ω—å|–ø–∏–∑–¥–∞|–∑–∞—ó–±–µ—à—Å—è|–±–∏–¥–ª—è—Ü—å–∫–∞|—Ç—Ä—ã–Ω–¥–∞|–∫–≤–∏—Ç–æ–∫|–±–∞–Ω|—Ç–æ–∫—Å–∏—á–Ω–∞|—Ö—É–π–Ω—è|–∑–∞—ó–±–∞–ª–∞|–ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏|–°–¢–û–ü|‚ö†Ô∏è|–≥—ñ–≤–Ω—é–∫|–∑—É–±–∏|–≤–∏–±'—é/i);
      }
    });

    it('should provide strict response for severe profanity', () => {
      const response = moderationHandler.analyzeMessage(
        '—Ö—É–π –ø—ñ–∑–¥–∞ –µ–±–∞—Ç—å –±–ª—è—Ç—å',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
      expect(response.responseType).toBe('strict');
      expect(response.response).toMatch(/—Ç–æ–∫—Å–∏—á–Ω–∞|—Ç—Ä—ã–Ω–¥–∞|–æ—Å—Ç–∞–Ω–Ω—ñ–π|–ø–æ–¥–∏—Ö|–∞–±'—é–∑–∏–≤–Ω–∞|–ø–∞—â–∞|–º–æ—Ä–¥–∞|–∫–≤–∏—Ç–æ–∫|–ø–∏–∑–¥–µ—Ü—è|—Ç—Ä—ã–Ω–¥—ñ—Ç–∏–º–µ|–º—Ä–∞–∑—å|–∑–∞—ó–±–∞–≤|—Å–ª–æ–≤–æ|–∞—Å—Ñ–∞–ª—å—Ç|–∑–∞–∫–∞—Ç–∞—é|‚õî|—Ç–æ–∫—Å–∏—Ç–∏|—Å—É–∫–∞|–ø–∏–∑–¥–∞|–¥–µ–±—ñ–ª|–¥—É–º–∞—î—à|–∑–¥–æ—Ö–Ω–∏|–±–∞–Ω—ñ|–≥—ñ–≤–Ω—é–∫|–≤—è–∫–Ω–µ—à|–ø–∏–∑–¥–µ—Ü—å|–º–æ—Ä–¥—ñ|—Ö—Ä—ñ–Ω—å|–∫—ñ–Ω–µ—Ü—å|–ø—Ä–∏–¥—É—Ä–æ–∫/i);
    });
  });

  describe('Language-specific responses', () => {
    it('should prefer Ukrainian responses for Ukrainian profanity', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å –Ω–µ–ø—Ä–∏—î–º–Ω–æ',
        'group',
        'user123',
        'chat456'
      );
      
      if (response.shouldRespond) {
        // Should contain Ukrainian words like '–¥–∞–≤–∞–π', '–±–µ–∑', etc.
        expect(response.response).toMatch(/–¥–∞–≤–∞–π|–±–µ–∑|–º–æ–∂–µ–º–æ|–≤–∞—Ä—Ç–æ|–ø—Ä–∏–ø–∏–Ω–∏|—Å—Ç–æ–ø|–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω/i);
      }
    });
  });

  describe('Configuration updates', () => {
    it('should update configuration correctly', () => {
      const newConfig: Partial<ModerationConfig> = {
        warnOnMild: false,
        moderateOnModerate: false
      };
      
      moderationHandler.updateConfig(newConfig);
      const config = moderationHandler.getConfig();
      
      expect(config.warnOnMild).toBe(false);
      expect(config.moderateOnModerate).toBe(false);
    });

    it('should respect updated configuration in responses', () => {
      // Disable mild warnings
      moderationHandler.updateConfig({ warnOnMild: false });
      
      const response = moderationHandler.analyzeMessage(
        '—Å—É–∫–∞', // mild profanity
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
      expect(response.responseType).toBe('ignore');
    });
  });

  describe('Custom response management', () => {
    it('should allow adding custom warning responses', () => {
      const customResponse = 'üö® –ö–∞—Å—Ç–æ–º–Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è!';
      moderationHandler.addCustomResponse('warning', customResponse);
      
      const config = moderationHandler.getConfig();
      expect(config.customResponses.warning).toContain(customResponse);
    });

    it('should allow removing custom responses', () => {
      const customResponse = 'üö® –¢–µ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—å';
      moderationHandler.addCustomResponse('moderate', customResponse);
      
      let config = moderationHandler.getConfig();
      expect(config.customResponses.moderate).toContain(customResponse);
      
      moderationHandler.removeCustomResponse('moderate', customResponse);
      config = moderationHandler.getConfig();
      expect(config.customResponses.moderate).not.toContain(customResponse);
    });
  });

  describe('Profanity word management', () => {
    it('should allow adding custom profanity words', () => {
      moderationHandler.addProfanityWord('—Ç–µ—Å—Ç–ª–∞–π–∫–∞', 'ua');
      
      const response = moderationHandler.analyzeMessage(
        '—è–∫–∞ —Ç–µ—Å—Ç–ª–∞–π–∫–∞ —Å–∏—Ç—É–∞—Ü—ñ—è',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
    });

    it('should allow removing profanity words', () => {
      moderationHandler.addProfanityWord('—Ç–µ—Å—Ç–ª–∞–π–∫–∞', 'ua');
      
      let response = moderationHandler.analyzeMessage(
        '—Ç–µ—Å—Ç–ª–∞–π–∫–∞',
        'group',
        'user123',
        'chat456'
      );
      expect(response.shouldRespond).toBe(true);
      
      moderationHandler.removeProfanityWord('—Ç–µ—Å—Ç–ª–∞–π–∫–∞', 'ua');
      response = moderationHandler.analyzeMessage(
        '—Ç–µ—Å—Ç–ª–∞–π–∫–∞',
        'group',
        'user123',
        'chat456'
      );
      expect(response.shouldRespond).toBe(false);
    });
  });

  describe('Test utilities', () => {
    it('should provide test message functionality', () => {
      const result = moderationHandler.testMessage('–±–ª—è—Ç—å –º—É–¥–∞–∫');
      
      expect(result.analysis).toBeDefined();
      expect(result.response).toBeDefined();
      expect(result.analysis.hasProfanity).toBe(true);
      expect(result.response.shouldRespond).toBe(true);
    });
  });

  describe('Statistics', () => {
    it('should provide comprehensive statistics', () => {
      const stats = moderationHandler.getStats();
      
      expect(stats.profanityFilter).toBeDefined();
      expect(stats.config).toBeDefined();
      expect(stats.responseTemplates).toBeDefined();
      expect(stats.responseTemplates.warning).toBeGreaterThan(0);
      expect(stats.responseTemplates.moderate).toBeGreaterThan(0);
      expect(stats.responseTemplates.strict).toBeGreaterThan(0);
    });
  });

  describe('Response reasoning', () => {
    it('should provide detailed reasoning for responses', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å –º—É–¥–∞–∫',
        'group',
        'user123',
        'chat456'
      );
      
      if (response.shouldRespond) {
        expect(response.reasoning).toContain('Detected');
        expect(response.reasoning).toContain('profanity');
        expect(response.reasoning).toContain('Confidence:');
        expect(response.reasoning).toContain('%');
      }
    });

    it('should include detected words in reasoning', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å —â–æ –∑–∞ –ª–∞–π–Ω–æ',
        'group',
        'user123',
        'chat456'
      );
      
      if (response.shouldRespond) {
        expect(response.reasoning).toContain('Detected words:');
      }
    });
  });

  describe('Edge cases', () => {
    it('should handle empty messages', () => {
      const response = moderationHandler.analyzeMessage(
        '',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
    });

    it('should handle very long messages with profanity', () => {
      const longMessage = '–¶–µ –¥—É–∂–µ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç '.repeat(50) + '–±–ª—è—Ç—å' + ' —â–µ –±—ñ–ª—å—à–µ —Ç–µ–∫—Å—Ç—É'.repeat(50);
      const response = moderationHandler.analyzeMessage(
        longMessage,
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
    });

    it('should handle mixed language profanity', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å what a –º—É–¥–∞–∫ situation',
        'group',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
      expect(response.confidence).toBeGreaterThan(0.5);
    });
  });

  describe('Channel type handling', () => {
    it('should handle supergroup messages', () => {
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å –Ω–µ–ø—Ä–∏—î–º–Ω–æ',
        'supergroup',
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(true);
    });

    it('should ignore channel messages if groups disabled', () => {
      moderationHandler.updateConfig({ enableModerationInGroups: false });
      
      const response = moderationHandler.analyzeMessage(
        '–±–ª—è—Ç—å –Ω–µ–ø—Ä–∏—î–º–Ω–æ',
        'supergroup', // Use supergroup instead of channel
        'user123',
        'chat456'
      );
      
      expect(response.shouldRespond).toBe(false);
    });
  });
}); 