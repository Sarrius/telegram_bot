const { FeatureManager } = require('../../dist/config/featureManager');
const { EnhancedMessageHandler } = require('../../dist/usecases/enhancedMessageHandler');

async function testFeatureDisabling() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —á–µ—Ä–µ–∑ CLI:');
  console.log('='.repeat(50));

  const featureManager = FeatureManager.getInstance();
  const handler = new EnhancedMessageHandler();

  console.log('\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω powerWords:');
  console.log(`   –°—Ç–∞—Ç—É—Å: ${featureManager.isEnabled('powerWords') ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}`);

  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ power word –ü–ï–†–ï–î –≤–∏–º–∫–Ω–µ–Ω–Ω—è–º:');
  const contextBefore = {
    text: '–ü–æ—Ç—É–∂–Ω–æ –ø—Ä–∞—Ü—é—é!',
    userId: 'test_user',
    chatId: 'test_chat',
    userName: 'TestUser',
    isGroupChat: true,
    messageId: 1,
    isReplyToBot: false,
    mentionsBot: false,
    isDirectMention: false
  };

  const responseBefore = await handler.handleMessage(contextBefore);
  console.log(`   –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseBefore.responseType}`);
  console.log(`   –†–µ–∞–∫—Ü—ñ—è: ${responseBefore.shouldReact ? responseBefore.reaction : '–Ω–µ–º–∞—î'}`);
  console.log(`   Power Word –≤–∏—è–≤–ª–µ–Ω–æ: ${responseBefore.powerWordReaction ? '–¢–ê–ö' : '–ù–Ü'}`);

  console.log('\n3Ô∏è‚É£ –í–∏–º–∏–∫–∞—î–º–æ powerWords —á–µ—Ä–µ–∑ FeatureManager:');
  const disableResult = featureManager.disableFeature('powerWords');
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${disableResult}`);
  console.log(`   –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: ${featureManager.isEnabled('powerWords') ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}`);

  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç—É—î–º–æ power word –ü–Ü–°–õ–Ø –≤–∏–º–∫–Ω–µ–Ω–Ω—è:');
  const contextAfter = {
    text: '–ü–æ—Ç—É–∂–Ω–æ –ø—Ä–∞—Ü—é—é!',
    userId: 'test_user',
    chatId: 'test_chat',
    userName: 'TestUser',
    isGroupChat: true,
    messageId: 2,
    isReplyToBot: false,
    mentionsBot: false,
    isDirectMention: false
  };

  const responseAfter = await handler.handleMessage(contextAfter);
  console.log(`   –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${responseAfter.responseType}`);
  console.log(`   –†–µ–∞–∫—Ü—ñ—è: ${responseAfter.shouldReact ? responseAfter.reaction : '–Ω–µ–º–∞—î'}`);
  console.log(`   Power Word –≤–∏—è–≤–ª–µ–Ω–æ: ${responseAfter.powerWordReaction ? '–¢–ê–ö' : '–ù–Ü'}`);

  console.log('\n5Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ isEnabled –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ:');
  console.log(`   featureManager.isEnabled('powerWords'): ${featureManager.isEnabled('powerWords')}`);
  console.log(`   handler.featureManager (—Ç–æ–π —Å–∞–º–∏–π instance?): ${handler.featureManager === featureManager}`);

  console.log('\n6Ô∏è‚É£ –í–º–∏–∫–∞—î–º–æ –Ω–∞–∑–∞–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏:');
  const enableResult = featureManager.enableFeature('powerWords');
  console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${enableResult}`);
  console.log(`   –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${featureManager.isEnabled('powerWords') ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}`);

  console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

testFeatureDisabling().catch(console.error); 