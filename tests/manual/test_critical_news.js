const { NewsWeatherHandler } = require('../../dist/usecases/newsWeatherHandler');
const { EnhancedMessageHandler } = require('../../dist/usecases/enhancedMessageHandler');

console.log('üö® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω:');
console.log('='.repeat(50));

// Mock Telegram bot
const mockBot = {
  sendMessage: (chatId, message, options) => {
    console.log(`Bot –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É ${chatId}:`);
    console.log(message);
    console.log('‚îÄ'.repeat(40));
    return Promise.resolve();
  }
};

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä
const newsHandler = new NewsWeatherHandler(
  process.env.NEWS_API_KEY || 'test-key',
  process.env.WEATHER_API_KEY || 'test-key',
  mockBot
);

const enhancedHandler = new EnhancedMessageHandler(newsHandler, null, null);

async function testCriticalNewsCommands() {
  console.log('üì∞ –¢–µ—Å—Ç—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –Ω–æ–≤–∏–Ω:\n');

  const testCommands = [
    '–Ø–∫—ñ –Ω–æ–≤–∏–Ω–∏?',
    '–©–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?',
    '–©–æ –Ω–æ–≤–æ–≥–æ?',
    '—â–æ –ø–æ –Ω–æ–≤–∏–Ω–∞—Ö',
    '–æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏',
    '—Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏',
    '–∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏',
    '—â–æ —Ç–≤–æ—Ä–∏—Ç—å—Å—è –≤ —Å–≤—ñ—Ç—ñ'
  ];

  for (const command of testCommands) {
    console.log(`üîç –¢–µ—Å—Ç—É—î–º–æ: "${command}"`);
    
    try {
      const response = await enhancedHandler.handleMessage({
        chat: { id: 12345, type: 'private' },
        message_id: Math.floor(Math.random() * 1000000),
        date: Math.floor(Date.now() / 1000),
        text: command,
        from: {
          id: 67890,
          is_bot: false,
          first_name: '–¢–µ—Å—Ç–µ—Ä',
          username: 'tester'
        }
      });

      if (response.response && response.response.trim()) {
        console.log('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞:');
        console.log(response.response);
        console.log(`üìä –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${(response.confidence * 100).toFixed(1)}%`);
        console.log(`üéØ –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.type}`);
        if (response.reasoning) {
          console.log(`üí≠ –ú—ñ—Ä–∫—É–≤–∞–Ω–Ω—è: ${response.reasoning}`);
        }
      } else {
        console.log('‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞');
      }
      
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    console.log('‚îÄ'.repeat(60));
  }
}

async function testNewsRecognition() {
  console.log('\nüîç –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –Ω–æ–≤–∏–Ω:');
  console.log('='.repeat(50));

  const testPhrases = [
    '—â–æ –ø–æ –Ω–æ–≤–∏–Ω–∞—Ö',
    '—â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —É —Å–≤—ñ—Ç—ñ',
    '—è–∫—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó',
    '–∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏',
    '—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ —â–æ –Ω–æ–≤–æ–≥–æ',
    '–µ–∫—Å—Ç–µ—Ä–Ω—ñ –Ω–æ–≤–∏–Ω–∏'
  ];

  for (const phrase of testPhrases) {
    const result = newsHandler.testCommandRecognition(phrase);
    
    if (result && result.type === 'news') {
      console.log(`‚úÖ "${phrase}"`);
      console.log(`   –¢–∏–ø: ${result.type}`);
      console.log(`   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${(result.confidence * 100).toFixed(1)}%`);
      console.log(`   –ó–±—ñ–≥: ${result.matchedKeyword}`);
    } else if (result) {
      console.log(`‚ö†Ô∏è "${phrase}" - –≤–∏—è–≤–ª–µ–Ω–æ —è–∫ ${result.type} (–Ω–µ news)`);
    } else {
      console.log(`‚ùå "${phrase}" - –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ`);
    }
    console.log('');
  }
}

async function runTests() {
  console.log('üö® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω...\n');
  
  await testNewsRecognition();
  await testCriticalNewsCommands();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–æ—Ç –ø–æ–∫–∞–∑—É—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏.');
}

runTests().catch(console.error); 