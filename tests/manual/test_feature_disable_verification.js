/**
 * –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–∫—Ç–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–º–∫–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ FeatureManager, –≤–æ–Ω–∞ –¥—ñ–π—Å–Ω–æ –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î
 */

const { FeatureManager } = require('../../dist/config/featureManager');
const { EnhancedMessageHandler } = require('../../dist/usecases/enhancedMessageHandler');

console.log('üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
console.log('=====================================');

// –¢–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
const testMessages = [
    {
        functionName: 'moderation',
        message: '–π–æ–±–∞–Ω–∏–π –¥—É—Ä–∞–∫',
        expectedResponse: 'none', // –ú–∞—î –±—É—Ç–∏ none —è–∫—â–æ moderation –≤–∏–º–∫–Ω–µ–Ω–∞
        description: '–õ–∞–π–∫–∞ –º–∞—î —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ–π –º–æ–¥–µ—Ä–∞—Ü—ñ—ó'
    },
    {
        functionName: 'memory', 
        message: '–∑—Ä–æ–±–∏ —â–æ—Å—å –∫–æ—Ä–∏—Å–Ω–µ',
        expectedResponse: 'none', // –ú–∞—î –±—É—Ç–∏ none —è–∫—â–æ memory –≤–∏–º–∫–Ω–µ–Ω–∞
        description: '–ó–∞–ø–∞–º\'—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è –º–∞—î –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ–π –ø–∞–º\'—è—Ç—ñ'
    },
    {
        functionName: 'nlp',
        message: '–ø—Ä–∏–≤—ñ—Ç —è–∫ —Å–ø—Ä–∞–≤–∏', 
        expectedResponse: 'none', // –ú–∞—î –±—É—Ç–∏ none —è–∫—â–æ nlp –≤–∏–º–∫–Ω–µ–Ω–∞  
        description: 'NLP —Ä–æ–∑–º–æ–≤–∏ –º–∞—é—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ–π nlp'
    },
    {
        functionName: 'atmosphere',
        message: '–≤—Å—ñ–º –ø—Ä–∏–≤—ñ—Ç!',
        expectedResponse: 'none', // –ú–∞—î –±—É—Ç–∏ none —è–∫—â–æ atmosphere –≤–∏–º–∫–Ω–µ–Ω–∞
        description: '–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ –º–∞—î –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ–π atmosphere'
    },
    {
        functionName: 'profanityFilter',
        message: '–±–ª—è–¥—å —Å—É–∫–∞',
        expectedResponse: 'none', // –ú–∞—î –±—É—Ç–∏ none —è–∫—â–æ profanityFilter –≤–∏–º–∫–Ω–µ–Ω–∞
        description: '–§—ñ–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏ –º–∞—î –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–æ–º—É profanityFilter'
    },
    {
        functionName: 'powerWords',
        message: '–ø–æ—Ç—É–∂–Ω–æ!', 
        expectedResponse: 'power_word', // –ú–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ - —î–¥–∏–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —â–æ –ø—Ä–∞—Ü—é—î
        description: 'PowerWords –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ (—É–≤—ñ–º–∫–Ω–µ–Ω–∞)'
    }
];

async function testFeatureDisabling() {
    const featureManager = FeatureManager.getInstance();
    const messageHandler = new EnhancedMessageHandler();
    
    console.log('\nüìã –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π:');
    console.log(featureManager.getFeatureStatus());
    
    console.log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...\n');
    
    let totalTests = 0;
    let passedTests = 0;
    let failedTests = [];
    
    for (const test of testMessages) {
        totalTests++;
        
        console.log(`üîç –¢–µ—Å—Ç—É—é ${test.functionName}: "${test.message}"`);
        console.log(`   –û–ø–∏—Å: ${test.description}`);
        console.log(`   –û—á—ñ–∫—É–≤–∞–Ω–∏–π responseType: ${test.expectedResponse}`);
        
        const context = {
            text: test.message,
            userId: 'test_user_123',
            userName: 'TestUser',
            chatId: 'test_chat_456',
            chatType: 'group',
            isDirectMention: false,
            mentionsBot: false,
            isReplyToBot: false
        };
        
        try {
            const response = await messageHandler.handleMessage(context);
            console.log(`   –§–∞–∫—Ç–∏—á–Ω–∏–π responseType: ${response.responseType}`);
            
            if (response.responseType === test.expectedResponse) {
                console.log(`   ‚úÖ –ü–†–û–ô–î–ï–ù–û - —Ñ—É–Ω–∫—Ü—ñ—è ${test.functionName} –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
                passedTests++;
            } else {
                console.log(`   ‚ùå –ü–†–û–í–ê–õ - —Ñ—É–Ω–∫—Ü—ñ—è ${test.functionName} –ø—Ä–∞—Ü—é—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!`);
                console.log(`      –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: ${test.expectedResponse}, –æ—Ç—Ä–∏–º–∞–Ω–æ: ${response.responseType}`);
                
                if (response.shouldReply) {
                    console.log(`      –í—ñ–¥–ø–æ–≤—ñ–¥—å: "${response.reply}"`);
                }
                if (response.shouldReact) {
                    console.log(`      –†–µ–∞–∫—Ü—ñ—è: ${response.reaction}`);
                }
                
                failedTests.push({
                    functionName: test.functionName,
                    expected: test.expectedResponse,
                    actual: response.responseType,
                    message: test.message
                });
            }
            
        } catch (error) {
            console.log(`   ‚ùå –ü–û–ú–ò–õ–ö–ê - ${error.message}`);
            failedTests.push({
                functionName: test.functionName,
                expected: test.expectedResponse,
                actual: 'ERROR',
                message: test.message,
                error: error.message
            });
        }
        
        console.log(''); // –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
    }
    
    // –ü—ñ–¥—Å—É–º–∫–∏
    console.log('=================================');
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
    console.log(`   –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: ${totalTests}`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests} ‚úÖ`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests.length} ‚ùå`);
    console.log(`   –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${Math.round((passedTests / totalTests) * 100)}%`);
    
    if (failedTests.length > 0) {
        console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ò –í–ò–Ø–í–õ–ï–ù–Ü:');
        failedTests.forEach(fail => {
            console.log(`   ‚Ä¢ ${fail.functionName}: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è ${fail.expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ ${fail.actual}`);
            if (fail.error) {
                console.log(`     –ü–æ–º–∏–ª–∫–∞: ${fail.error}`);
            }
        });
        
        console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:');
        console.log('   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ EnhancedMessageHandler.handleMessage()');
        console.log('   2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä—è—é—Ç—å featureManager.isEnabled()');
        console.log('   3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ü–ï–†–ï–î –æ–±—Ä–æ–±–∫–æ—é');
        console.log('   4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ shouldEngageBasedOnEmotions() –Ω–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    } else {
        console.log('\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü! –§—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testFeatureDisabling().catch(console.error); 