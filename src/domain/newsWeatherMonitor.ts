import axios from 'axios';

export interface NewsItem {
  id: string;
  title: string;
  description: string;
  url: string;
  publishedAt: Date;
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: 'general' | 'politics' | 'weather' | 'emergency' | 'economy' | 'social';
  source: string;
}

export interface WeatherData {
  temperature: number;
  condition: string;
  humidity: number;
  windSpeed: number;
  pressure: number;
  alerts: WeatherAlert[];
  city: string;
  description: string;
}

export interface WeatherAlert {
  type: 'warning' | 'watch' | 'emergency';
  title: string;
  description: string;
  severity: 'minor' | 'moderate' | 'severe' | 'extreme';
  startTime: Date;
  endTime: Date;
}

export interface DailySummary {
  date: Date;
  weather: WeatherData;
  topNews: NewsItem[];
  criticalAlerts: (NewsItem | WeatherAlert)[];
}

export class NewsWeatherMonitor {
  private readonly NEWS_API_KEY: string;
  private readonly WEATHER_API_KEY: string;
  private readonly UKRAINE_NEWS_SOURCES = [
    'pravda.com.ua',
    'ukrinform.ua',
    'tsn.ua',
    'unian.ua',
    'korrespondent.net'
  ];
  
  private lastNewsCheck: Date = new Date(0);
  private lastCriticalNewsIds: Set<string> = new Set();
  private criticalKeywords: string[] = [
    '–Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è', '–∞–≤–∞—Ä—ñ—è', '–ø–æ–∂–µ–∂–∞', '–≤–∏–±—É—Ö', '—Ç–µ—Ä–∞–∫—Ç',
    '–∑–µ–º–ª–µ—Ç—Ä—É—Å', '–ø–æ–≤—ñ–Ω—å', '—É—Ä–∞–≥–∞–Ω', '—Å–º–µ—Ä—á', '–∫—Ä–∏—Ç–∏—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è',
    '–µ–≤–∞–∫—É–∞—Ü—ñ—è', '–∂–µ—Ä—Ç–≤–∏', '–ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª—ñ', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '—Ä—É–π–Ω—É–≤–∞–Ω–Ω—è',
    '–æ–±—Å—Ç—Ä—ñ–ª', '–∞—Ç–∞–∫–∞', '–≤—ñ–π—Å—å–∫–æ–≤—ñ –¥—ñ—ó', '—Ç—Ä–∏–≤–æ–≥–∞', '—Å–∏—Ä–µ–Ω–∞'
  ];

  constructor(newsApiKey: string, weatherApiKey: string) {
    this.NEWS_API_KEY = newsApiKey;
    this.WEATHER_API_KEY = weatherApiKey;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
   */
  async getUkrainianNews(hoursBack: number = 24): Promise<NewsItem[]> {
    try {
      const fromDate = new Date(Date.now() - hoursBack * 60 * 60 * 1000);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NewsAPI –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
      const response = await axios.get('https://newsapi.org/v2/everything', {
        params: {
          q: 'Ukraine OR –£–∫—Ä–∞—ó–Ω–∞',
          language: 'uk',
          sortBy: 'publishedAt',
          from: fromDate.toISOString(),
          apiKey: this.NEWS_API_KEY,
          pageSize: 50
        },
        timeout: 10000
      });

      const newsItems: NewsItem[] = response.data.articles.map((article: any, index: number) => ({
        id: `${article.url}_${article.publishedAt}` || `news_${Date.now()}_${index}`,
        title: article.title || '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞',
        description: article.description || article.content?.substring(0, 200) || '',
        url: article.url || '',
        publishedAt: new Date(article.publishedAt),
        severity: this.determineSeverity(article.title + ' ' + article.description),
        category: this.determineCategory(article.title + ' ' + article.description),
        source: article.source?.name || '–ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ'
      }));

      return newsItems.filter(item => item.title && item.title !== '[Removed]');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω:', error);
      return [];
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
   */
  async getWeatherData(city: string = '–ö–∏—ó–≤'): Promise<WeatherData | null> {
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ OpenWeatherMap API
      const [currentWeather, alerts] = await Promise.all([
        axios.get('https://api.openweathermap.org/data/2.5/weather', {
          params: {
            q: `${city},UA`,
            appid: this.WEATHER_API_KEY,
            units: 'metric',
            lang: 'uk'
          },
          timeout: 10000
        }),
        this.getWeatherAlerts(city)
      ]);

      const weather = currentWeather.data;
      
      return {
        temperature: Math.round(weather.main.temp),
        condition: weather.weather[0].description,
        humidity: weather.main.humidity,
        windSpeed: Math.round(weather.wind?.speed * 3.6), // –º/—Å -> –∫–º/–≥–æ–¥
        pressure: Math.round(weather.main.pressure * 0.75), // –≥–ü–∞ -> –º–º —Ä—Ç.—Å—Ç.
        alerts,
        city: weather.name,
        description: `${Math.round(weather.main.temp)}¬∞C, ${weather.weather[0].description}`
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏:', error);
      return null;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É
   */
  private async getWeatherAlerts(city: string): Promise<WeatherAlert[]> {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º—ñ—Å—Ç–∞
      const geoResponse = await axios.get('https://api.openweathermap.org/geo/1.0/direct', {
        params: {
          q: `${city},UA`,
          limit: 1,
          appid: this.WEATHER_API_KEY
        },
        timeout: 5000
      });

      if (geoResponse.data.length === 0) return [];

      const { lat, lon } = geoResponse.data[0];

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
      const alertsResponse = await axios.get('https://api.openweathermap.org/data/3.0/onecall', {
        params: {
          lat,
          lon,
          appid: this.WEATHER_API_KEY,
          exclude: 'minutely,hourly,daily'
        },
        timeout: 5000
      });

      const alerts = alertsResponse.data.alerts || [];
      
      return alerts.map((alert: any) => ({
        type: this.mapAlertType(alert.event),
        title: alert.event,
        description: alert.description,
        severity: this.mapAlertSeverity(alert.tags),
        startTime: new Date(alert.start * 1000),
        endTime: new Date(alert.end * 1000)
      }));
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É:', error);
      return [];
    }
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î —Ä–∞–Ω–∫–æ–≤—É –∑–≤–æ–¥–∫—É –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏
   */
  async createMorningSummary(city: string = '–ö–∏—ó–≤'): Promise<string> {
    try {
      const [news, weather] = await Promise.all([
        this.getUkrainianNews(24),
        this.getWeatherData(city)
      ]);

      const topNews = news
        .sort((a, b) => b.publishedAt.getTime() - a.publishedAt.getTime())
        .slice(0, 5);

      let summary = `üåÖ **–†–∞–Ω–∫–æ–≤–∞ –∑–≤–æ–¥–∫–∞ –Ω–∞ ${new Date().toLocaleDateString('uk-UA')}**\n\n`;

      // –ü–æ–≥–æ–¥–∞
      if (weather) {
        summary += `üå§ **–ü–æ–≥–æ–¥–∞ –≤ ${weather.city}:**\n`;
        summary += `${weather.description}\n`;
        summary += `üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weather.temperature}¬∞C\n`;
        summary += `üí® –í—ñ—Ç–µ—Ä: ${weather.windSpeed} –∫–º/–≥–æ–¥\n`;
        summary += `üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: ${weather.humidity}%\n\n`;

        if (weather.alerts.length > 0) {
          summary += `‚ö†Ô∏è **–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É:**\n`;
          weather.alerts.forEach(alert => {
            summary += `‚Ä¢ ${alert.title}: ${alert.description}\n`;
          });
          summary += '\n';
        }
      }

      // –ù–æ–≤–∏–Ω–∏
      if (topNews.length > 0) {
        summary += `üì∞ **–ì–æ–ª–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏:**\n\n`;
        topNews.forEach((item, index) => {
          const emoji = this.getSeverityEmoji(item.severity);
          summary += `${emoji} **${item.title}**\n`;
          if (item.description) {
            summary += `${item.description.substring(0, 150)}${item.description.length > 150 ? '...' : ''}\n`;
          }
          summary += `üîó [–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ](${item.url})\n\n`;
        });
      } else {
        summary += `üì∞ **–ù–æ–≤–∏–Ω–∏:** –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω\n\n`;
      }

      summary += `ü§ñ –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è! –°–ª—ñ–¥–∫—É—é –∑–∞ –Ω–æ–≤–∏–Ω–∞–º–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—é –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ –ø–æ–¥—ñ—ó.`;

      return summary;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞–Ω–∫–æ–≤–æ—ó –∑–≤–æ–¥–∫–∏:', error);
      return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞–Ω–∫–æ–≤—É –∑–≤–æ–¥–∫—É. –°–ø—Ä–æ–±—É—é –ø—ñ–∑–Ω—ñ—à–µ.';
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö
   */
  async checkCriticalNews(): Promise<NewsItem[]> {
    try {
      const recentNews = await this.getUkrainianNews(4); // –û—Å—Ç–∞–Ω–Ω—ñ 4 –≥–æ–¥–∏–Ω–∏
      
      const criticalNews = recentNews.filter(item => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–∏ –≤–∂–µ –ø—Ä–æ —Ü—é –Ω–æ–≤–∏–Ω—É
        if (this.lastCriticalNewsIds.has(item.id)) {
          return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å
        const isCritical = item.severity === 'critical' || 
                          this.containsCriticalKeywords(item.title + ' ' + item.description);

        if (isCritical) {
          this.lastCriticalNewsIds.add(item.id);
          // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ ID (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 100)
          if (this.lastCriticalNewsIds.size > 100) {
            const idsArray = Array.from(this.lastCriticalNewsIds);
            this.lastCriticalNewsIds = new Set(idsArray.slice(-100));
          }
        }

        return isCritical;
      });

      return criticalNews;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω:', error);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É—î –∫—Ä–∏—Ç–∏—á–Ω—É –Ω–æ–≤–∏–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
   */
  formatCriticalAlert(item: NewsItem): string {
    const emoji = this.getSeverityEmoji(item.severity);
    const urgencyEmoji = item.severity === 'critical' ? 'üö®üö®üö®' : '‚ö†Ô∏è';
    
    let message = `${urgencyEmoji} **–í–ê–ñ–õ–ò–í–ê –ù–û–í–ò–ù–ê** ${urgencyEmoji}\n\n`;
    message += `${emoji} **${item.title}**\n\n`;
    
    if (item.description) {
      message += `${item.description}\n\n`;
    }
    
    message += `üîó [–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é](${item.url})\n`;
    message += `üìç –î–∂–µ—Ä–µ–ª–æ: ${item.source}`;
    
    return message;
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î —Ä—ñ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ –Ω–æ–≤–∏–Ω–∏
   */
  private determineSeverity(text: string): 'low' | 'medium' | 'high' | 'critical' {
    const lowerText = text.toLowerCase();
    
    if (this.containsCriticalKeywords(lowerText)) {
      return 'critical';
    }

    const highKeywords = ['–≤–∞–∂–ª–∏–≤–æ', '—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ', '–µ–∫—Å—Ç—Ä–µ–Ω–æ', '–Ω–µ–≥–∞–π–Ω–æ'];
    if (highKeywords.some(keyword => lowerText.includes(keyword))) {
      return 'high';
    }

    const mediumKeywords = ['–Ω–æ–≤–∏–Ω–∞', '–ø–æ–¥—ñ—è', '—Ä–æ–∑–≤–∏—Ç–æ–∫', '—Å–∏—Ç—É–∞—Ü—ñ—è'];
    if (mediumKeywords.some(keyword => lowerText.includes(keyword))) {
      return 'medium';
    }

    return 'low';
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–æ–≤–∏–Ω–∏
   */
  private determineCategory(text: string): 'general' | 'politics' | 'weather' | 'emergency' | 'economy' | 'social' {
    const lowerText = text.toLowerCase();

    if (lowerText.includes('–ø–æ–≥–æ–¥–∞') || lowerText.includes('–¥–æ—â') || lowerText.includes('—Å–Ω—ñ–≥')) {
      return 'weather';
    }

    if (this.containsCriticalKeywords(lowerText)) {
      return 'emergency';
    }

    if (lowerText.includes('–ø–æ–ª—ñ—Ç–∏–∫–∞') || lowerText.includes('—É—Ä—è–¥') || lowerText.includes('–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç')) {
      return 'politics';
    }

    if (lowerText.includes('–µ–∫–æ–Ω–æ–º—ñ–∫–∞') || lowerText.includes('–≥—Ä–∏–≤–Ω—è') || lowerText.includes('—Ü—ñ–Ω–∏')) {
      return 'economy';
    }

    return 'general';
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
   */
  private containsCriticalKeywords(text: string): boolean {
    return this.criticalKeywords.some(keyword => text.toLowerCase().includes(keyword));
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–≤–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
   */
  private getSeverityEmoji(severity: string): string {
    switch (severity) {
      case 'critical': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      case 'medium': return 'üì¢';
      case 'low': return 'üí¨';
      default: return 'üì∞';
    }
  }

  /**
   * –ú–∞–ø—É—î —Ç–∏–ø –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É
   */
  private mapAlertType(event: string): 'warning' | 'watch' | 'emergency' {
    const lowerEvent = event.toLowerCase();
    if (lowerEvent.includes('emergency') || lowerEvent.includes('extreme')) {
      return 'emergency';
    }
    if (lowerEvent.includes('warning')) {
      return 'warning';
    }
    return 'watch';
  }

  /**
   * –ú–∞–ø—É—î —Ä—ñ–≤–µ–Ω—å —Å–µ—Ä–π–æ–∑–Ω–æ—Å—Ç—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
   */
  private mapAlertSeverity(tags: string[]): 'minor' | 'moderate' | 'severe' | 'extreme' {
    if (!tags || tags.length === 0) return 'minor';
    
    const tagString = tags.join(' ').toLowerCase();
    if (tagString.includes('extreme')) return 'extreme';
    if (tagString.includes('severe')) return 'severe';
    if (tagString.includes('moderate')) return 'moderate';
    return 'minor';
  }
} 