// Simple atmosphere enhancer without external dependencies

export interface AtmosphereConfig {
  quietPeriodThresholdMs: number;
  enableAutomaticEngagement: boolean;
  enableRoleAssignment: boolean;
  enablePolls: boolean;
  enableFunFacts: boolean;
  maxEngagementPerHour: number;
  primaryLanguage: 'uk' | 'en';
}

export interface ChatActivity {
  chatId: string;
  lastMessageTime: number;
  messageCount: number;
  activeUsers: Set<string>;
  recentTopics: string[];
  mood: 'positive' | 'negative' | 'neutral' | 'mixed';
  engagementScore: number;
  language: 'uk' | 'en' | 'mixed';
}

export interface UserRole {
  userId: string;
  role: string;
  assignedAt: number;
  messageCount: number;
  characteristics: string[];
}

export interface EngagementAction {
  type: 'joke' | 'fact' | 'poll' | 'praise' | 'tease' | 'game' | 'topic_suggestion';
  content: string;
  pollOptions?: string[];
  targetUserId?: string;
  priority: number;
  language: 'uk' | 'en';
}

export class AtmosphereEnhancer {
  private config: AtmosphereConfig;
  private chatActivities: Map<string, ChatActivity> = new Map();
  private userRoles: Map<string, UserRole> = new Map();
  private lastEngagementTime: Map<string, number> = new Map();
  private engagementCounts: Map<string, number> = new Map();
  // Removed cron jobs for simplicity

  // Ukrainian fun facts
  private readonly ukrainianFunFacts: string[] = [
    "–ß–∏ –∑–Ω–∞–ª–∏ –≤–∏, —â–æ —É –≤–æ—Å—å–º–∏–Ω–æ–≥—ñ–≤ —Ç—Ä–∏ —Å–µ—Ä—Ü—è? üêô –•—Ç–æ –≤–æ—Å—å–º–∏–Ω—ñ–≥ —Ü—å–æ–≥–æ —á–∞—Ç—É?",
    "–ì—Ä—É–ø–∞ —Ñ–ª–∞–º—ñ–Ω–≥–æ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è '—Ñ–ª–µ–º–±–æ–π—è–Ω—Å'! ü¶© –ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ?",
    "–ú–µ–¥ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø—Å—É—î—Ç—å—Å—è! –î–µ—è–∫–∏–π –º–µ–¥ –∑ —î–≥–∏–ø–µ—Ç—Å—å–∫–∏—Ö –≥—Ä–æ–±–Ω–∏—Ü—å –º–∞—î –ø–æ–Ω–∞–¥ 3000 —Ä–æ–∫—ñ–≤! üçØ",
    "–û–¥–Ω–∞ —Ö–º–∞—Ä–∞ –º–æ–∂–µ –≤–∞–∂–∏—Ç–∏ –±—ñ–ª—å—à–µ –º—ñ–ª—å–π–æ–Ω–∞ —Ñ—É–Ω—Ç—ñ–≤! ‚òÅÔ∏è –†–æ–∑—É–º = –ø—ñ–¥—ñ—Ä–≤–∞–Ω–∏–π!",
    "–ú–µ—Ç–µ–ª–∏–∫–∏ –∫—É—à—Ç—É—é—Ç—å –Ω–æ–≥–∞–º–∏! ü¶ã –£—è–≤—ñ—Ç—å –∫—É—à—Ç—É–≤–∞—Ç–∏ –ø—ñ—Ü—É –ø–∞–ª—å—Ü—è–º–∏ –Ω—ñ–≥!",
    "–ù–∞–π–¥–æ–≤—à–µ —Å–ª–æ–≤–æ, —è–∫–µ –º–æ–∂–Ω–∞ –Ω–∞–±—Ä–∞—Ç–∏ –ª—ñ–≤–æ—é —Ä—É–∫–æ—é - '—Å—Ç—é–∞—Ä–¥–µ—Å–∞'! ‚å®Ô∏è",
    "–ú–æ–∂–ª–∏–≤–∏—Ö —ñ–≥–æ—Ä —É —à–∞—Ö–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –∞—Ç–æ–º—ñ–≤ —É –≤–∏–¥–∏–º–æ–º—É –≤—Å–µ—Å–≤—ñ—Ç—ñ! ‚ôüÔ∏è",
    "–°–µ—Ä—Ü–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤—ñ! ü¶ê –ú—ñ—Å—Ü–µ, –º—ñ—Å—Ü–µ, –º—ñ—Å—Ü–µ!",
    "–ë–∞–Ω–∞–Ω–∏ - —Ü–µ —è–≥–æ–¥–∏, –∞ –ø–æ–ª—É–Ω–∏—Ü—ñ - –Ω—ñ! üçåüçì –ü—Ä–∏—Ä–æ–¥–∞ —Ç–∞–∫–∞ –¥–∏–≤–Ω–∞!",
    "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥—É–¥—ñ—Ç–∏, —Ç—Ä–∏–º–∞—é—á–∏ –Ω—ñ—Å! üëÉ –ù–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è... –≥–∞—Ä–∞–∑–¥, —Å–ø—Ä–æ–±—É–≤–∞–ª–∏!"
  ];

  private readonly funFacts: string[] = [
    "Did you know octopuses have three hearts? üêô Who's the octopus of this chat?",
    "A group of flamingos is called a 'flamboyance'! ü¶© How fabulous is that?",
    "Honey never spoils! Some honey found in Egyptian tombs is over 3000 years old! üçØ",
    "A single cloud can weigh more than a million pounds! ‚òÅÔ∏è Mind = blown!",
    "Butterflies taste with their feet! ü¶ã Imagine tasting pizza with your toes!",
    "The longest word you can type with just your left hand is 'stewardesses'! ‚å®Ô∏è",
    "There are more possible games of chess than atoms in the observable universe! ‚ôüÔ∏è",
    "A shrimp's heart is in its head! ü¶ê Location, location, location!",
    "Bananas are berries, but strawberries aren't! üçåüçì Nature's weird like that!",
    "You can't hum while holding your nose! üëÉ Don't try it... okay, you tried it!"
  ];

  // Ukrainian jokes
  private readonly ukrainianJokes: string[] = [
    "–ß–æ–º—É –≤—á–µ–Ω—ñ –Ω–µ –¥–æ–≤—ñ—Ä—è—é—Ç—å –∞—Ç–æ–º–∞–º? –ë–æ –≤–æ–Ω–∏ –≤—Å–µ –≤–∏–≥–∞–¥—É—é—Ç—å! ‚öõÔ∏è",
    "–Ø —Å–∫–∞–∑–∞–≤ –¥—Ä—É–∂–∏–Ω—ñ, —â–æ –≤–æ–Ω–∞ –º–∞–ª—é—î –±—Ä–æ–≤–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–æ. –í–æ–Ω–∞ –∑–¥–∏–≤—É–≤–∞–ª–∞—Å—å! üòÆ",
    "–ß–æ–º—É –æ–ø—É–¥–∞–ª–æ –≤–∏–≥—Ä–∞–ª–æ –Ω–∞–≥–æ—Ä–æ–¥—É? –í–æ–Ω–æ –≤–∏–¥–∞—Ç–Ω–æ —Å—Ç–æ—è–ª–æ —É —Å–≤–æ—î–º—É –ø–æ–ª—ñ! üåæ",
    "–©–æ –Ω–∞–π–∫—Ä–∞—â–µ —É –®–≤–µ–π—Ü–∞—Ä—ñ—ó? –ù–µ –∑–Ω–∞—é, –∞–ª–µ –ø—Ä–∞–ø–æ—Ä - –≤–µ–ª–∏–∫–∏–π –ø–ª—é—Å! üá®üá≠",
    "–ß–æ–º—É —è–π—Ü—è –Ω–µ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—é—Ç—å –∂–∞—Ä—Ç–∏? –í–æ–Ω–∏ –± —Ä–æ–∑–∫–æ–ª–æ–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ! ü•ö",
    "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –≤–µ–¥–º—ñ–¥—å –±–µ–∑ –∑—É–±—ñ–≤? –ñ–µ–ª–µ–π–Ω–∏–π –≤–µ–¥–º—ñ–¥—å! üêª",
    "–ß–æ–º—É –∫–Ω–∏–≥–∞ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –≤–∏–≥–ª—è–¥–∞–ª–∞ —Å—É–º–Ω–æ—é? –£ –Ω–µ—ó –±—É–ª–æ –∑–∞–±–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º! üìö",
    "–©–æ –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–µ —ñ –∑–≤—É—á–∏—Ç—å —è–∫ –ø–∞–ø—É–≥–∞? –ú–æ—Ä–∫–≤–∞! ü•ï",
    "–ß–æ–º—É —Å–∫–µ–ª–µ—Ç–∏ –Ω–µ –±'—é—Ç—å—Å—è –æ–¥–∏–Ω –∑ –æ–¥–Ω–∏–º? –£ –Ω–∏—Ö –Ω–µ–º–∞—î —Å–º—ñ–ª–∏–≤–æ—Å—Ç—ñ! üíÄ",
    "–Ø–∫ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –¥–∏–Ω–æ–∑–∞–≤—Ä, —â–æ —Ä–æ–∑–±–∏–≤ –º–∞—à–∏–Ω—É? –¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä –†–µ–∫—Å! ü¶ï"
  ];

  private readonly jokes: string[] = [
    "Why don't scientists trust atoms? Because they make up everything! ‚öõÔ∏è",
    "I told my wife she was drawing her eyebrows too high. She looked surprised! üòÆ",
    "Why did the scarecrow win an award? He was outstanding in his field! üåæ",
    "What's the best thing about Switzerland? I don't know, but the flag is a big plus! üá®üá≠",
    "Why don't eggs tell jokes? They'd crack each other up! ü•ö",
    "What do you call a bear with no teeth? A gummy bear! üêª",
    "Why did the math book look so sad? Because it had too many problems! üìö",
    "What's orange and sounds like a parrot? A carrot! ü•ï",
    "Why don't skeletons fight each other? They don't have the guts! üíÄ",
    "What do you call a dinosaur that crashes his car? Tyrannosaurus Wrecks! ü¶ï"
  ];

  // Ukrainian user roles
  private readonly ukrainianUserRoleTypes: { [key: string]: string[] } = {
    "–ú–µ–º –õ–æ—Ä–¥": ["–ø–æ—Å—Ç–∏—Ç—å —Å–º—ñ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–ø—ñ–¥–Ω—ñ–º–∞—î –Ω–∞—Å—Ç—Ä—ñ–π", "–º–∞–π—Å—Ç–µ—Ä –≥—É–º–æ—Ä—É"],
    "–ß–∞—Ç –ú—É–¥—Ä–µ—Ü—å": ["–¥–∞—î –º—É–¥—Ä—ñ –ø–æ—Ä–∞–¥–∏", "—Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ –¥—É–º–∫–∏", "–≥–æ–ª–æ—Å —Ä–æ–∑—É–º—É"],
    "–ï–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä": ["–ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∏—Å–æ–∫—É –µ–Ω–µ—Ä–≥—ñ—é", "–º–æ—Ç–∏–≤—É—î —ñ–Ω—à–∏—Ö", "–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –≤—ñ–±—Ä–∞—Ü—ñ—ó"],
    "–¢–∏—Ö–∏–π –ù—ñ–Ω–¥–∑—è": ["—Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î —Ç–∏—Ö–æ", "–≤–¥–∞—Ä—è—î –≤ —ñ–¥–µ–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç", "–∑–∞–≥–∞–¥–∫–æ–≤–∞ –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å"],
    "–°—Ç–∞—Ä—Ç–µ—Ä –¢–µ–º": ["—ñ–Ω—ñ—Ü—ñ—é—î –¥–∏—Å–∫—É—Å—ñ—ó", "–∑–∞–¥–∞—î –≥–∞—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "–∫–∞—Ç–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ä–æ–∑–º–æ–≤"],
    "–ï–º–æ–¥–∑—ñ –ú–∞–π—Å—Ç–µ—Ä": ["—ñ–¥–µ–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ", "–≤—ñ–∑—É–∞–ª—å–Ω–∏–π –∫–æ–º—É–Ω—ñ–∫–∞—Ç–æ—Ä", "—Å–∏–º–≤–æ–ª—å–Ω–∏–π —Å–∞–≤–∞–Ω—Ç"],
    "–û–ø–æ–≤—ñ–¥–∞—á": ["–¥—ñ–ª–∏—Ç—å—Å—è —Ü—ñ–∫–∞–≤–∏–º–∏ —ñ—Å—Ç–æ—Ä—ñ—è–º–∏", "–∑–∞—Ö–æ–ø–ª—é—é—á—ñ —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ", "—Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–∫"],
    "–¢–µ—Ö –ì—É—Ä—É": ["–∑–Ω–∞—î –≤—Å—ñ –∫—Ä—É—Ç—Ü—ñ —à—Ç—É–∫–∏", "–≤–∏—Ä—ñ—à—É—î –ø—Ä–æ–±–ª–µ–º–∏", "—Ü–∏—Ñ—Ä–æ–≤–∞ –º—É–¥—Ä—ñ—Å—Ç—å"],
    "–§—É–¥—ñ –î–æ—Å–ª—ñ–¥–Ω–∏–∫": ["–∑–∞–≤–∂–¥–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —ó–∂—É", "–∫—É–ª—ñ–Ω–∞—Ä–Ω—ñ –ø—Ä–∏–≥–æ–¥–∏", "–µ–∫—Å–ø–µ—Ä—Ç —Å–º–∞–∫—É"],
    "–ù—ñ—á–Ω–∞ –°–æ–≤–∞": ["–∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–∑–Ω–æ –≤–Ω–æ—á—ñ", "—á–µ–º–ø—ñ–æ–Ω –Ω—ñ—á–Ω–æ—ó –∑–º—ñ–Ω–∏", "–ø—Ä–∏—è—Ç–µ–ª—å –±–µ–∑—Å–æ–Ω–Ω–∏—Ö"]
  };

  private readonly userRoleTypes: { [key: string]: string[] } = {
    "Meme Lord": ["posts funny content", "lightens the mood", "master of humor"],
    "Chat Sage": ["gives wise advice", "philosophical thoughts", "voice of reason"],
    "Energy Booster": ["brings high energy", "motivates others", "positive vibes"],
    "Silent Ninja": ["observes quietly", "strikes with perfect timing", "mysterious presence"],
    "Topic Starter": ["initiates discussions", "asks great questions", "conversation catalyst"],
    "Emoji Master": ["perfect emoji usage", "visual communicator", "symbol savant"],
    "Story Teller": ["shares interesting stories", "captivating narratives", "entertainer"],
    "Tech Guru": ["knows all the cool stuff", "solves problems", "digital wisdom"],
    "Foodie Explorer": ["always talking about food", "culinary adventures", "taste expert"],
    "Late Night Owl": ["active during late hours", "night shift champion", "insomniac buddy"]
  };

  constructor(config: Partial<AtmosphereConfig> = {}) {
    this.config = {
      quietPeriodThresholdMs: 10 * 60 * 1000, // 10 minutes
      enableAutomaticEngagement: true,
      enableRoleAssignment: true,
      enablePolls: true,
      enableFunFacts: true,
      maxEngagementPerHour: 3,
      primaryLanguage: 'uk', // Default to Ukrainian
      ...config
    };

    console.log('üá∫üá¶ Ukrainian Atmosphere Enhancer initialized');
  }

  public updateChatActivity(
    chatId: string,
    userId: string,
    userName: string,
    message: string,
    sentiment: 'positive' | 'negative' | 'neutral'
  ): void {
    const now = Date.now();
    let activity = this.chatActivities.get(chatId);

    if (!activity) {
      activity = {
        chatId,
        lastMessageTime: now,
        messageCount: 0,
        activeUsers: new Set(),
        recentTopics: [],
        mood: 'neutral',
        engagementScore: 0,
        language: this.detectLanguage(message)
      };
      this.chatActivities.set(chatId, activity);
    }

    // Update activity
    activity.lastMessageTime = now;
    activity.messageCount++;
    activity.activeUsers.add(userId);
    activity.language = this.detectLanguage(message);

    // Extract topics from message
    const topics = this.extractTopics(message, activity.language);
    activity.recentTopics = [...activity.recentTopics, ...topics].slice(-10);

    // Update mood
    this.updateChatMood(activity, sentiment);

    // Update user role based on activity
    if (this.config.enableRoleAssignment) {
      this.updateUserRole(userId, userName, message, sentiment, activity.language);
    }

    // Calculate engagement score
    activity.engagementScore = this.calculateEngagementScore(activity);
  }

  private detectLanguage(text: string): 'uk' | 'en' | 'mixed' {
    const lowerText = text.toLowerCase();
    
    // Check for Ukrainian specific characters
    const ukrainianChars = /[—ñ—ó—î“ë]/g;
    const ukrainianWords = ['—â–æ', '—è–∫', '–∫–æ–ª–∏', '–¥–µ', '—á–æ–º—É', '—ñ', '–≤', '–Ω–∞', '–∑'];
    
    const hasUkrainianChars = ukrainianChars.test(lowerText);
    const ukrainianWordCount = ukrainianWords.filter(word => lowerText.includes(word)).length;
    
    if (hasUkrainianChars || ukrainianWordCount >= 1) {
      return 'uk';
    }
    
    // Check for English indicators
    const englishWords = ['the', 'and', 'you', 'are', 'that', 'this', 'with', 'have', 'for', 'not'];
    const englishWordCount = englishWords.filter(word => lowerText.includes(word)).length;
    
    if (englishWordCount >= 1) {
      return 'en';
    }
    
    // Fallback to primary language from config
    return this.config.primaryLanguage;
  }

  public async generateEngagementAction(chatId: string): Promise<EngagementAction | null> {
    const activity = this.chatActivities.get(chatId);
    if (!activity) return null;

    const now = Date.now();
    const timeSinceLastMessage = now - activity.lastMessageTime;
    const lastEngagement = this.lastEngagementTime.get(chatId) || 0;
    const timeSinceLastEngagement = now - lastEngagement;
    const hourlyCount = this.engagementCounts.get(chatId) || 0;

    // Check if we should engage
    if (!this.shouldEngage(timeSinceLastMessage, timeSinceLastEngagement, hourlyCount)) {
      return null;
    }

    // Choose engagement type based on context
    const action = this.selectEngagementAction(activity);
    
    if (action) {
      this.lastEngagementTime.set(chatId, now);
      this.engagementCounts.set(chatId, hourlyCount + 1);
    }

    return action;
  }

  private shouldEngage(
    timeSinceLastMessage: number,
    timeSinceLastEngagement: number,
    hourlyCount: number
  ): boolean {
    if (timeSinceLastMessage < this.config.quietPeriodThresholdMs) {
      return false;
    }

    if (hourlyCount >= this.config.maxEngagementPerHour) {
      return false;
    }

    if (timeSinceLastEngagement < 30 * 60 * 1000) { // 30 minutes
      return false;
    }

    return this.config.enableAutomaticEngagement;
  }

  private selectEngagementAction(activity: ChatActivity): EngagementAction | null {
    const actions: EngagementAction[] = [];
    const language = activity.language === 'mixed' ? 'uk' : activity.language;

    // Add different types of actions based on chat state
    if (activity.engagementScore < 0.3) {
      // Low engagement - need energy boost
      actions.push(
        { type: 'joke', content: this.getRandomJoke(language), priority: 8, language },
        { type: 'fact', content: this.getRandomFunFact(language), priority: 7, language },
        { 
          type: 'game', 
          content: language === 'uk' 
            ? "–•—Ç–æ—Å—å –≥–æ—Ç–æ–≤–∏–π –¥–æ —à–≤–∏–¥–∫–æ—ó –≥—Ä–∏? –í–≥–∞–¥–∞–π—Ç–µ –µ–º–æ–¥–∑—ñ: üè†üîë! –ü–µ—Ä—à–∏–π, —Ö—Ç–æ –≤–≥–∞–¥–∞—î, –æ—Ç—Ä–∏–º–∞—î –ø—Ä–∞–≤–æ —Ö–≤–∞–ª–∏—Ç–∏—Å—è! üèÜ"
            : "Anyone up for a quick game? Guess the emoji: üè†üîë! First to guess wins bragging rights! üèÜ", 
          priority: 6, 
          language 
        }
      );
    }

    if (activity.mood === 'negative') {
      // Negative mood - provide support and positivity
      actions.push(
        { 
          type: 'fact', 
          content: language === 'uk' 
            ? "–û—Å—å —â–æ—Å—å –¥–ª—è –ø—ñ–¥–Ω–µ—Å–µ–Ω–Ω—è –Ω–∞—Å—Ç—Ä–æ—é: " + this.getRandomFunFact(language)
            : "Here's something to brighten your day: " + this.getRandomFunFact(language), 
          priority: 9, 
          language 
        },
        { 
          type: 'topic_suggestion', 
          content: language === 'uk'
            ? "–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ —â–æ—Å—å –∫—Ä—É—Çe! –©–æ –Ω–∞–π–∫—Ä–∞—â–µ —Å—Ç–∞–ª–æ—Å—è –∑ –≤–∞–º–∏ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è? ‚ú®"
            : "Let's talk about something awesome! What's the best thing that happened to you this week? ‚ú®", 
          priority: 8, 
          language 
        }
      );
    }

    // Random engagement if nothing specific
    if (actions.length === 0) {
      actions.push(
        { type: 'fact', content: this.getRandomFunFact(language), priority: 5, language },
        { type: 'joke', content: this.getRandomJoke(language), priority: 5, language }
      );
    }

    // Sort by priority and return highest priority action
    actions.sort((a, b) => b.priority - a.priority);
    return actions[0] || null;
  }

  private extractTopics(message: string, language: 'uk' | 'en' | 'mixed'): string[] {
    const lowerMessage = message.toLowerCase();
    const topics: string[] = [];

    const ukrainianTopicKeywords = {
      food: ['—ó–∂–∞', '—ó–∂—É', '—ó—Å—Ç–∏', '–≥–æ–ª–æ–¥–Ω–∏–π', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–≥–æ—Ç—É–≤–∞—Ç–∏', '—Ä–µ—Ü–µ–ø—Ç', '—Å–º–∞—á–Ω–æ', '–ø—ñ—Ü–∞', '–±—É—Ä–≥–µ—Ä'],
      music: ['–º—É–∑–∏–∫–∞', '–º—É–∑–∏–∫—É', '–ø—ñ—Å–Ω—è', '—Å–ª—É—Ö–∞—Ç–∏', '–≥—É—Ä—Ç', '–∞–ª—å–±–æ–º', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Å–ø—ñ–≤–∞—Ç–∏'],
      movies: ['—Ñ—ñ–ª—å–º', '–∫—ñ–Ω–æ', '–¥–∏–≤–∏—Ç–∏—Å—è', '–∫—ñ–Ω–æ—Ç–µ–∞—Ç—Ä', '–Ω–µ—Ç—Ñ–ª—ñ–∫—Å', '—Å–µ—Ä—ñ–∞–ª', '—à–æ—É'],
      sports: ['–≥—Ä–∞', '–≥—Ä–∞—Ç–∏', '–∫–æ–º–∞–Ω–¥–∞', '–≤–∏–≥—Ä–∞—Ç–∏', '—Ä–∞—Ö—É–Ω–æ–∫', '–º–∞—Ç—á', '—Ñ—É—Ç–±–æ–ª', '–±–∞—Å–∫–µ—Ç–±–æ–ª'],
      weather: ['–ø–æ–≥–æ–¥–∞', '–¥–æ—â', '—Å–æ–Ω—è—á–Ω–æ', '—Ö–æ–ª–æ–¥–Ω–æ', '–∂–∞—Ä–∫–æ', '—Å–Ω—ñ–≥', '—Ö–º–∞—Ä–Ω–æ'],
      work: ['—Ä–æ–±–æ—Ç–∞', '–ø—Ä–∞—Ü—è', '–æ—Ñ—ñ—Å', '–±–æ—Å', '–∑—É—Å—Ç—Ä—ñ—á', '–ø—Ä–æ–µ–∫—Ç', '–¥–µ–¥–ª–∞–π–Ω'],
      travel: ['–ø–æ–¥–æ—Ä–æ–∂', '–ø–æ—ó–∑–¥–∫–∞', '–≤—ñ–¥–ø—É—Å—Ç–∫–∞', '—Ä–µ–π—Å', '–≥–æ—Ç–µ–ª—å', '–≤—ñ–¥–≤—ñ–¥–∞—Ç–∏', '–∫—Ä–∞—ó–Ω–∞']
    };

    const topicKeywords = {
      food: ['eat', 'food', 'hungry', 'restaurant', 'cook', 'recipe', 'delicious', 'pizza', 'burger'],
      music: ['music', 'song', 'listen', 'band', 'album', 'concert', 'singing'],
      movies: ['movie', 'film', 'watch', 'cinema', 'netflix', 'series', 'show'],
      sports: ['game', 'play', 'team', 'win', 'score', 'match', 'football', 'basketball'],
      weather: ['weather', 'rain', 'sunny', 'cold', 'hot', 'snow', 'cloudy'],
      work: ['work', 'job', 'office', 'boss', 'meeting', 'project', 'deadline'],
      travel: ['travel', 'trip', 'vacation', 'flight', 'hotel', 'visit', 'country']
    };

    const keywords = language === 'uk' ? ukrainianTopicKeywords : topicKeywords;

    for (const [topic, words] of Object.entries(keywords)) {
      if (words.some(word => lowerMessage.includes(word))) {
        topics.push(topic);
      }
    }

    return topics;
  }

  private updateChatMood(activity: ChatActivity, sentiment: 'positive' | 'negative' | 'neutral'): void {
    // Simple mood calculation based on recent messages
    if (sentiment === 'positive') {
      activity.mood = 'positive';
    } else if (sentiment === 'negative') {
      activity.mood = 'negative';
    } else {
      activity.mood = 'neutral';
    }
  }

  private updateUserRole(userId: string, userName: string, message: string, sentiment: 'positive' | 'negative' | 'neutral', language: 'uk' | 'en' | 'mixed'): void {
    let userRole = this.userRoles.get(userId);

    if (!userRole) {
      const role = this.assignInitialRole(message, sentiment, language);
      userRole = {
        userId,
        role: role,
        assignedAt: Date.now(),
        messageCount: 1,
        characteristics: this.getUserRoleCharacteristics(role, language)
      };
      this.userRoles.set(userId, userRole);
    } else {
      userRole.messageCount++;
    }
  }

  private getUserRoleCharacteristics(role: string, language: 'uk' | 'en' | 'mixed'): string[] {
    const roleTypes = language === 'uk' ? this.ukrainianUserRoleTypes : this.userRoleTypes;
    return roleTypes[role] || [];
  }

  private assignInitialRole(message: string, sentiment: 'positive' | 'negative' | 'neutral', language: 'uk' | 'en' | 'mixed'): string {
    const lowerMessage = message.toLowerCase();
    const roleAssignments = Object.keys(language === 'uk' ? this.ukrainianUserRoleTypes : this.userRoleTypes);

    // Simple heuristics for initial role assignment
    if (language === 'uk') {
      if (lowerMessage.includes('üòÇ') || lowerMessage.includes('–ª–æ–ª') || lowerMessage.includes('—Å–º—ñ—à–Ω–æ')) {
        return "–ú–µ–º –õ–æ—Ä–¥";
      }
      if (sentiment === 'positive' && (lowerMessage.includes('!') || lowerMessage.includes('–∫—Ä—É—Ç–æ'))) {
        return "–ï–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä";
      }
      if (lowerMessage.includes('?') && (lowerMessage.includes('–¥—É–º–∞—î—Ç–µ') || lowerMessage.includes('–ø–∏—Ç–∞–Ω–Ω—è') || lowerMessage.length > 15)) {
        return "–°—Ç–∞—Ä—Ç–µ—Ä –¢–µ–º";
      }
      if (lowerMessage.includes('—ó–∂–∞') || lowerMessage.includes('—ó–∂—É') || lowerMessage.includes('—ó—Å—Ç–∏')) {
        return "–§—É–¥—ñ –î–æ—Å–ª—ñ–¥–Ω–∏–∫";
      }
    } else {
      if (lowerMessage.includes('üòÇ') || lowerMessage.includes('lol') || lowerMessage.includes('funny')) {
        return "Meme Lord";
      }
      if (sentiment === 'positive' && (lowerMessage.includes('!') || lowerMessage.includes('awesome'))) {
        return "Energy Booster";
      }
      if (lowerMessage.includes('?') && lowerMessage.length > 20) {
        return "Topic Starter";
      }
      if (lowerMessage.includes('food') || lowerMessage.includes('eat')) {
        return "Foodie Explorer";
      }
    }

    // Random assignment if no clear indicators
    return roleAssignments[Math.floor(Math.random() * roleAssignments.length)];
  }

  private calculateEngagementScore(activity: ChatActivity): number {
    const now = Date.now();
    const hourAgo = now - (60 * 60 * 1000);
    
    let score = 0;
    
    // Active users contribution (0-0.4)
    score += Math.min(activity.activeUsers.size * 0.1, 0.4);
    
    // Recent activity contribution (0-0.3)
    if (activity.lastMessageTime > hourAgo) {
      score += 0.3;
    }
    
    // Mood contribution (0-0.3)
    if (activity.mood === 'positive') {
      score += 0.3;
    } else if (activity.mood === 'neutral') {
      score += 0.15;
    }

    return Math.min(score, 1.0);
  }

  private getRandomJoke(language: 'uk' | 'en'): string {
    const jokes = language === 'uk' ? this.ukrainianJokes : this.jokes;
    return jokes[Math.floor(Math.random() * jokes.length)];
  }

  private getRandomFunFact(language: 'uk' | 'en'): string {
    const facts = language === 'uk' ? this.ukrainianFunFacts : this.funFacts;
    return facts[Math.floor(Math.random() * facts.length)];
  }

  // Periodic cleanup can be handled externally if needed

  // Public methods
  public getChatStats(chatId: string): ChatActivity | null {
    return this.chatActivities.get(chatId) || null;
  }

  public getUserRole(userId: string): UserRole | null {
    return this.userRoles.get(userId) || null;
  }

  public getAllUserRoles(): UserRole[] {
    return Array.from(this.userRoles.values());
  }

  public updateConfig(newConfig: Partial<AtmosphereConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  public getConfig(): AtmosphereConfig {
    return { ...this.config };
  }

  public dispose(): void {
    // Simple cleanup without cron
    this.chatActivities.clear();
    this.userRoles.clear();
    this.lastEngagementTime.clear();
    this.engagementCounts.clear();
  }
} 