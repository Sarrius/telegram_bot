export interface ContentAnalysis {
  isInappropriate: boolean;
  severity: 'low' | 'medium' | 'high';
  categories: string[];
  confidence: number;
  suggestedResponse: string;
  shouldApplyPenalty: boolean;
  language: 'uk' | 'en';
}

export interface ContentConfiguration {
  sensitivityLevel: 'low' | 'medium' | 'high';
  customForbiddenWords: string[];
  enableSarcasm: boolean;
  enablePenalties: boolean;
  adminUserIds: string[];
  primaryLanguage: 'uk' | 'en';
}

export class InappropriateContentDetector {
  private config: ContentConfiguration;
  
  // Ukrainian inappropriate words
  private readonly ukrainianForbiddenWords: { [key: string]: string[] } = {
    offensive: [
      '–¥—É—Ä–µ–Ω—å', '—ñ–¥—ñ–æ—Ç', '–¥–µ–±—ñ–ª', '—Ç—É–ø–∏–π', '–Ω–µ–Ω–∞–≤–∏–¥–∂—É', '–ø–æ–º—Ä–∏', '–∑–¥–æ—Ö–Ω–∏',
      '–∂–∞–ª—é–≥—ñ–¥–Ω–∏–π', '–Ω–µ–≤–¥–∞—Ö–∞', '–Ω—ñ–∫—á–µ–º–Ω–∏–π', '—Å–º—ñ—Ç—Ç—è', '–ª–∞–π–Ω–æ'
    ],
    toxic: [
      '—Ç–æ–∫—Å–∏–∫', '—Ä–∞–∫', '–π–¥–∏ –ø–æ–º—Ä–∏', '–∑–¥–æ—Ö–Ω–∏', '–ø–æ–≤—ñ—Å—å—Å—è',
      '–¥–∞—Ä–µ–º–Ω–∞ —Ç—Ä–∞—Ç–∞ –º—ñ—Å—Ü—è', '–±–µ–∑ –º–æ–∑–≥—ñ–≤', '–¥–µ–±—ñ–ª'
    ],
    discriminatory: [
      '—Ä–∞—Å–∏—Å—Ç', '—Å–µ–∫—Å–∏—Å—Ç', '–≥–æ–º–æ—Ñ–æ–±', '–¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—è'
    ],
    spam: [
      '–Ω–∞—Ç–∏—Å–Ω–∏ —Ç—É—Ç', '–∫—É–ø–∏ –∑–∞—Ä–∞–∑', '–æ–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å', '–¥—ñ—è—Ç–∏ —à–≤–∏–¥–∫–æ',
      '–≤—ñ—Ç–∞—î–º–æ –∑ –≤–∏–≥—Ä–∞—à–µ–º', '–æ—Ç—Ä–∏–º–∞–π –ø—Ä–∏–∑', '–∑–∞—Ä–æ–±–ª—è–π –≥—Ä–æ—à—ñ'
    ]
  };

  private readonly defaultForbiddenWords: { [key: string]: string[] } = {
    offensive: [
      'stupid', 'idiot', 'moron', 'dumb', 'hate', 'kill', 'die',
      'pathetic', 'loser', 'worthless', 'garbage', 'trash'
    ],
    toxic: [
      'toxic', 'cancer', 'kys', 'go die', 'neck yourself',
      'waste of space', 'braindead', 'retard'
    ],
    discriminatory: [
      'racist', 'sexist', 'homophobic', 'transphobic'
    ],
    spam: [
      'click here', 'buy now', 'limited time', 'act fast',
      'congratulations you won', 'claim your prize'
    ]
  };

  // Ukrainian sarcastic responses
  private readonly ukrainianSarcasticResponses: { [key: string]: string[] } = {
    offensive: [
      "–ì–µ–π {username}, —Ç–∏ –∑–∞–ø–æ–∑–∏—á–∏–≤ —Ü—é –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∑ —Ñ—ñ–ª—å–º—É –ø—Ä–æ –≥–∞–Ω–≥—Å—Ç–µ—Ä—ñ–≤ 90-—Ö? üòé –î–∞–≤–∞–π —Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–æ–∫—ñ–π!",
      "–û–≥–æ {username}, —Ü–µ —Ç—Ä–æ—Ö–∏ –∑–∞–Ω–∞–¥—Ç–æ –≥–æ—Å—Ç—Ä–æ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É! üå∂Ô∏è –ó–±–∞–≤ —Ç–æ–Ω, —á–µ–º–ø—ñ–æ–Ω–µ.",
      "–ô–æ {username}, –∑–¥–∞—î—Ç—å—Å—è —Ç–≤–æ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–ª–∞–º–∞–ª–∞—Å—å! üò§ –°–ø—Ä–æ–±—É–π —è–∫—ñ—Å—å –ø—Ä–∏—î–º–Ω—ñ—à—ñ —Å–ª–æ–≤–∞!",
      "{username}, —Ç–≤—ñ–π –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ç –æ–¥–µ—Ä–∂–∏–º–∏–π —Ç—Ä–æ–ª–µ–º? üëπ –î–∞–≤–∞–π –±—É–¥–µ–º–æ –¥—Ä—É–∂–Ω—ñ–º–∏!"
    ],
    toxic: [
      "–ô–æ–π {username}, —Ü—è –µ–Ω–µ—Ä–≥—ñ—è –º–æ–∂–µ –∂–∏–≤–∏—Ç–∏ —Ü—ñ–ª–µ –º—ñ—Å—Ç–æ! ‚ö° –ú–æ–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—à —ó—ó –ø–æ–∑–∏—Ç–∏–≤–Ω–æ?",
      "–ì–µ–π {username}, —Å—å–æ–≥–æ–¥–Ω—ñ –≤—Ç—ñ–ª—é—î—à —Å–≤–æ–≥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –ª–∏—Ö–æ–¥—ñ—è? ü¶π‚Äç‚ôÇÔ∏è –Ø–∫ —â–æ–¥–æ –≥–µ—Ä–æ—ó—á–Ω–∏—Ö –≤—ñ–±—Ä–∞—Ü—ñ–π?",
      "–í–∞—É {username}, —Ü–µ —Ç–µ–º–Ω—ñ—à–µ –Ω—ñ–∂ –º—ñ–π –µ–∫—Ä–∞–Ω –æ 3 —Ä–∞–Ω–∫—É! üåô –ü—Ä–æ—Å–≤—ñ—Ç–ª–∏ —Ç—Ä–æ—Ö–∏!",
      "{username}, –∑–±–µ—Ä–µ–∂–∏ —Ü–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –±–∏—Ç–≤–∏ –∑ –±–æ—Å–æ–º —É –≤—ñ–¥–µ–æ–≥—Ä—ñ! üéÆ –¢—É—Ç —Å–ø–æ–∫—ñ–π–Ω–∞ –∑–æ–Ω–∞!"
    ],
    discriminatory: [
      "–°—Ç–æ–ø {username}, —Ü–µ–π —á–∞—Ç - –∑–æ–Ω–∞ —Ä—ñ–≤–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –¥–ª—è –≤–µ—Å–µ–ª–æ—â—ñ–≤! ü§ù –ó–∞–ª–∏—à–∞–π—Å—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–∏–º!",
      "–ì–µ–π {username}, —Ç—É—Ç –≤—Å–µ –ø—Ä–æ —Ö–æ—Ä–æ—à—ñ –≤—ñ–±—Ä–∞—Ü—ñ—ó! üåà –Ø–∫ —â–æ–¥–æ –ø–æ—à–∏—Ä–∏—Ç–∏ —Ç—Ä–æ—Ö–∏ –ª—é–±–æ–≤—ñ?",
      "–ù—ñ {username}, —Ü–µ –Ω–µ –ª–µ—Ç–∏—Ç—å —É –Ω–∞—à–æ–º—É —Ä–∞–π–æ–Ω—ñ! ‚úàÔ∏è –¢—É—Ç —É—Å—ñ –≤—ñ—Ç–∞—é—Ç—å—Å—è!",
      "{username}, —Ü–µ–π —á–∞—Ç —è–∫ –®–≤–µ–π—Ü–∞—Ä—ñ—è - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π —ñ –º–∏—Ä–Ω–∏–π! üèîÔ∏è –ó–∞–ª–∏—à–∞–π—Å—è –ø–æ–≤–∞–∂–ª–∏–≤–∏–º!"
    ],
    spam: [
      "–ì–∞—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ {username}, –∞–ª–µ —Ü–µ –Ω–µ —Ä–∏–Ω–æ–∫! üõí –ó–∞–ª–∏—à —Ç–æ—Ä–≥–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–µ—ñ–Ω–¥–µ!",
      "–ì–µ–π {username}, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Ç –¥–ª—è —Ü—ñ—î—ó –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó! üíº –¢—É—Ç —Å–æ—Ü—ñ–∞–ª—å–Ω–∞ –∑–æ–Ω–∞!",
      "–ô–æ {username}, —Ç–≤—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è! üí∞ –ê–ª–µ –¥–∞–≤–∞–π –∑–∞–ª–∏—à–∏–º–æ –≤—Å–µ –Ω–µ–≤–∏–º—É—à–µ–Ω–æ!",
      "{username}, —Ü–µ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∏–π –∫–∞–Ω–∞–ª! üì∫ –ó–∞–ª–∏—à —Ä–µ–∫–ª–∞–º—É –¥–ª—è —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è!"
    ]
  };

  private readonly sarcasticResponses: { [key: string]: string[] } = {
    offensive: [
      "Hey {username}, did you borrow that attitude from a 90s gangster movie? üòé Let's keep it chill!",
      "Whoa {username}, that's a bit too spicy for this chat! üå∂Ô∏è Tone it down, champ.",
      "Yo {username}, your keyboard seems to be malfunctioning! üò§ Try some nicer words!",
      "{username}, did your autocorrect get possessed by a troll? üëπ Let's keep it friendly!"
    ],
    toxic: [
      "Yikes {username}, that energy could power a city! ‚ö° Maybe redirect it positively?",
      "Hey {username}, channeling your inner villain today? ü¶π‚Äç‚ôÇÔ∏è How about some hero vibes instead?",
      "Wow {username}, that's darker than my screen at 3 AM! üåô Lighten up a bit!",
      "{username}, save that attitude for a video game boss fight! üéÆ This is a chill zone!"
    ],
    discriminatory: [
      "Hold up {username}, this chat is an equal opportunity fun zone! ü§ù Let's keep it inclusive!",
      "Hey {username}, we're all about good vibes here! üåà How about we spread some love instead?",
      "Nope {username}, that doesn't fly in this neighborhood! ‚úàÔ∏è Everyone's welcome here!",
      "{username}, this chat is Switzerland - neutral and peaceful! üèîÔ∏è Keep it respectful!"
    ],
    spam: [
      "Nice try {username}, but this isn't a marketplace! üõí Save the sales pitch for elsewhere!",
      "Hey {username}, wrong chat for that business proposal! üíº This is a social zone!",
      "Yo {username}, your inner entrepreneur is showing! üí∞ But let's keep it casual here!",
      "{username}, this isn't a shopping channel! üì∫ Keep the commercials for TV time!"
    ]
  };

  // Ukrainian penalty tasks
  private readonly ukrainianPenaltyTasks: string[] = [
    "–ù–∞–ø–∏—à–∏ 3 —Ö–æ—Ä–æ—à—ñ —Ä–µ—á—ñ –ø—Ä–æ —Ü–µ–π —á–∞—Ç, —â–æ–± –∫–æ–º–ø–µ–Ω—Å—É–≤–∞—Ç–∏ —Ç–æ–π –∫–æ–º–µ–Ω—Ç–∞—Ä! üò§",
    "–ü–æ–¥—ñ–ª–∏—Å—å —Ü—ñ–∫–∞–≤–∏–º —Ñ–∞–∫—Ç–æ–º, —â–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏—Å—å! üß†",
    "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–≤—ñ–π —É–ª—é–±–ª–µ–Ω–∏–π –µ–º–æ–¥–∑—ñ —ñ —á–æ–º—É! üòä",
    "–ó—Ä–æ–±–∏ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–Ω—ñ–º 3 –ª—é–¥—è–º, —è–∫—ñ –ø–∏—Å–∞–ª–∏ –¥–æ —Ç–µ–±–µ! üíù",
    "–ü–æ–¥—ñ–ª–∏—Å—å –º–∏–ª–∏–º –º–µ–º–æ–º, —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—ñ–±—Ä–∞—Ü—ñ—ó —á–∞—Ç—É! üßº",
    "–ù–∞–ø–∏—à–∏ —Ö–∞–π–∫—É –ø—Ä–æ –¥—Ä—É–∂–±—É! üå∏",
    "–†–æ–∑–∫–∞–∂–∏, –∑–∞ —â–æ —Ç–∏ –≤–¥—è—á–Ω–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ! üôè"
  ];

  private readonly penaltyTasks: string[] = [
    "Write 3 nice things about this chat to make up for that comment! üò§",
    "Share a fun fact to redeem yourself! üß†",
    "Tell us your favorite emoji and why! üòä",
    "Compliment the last 3 people who posted before you! üíù",
    "Share a wholesome meme to cleanse the chat vibes! üßº",
    "Write a haiku about friendship! üå∏",
    "Tell us what you're grateful for today! üôè"
  ];

  private userWarnings: Map<string, number> = new Map();
  private readonly maxWarnings = 3;

  constructor(config: Partial<ContentConfiguration> = {}) {
    this.config = {
      sensitivityLevel: 'medium',
      customForbiddenWords: [],
      enableSarcasm: true,
      enablePenalties: true,
      adminUserIds: [],
      primaryLanguage: 'uk', // Default to Ukrainian
      ...config
    };
  }

  async analyzeContent(message: string, userId: string, userName: string): Promise<ContentAnalysis> {
    const lowerMessage = message.toLowerCase();
    const categories: string[] = [];
    let severity: 'low' | 'medium' | 'high' = 'low';
    let confidence = 0;

    // Detect language
    const language = this.detectLanguage(message);
    
    // Choose appropriate word lists
    const forbiddenWords = language === 'uk' ? this.ukrainianForbiddenWords : this.defaultForbiddenWords;

    // Check against different categories
    for (const [category, words] of Object.entries(forbiddenWords)) {
      const categoryScore = this.checkCategory(lowerMessage, words);
      if (categoryScore > 0) {
        categories.push(category);
        confidence = Math.max(confidence, categoryScore);
        
        if (category === 'toxic' || category === 'discriminatory') {
          severity = 'high';
        } else if (category === 'offensive' && this.config.sensitivityLevel !== 'low') {
          severity = 'medium';
        }
      }
    }

    // Check custom forbidden words
    if (this.config.customForbiddenWords.length > 0) {
      const customScore = this.checkCategory(lowerMessage, this.config.customForbiddenWords);
      if (customScore > 0) {
        categories.push('custom');
        confidence = Math.max(confidence, customScore);
        severity = this.config.sensitivityLevel;
      }
    }

    // Advanced pattern detection
    const patternScore = this.detectPatterns(message);
    if (patternScore > 0) {
      categories.push('pattern');
      confidence = Math.max(confidence, patternScore);
    }

    confidence = this.adjustConfidenceForSensitivity(confidence);
    const isInappropriate = confidence > 0.3 && categories.length > 0;
    
    let suggestedResponse = '';
    let shouldApplyPenalty = false;

    if (isInappropriate) {
      suggestedResponse = this.generateResponse(categories, userName, severity, language);
      shouldApplyPenalty = this.shouldApplyPenalty(userId, severity);
    }

    return {
      isInappropriate,
      severity,
      categories,
      confidence,
      suggestedResponse,
      shouldApplyPenalty,
      language
    };
  }

  private detectLanguage(text: string): 'uk' | 'en' {
    const lowerText = text.toLowerCase();
    
    // Check for Ukrainian specific characters
    const ukrainianChars = /[—ñ—ó—î“ë]/g;
    const ukrainianWords = ['—â–æ', '—è–∫', '–∫–æ–ª–∏', '–¥–µ', '—á–æ–º—É', '—ñ', '–≤', '–Ω–∞', '–∑'];
    
    const hasUkrainianChars = ukrainianChars.test(lowerText);
    const ukrainianWordCount = ukrainianWords.filter(word => lowerText.includes(word)).length;
    
    if (hasUkrainianChars || ukrainianWordCount >= 1) {
      return 'uk';
    }
    
    return this.config.primaryLanguage;
  }

  private checkCategory(message: string, words: string[]): number {
    let score = 0;
    let matches = 0;

    for (const word of words) {
      if (message.includes(word)) {
        matches++;
        score += 0.2;
      }
    }

    // Boost score for multiple matches
    if (matches > 1) {
      score *= 1.5;
    }

    return Math.min(score, 1.0);
  }

  private detectPatterns(message: string): number {
    let score = 0;

    // ALL CAPS DETECTION
    if (message.length > 10 && message === message.toUpperCase()) {
      score += 0.3;
    }

    // Excessive punctuation
    const punctuationCount = (message.match(/[!?]{2,}/g) || []).length;
    if (punctuationCount > 0) {
      score += punctuationCount * 0.1;
    }

    // Repeated characters
    const repeatedChars = (message.match(/(.)\1{3,}/g) || []).length;
    if (repeatedChars > 0) {
      score += repeatedChars * 0.15;
    }

    // Suspicious URLs
    if (message.match(/bit\.ly|tinyurl|click here|telegram\.me/gi)) {
      score += 0.4;
    }

    return Math.min(score, 1.0);
  }

  private adjustConfidenceForSensitivity(confidence: number): number {
    switch (this.config.sensitivityLevel) {
      case 'low':
        return confidence * 0.7;
      case 'high':
        return Math.min(confidence * 1.3, 1.0);
      default:
        return confidence;
    }
  }

  private generateResponse(categories: string[], userName: string, severity: 'low' | 'medium' | 'high', language: 'uk' | 'en'): string {
    if (!this.config.enableSarcasm) {
      return language === 'uk' 
        ? `–ì–µ–π ${userName}, –¥–∞–≤–∞–π —Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º! üòä`
        : `Hey ${userName}, let's keep the chat positive! üòä`;
    }

    // Choose response pool based on language and category
    const responsePool = language === 'uk' 
      ? this.ukrainianSarcasticResponses 
      : this.sarcasticResponses;
    
    const primaryCategory = categories[0];
    const responses = responsePool[primaryCategory] || responsePool.offensive;
    
    let response = responses[Math.floor(Math.random() * responses.length)];
    response = response.replace('{username}', userName);

    // Add penalty task for higher severity
    if (severity === 'high' && this.config.enablePenalties) {
      const tasks = language === 'uk' ? this.ukrainianPenaltyTasks : this.penaltyTasks;
      const task = tasks[Math.floor(Math.random() * tasks.length)];
      response += ` ${task}`;
    }

    return response;
  }

  private shouldApplyPenalty(userId: string, severity: 'low' | 'medium' | 'high'): boolean {
    if (!this.config.enablePenalties) return false;

    const currentWarnings = this.userWarnings.get(userId) || 0;
    
    if (severity === 'high' || currentWarnings >= 2) {
      this.userWarnings.set(userId, currentWarnings + 1);
      return true;
    }

    this.userWarnings.set(userId, currentWarnings + 1);
    return false;
  }

  // Public methods for configuration
  public updateConfiguration(newConfig: Partial<ContentConfiguration>): void {
    this.config = { ...this.config, ...newConfig };
  }

  public addCustomForbiddenWords(words: string[]): void {
    this.config.customForbiddenWords = [...this.config.customForbiddenWords, ...words];
  }

  public removeCustomForbiddenWords(words: string[]): void {
    this.config.customForbiddenWords = this.config.customForbiddenWords.filter(
      word => !words.includes(word)
    );
  }

  public getUserWarnings(userId: string): number {
    return this.userWarnings.get(userId) || 0;
  }

  public resetUserWarnings(userId: string): void {
    this.userWarnings.delete(userId);
  }

  public isAdmin(userId: string): boolean {
    return this.config.adminUserIds.includes(userId);
  }

  public getConfiguration(): ContentConfiguration {
    return { ...this.config };
  }

  public getStats(): {
    totalWarnings: number;
    usersWithWarnings: number;
    configuredSensitivity: string;
    primaryLanguage: string;
  } {
    return {
      totalWarnings: Array.from(this.userWarnings.values()).reduce((sum, count) => sum + count, 0),
      usersWithWarnings: this.userWarnings.size,
      configuredSensitivity: this.config.sensitivityLevel,
      primaryLanguage: this.config.primaryLanguage
    };
  }
} 