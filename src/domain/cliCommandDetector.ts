export interface CLICommandMatch {
  isCommand: boolean;
  command: string;
  args: string[];
  confidence: number;
  language: 'uk' | 'en';
  trigger: string;
}

export class CLICommandDetector {
  private readonly helpPatterns = [
    // –¢—ñ–ª—å–∫–∏ —Ç–æ—á–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏
    { pattern: /^help$/i, language: 'en' as const },
    { pattern: /^\/help$/i, language: 'en' as const },
    { pattern: /^cli\s+help$/i, language: 'en' as const },
    { pattern: /^\/cli\s+help$/i, language: 'en' as const },
    
    // –ó –±–æ—Ç–æ–º - —Ç—ñ–ª—å–∫–∏ –∑ —è–≤–Ω–∏–º CLI
    { pattern: /@bot\s+cli\s+help$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+cli\s+help$/i, language: 'en' as const },
    { pattern: /@bot\s+\/cli\s+help$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+\/cli\s+help$/i, language: 'en' as const }
  ];

  private readonly statusPatterns = [
    // –¢—ñ–ª—å–∫–∏ —Ç–æ—á–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏
    { pattern: /^status$/i, language: 'en' as const },
    { pattern: /^\/status$/i, language: 'en' as const },
    { pattern: /^cli\s+status$/i, language: 'en' as const },
    { pattern: /^\/cli\s+status$/i, language: 'en' as const },
    
    // –ó –±–æ—Ç–æ–º - —Ç—ñ–ª—å–∫–∏ –∑ —è–≤–Ω–∏–º CLI
    { pattern: /@bot\s+cli\s+status$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+cli\s+status$/i, language: 'en' as const },
    { pattern: /@bot\s+\/cli\s+status$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+\/cli\s+status$/i, language: 'en' as const }
  ];

  private readonly featurePatterns = [
    // –¢—ñ–ª—å–∫–∏ —Ç–æ—á–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏
    { pattern: /^features$/i, language: 'en' as const },
    { pattern: /^\/features$/i, language: 'en' as const },
    { pattern: /^cli\s+features$/i, language: 'en' as const },
    { pattern: /^\/cli\s+features$/i, language: 'en' as const },
    
    // –ó –±–æ—Ç–æ–º - —Ç—ñ–ª—å–∫–∏ –∑ —è–≤–Ω–∏–º CLI
    { pattern: /@bot\s+cli\s+features$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+cli\s+features$/i, language: 'en' as const },
    { pattern: /@bot\s+\/cli\s+features$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+\/cli\s+features$/i, language: 'en' as const }
  ];

  private readonly cliModePatterns = [
    // –í—Ö—ñ–¥ –≤ CLI —Ä–µ–∂–∏–º
    { pattern: /^\/cli$/i, language: 'en' as const },
    { pattern: /^cli$/i, language: 'en' as const },
    { pattern: /^cli\s+mode$/i, language: 'en' as const },
    { pattern: /@bot\s+\/cli$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+\/cli$/i, language: 'en' as const },
    { pattern: /@bot\s+cli$/i, language: 'en' as const },
    { pattern: /@\w+_bot\s+cli$/i, language: 'en' as const }
  ];

  // === –í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ===
  private readonly currencyPatterns = [
    { pattern: /^currency(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^exchange(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/currency(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/exchange(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+currency(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+exchange(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–∫—É—Ä—Å(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^–≤–∞–ª—é—Ç–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+currency(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–∫—É—Ä—Å(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@\w+_bot\s+cli\s+currency(\s+(.+))?$/i, language: 'en' as const }
  ];

  // === –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–¥–∞ ===
  private readonly newsPatterns = [
    { pattern: /^news(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/news(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+news(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–Ω–æ–≤–∏–Ω–∏(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–Ω–æ–≤–∏–Ω–∏(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+news(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–Ω–æ–≤–∏–Ω–∏(\s+(.+))?$/i, language: 'uk' as const }
  ];

  private readonly weatherPatterns = [
    { pattern: /^weather(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/weather(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+weather(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–ø–æ–≥–æ–¥–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–ø–æ–≥–æ–¥–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+weather(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–ø–æ–≥–æ–¥–∞(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –ü–æ—à—É–∫ –∑–Ω–∞–Ω—å ===
  private readonly searchPatterns = [
    { pattern: /^search(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^find(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/search(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/find(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+search(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+find(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–∑–Ω–∞–π—Ç–∏(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^–ø–æ—à—É–∫(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–∑–Ω–∞–π—Ç–∏(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–ø–æ—à—É–∫(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+search(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–ø–æ—à—É–∫(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –ú–µ–º–∏ ===
  private readonly memePatterns = [
    { pattern: /^meme(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/meme(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+meme(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–º–µ–º(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–º–µ–º(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+meme(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–º–µ–º(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
  private readonly statsPatterns = [
    { pattern: /^stats(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^statistics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/stats(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/statistics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+stats(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+statistics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+stats(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –ü–∞–º'—è—Ç—å ===
  private readonly memoryPatterns = [
    { pattern: /^memory(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/memory(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+memory(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–ø–∞–º'—è—Ç—å(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–ø–∞–º'—è—Ç—å(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+memory(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–ø–∞–º'—è—Ç—å(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===
  private readonly testPatterns = [
    { pattern: /^test(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/test(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+test(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^—Ç–µ—Å—Ç(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/—Ç–µ—Å—Ç(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+test(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+—Ç–µ—Å—Ç(\s+(.+))?$/i, language: 'uk' as const }
  ];

  // === –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===
  private readonly diagnosticPatterns = [
    { pattern: /^diagnostic(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^diagnostics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/diagnostic(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^\/diagnostics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+diagnostic(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^cli\s+diagnostics(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /^–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /^\/–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const },
    { pattern: /@bot\s+cli\s+diagnostic(\s+(.+))?$/i, language: 'en' as const },
    { pattern: /@bot\s+cli\s+–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞(\s+(.+))?$/i, language: 'uk' as const }
  ];

  constructor() {
    console.log('üéõÔ∏è Enhanced CLI Command Detector initialized with full command support');
  }

  public detectCommand(text: string): CLICommandMatch {
    const trimmedText = text.trim();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ help –∫–æ–º–∞–Ω–¥–∏
    for (const { pattern, language } of this.helpPatterns) {
      if (pattern.test(trimmedText)) {
        return {
          isCommand: true,
          command: 'help',
          args: [],
          confidence: 0.95,
          language,
          trigger: pattern.source
        };
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ status –∫–æ–º–∞–Ω–¥–∏
    for (const { pattern, language } of this.statusPatterns) {
      if (pattern.test(trimmedText)) {
        return {
          isCommand: true,
          command: 'status',
          args: [],
          confidence: 0.90,
          language,
          trigger: pattern.source
        };
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ features –∫–æ–º–∞–Ω–¥–∏
    for (const { pattern, language } of this.featurePatterns) {
      if (pattern.test(trimmedText)) {
        return {
          isCommand: true,
          command: 'features',
          args: [],
          confidence: 0.85,
          language,
          trigger: pattern.source
        };
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ CLI —Ä–µ–∂–∏–º
    for (const { pattern, language } of this.cliModePatterns) {
      if (pattern.test(trimmedText)) {
        return {
          isCommand: true,
          command: 'cli',
          args: [],
          confidence: 0.90,
          language,
          trigger: pattern.source
        };
      }
    }

    // === –ù–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ ===

    // –í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    const currencyMatch = this.detectPatternMatch(trimmedText, this.currencyPatterns, 'currency');
    if (currencyMatch.isCommand) return currencyMatch;

    // –ù–æ–≤–∏–Ω–∏
    const newsMatch = this.detectPatternMatch(trimmedText, this.newsPatterns, 'news');
    if (newsMatch.isCommand) return newsMatch;

    // –ü–æ–≥–æ–¥–∞
    const weatherMatch = this.detectPatternMatch(trimmedText, this.weatherPatterns, 'weather');
    if (weatherMatch.isCommand) return weatherMatch;

    // –ü–æ—à—É–∫ –∑–Ω–∞–Ω—å
    const searchMatch = this.detectPatternMatch(trimmedText, this.searchPatterns, 'search');
    if (searchMatch.isCommand) return searchMatch;

    // –ú–µ–º–∏
    const memeMatch = this.detectPatternMatch(trimmedText, this.memePatterns, 'meme');
    if (memeMatch.isCommand) return memeMatch;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const statsMatch = this.detectPatternMatch(trimmedText, this.statsPatterns, 'stats');
    if (statsMatch.isCommand) return statsMatch;

    // –ü–∞–º'—è—Ç—å
    const memoryMatch = this.detectPatternMatch(trimmedText, this.memoryPatterns, 'memory');
    if (memoryMatch.isCommand) return memoryMatch;

    // –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    const testMatch = this.detectPatternMatch(trimmedText, this.testPatterns, 'test');
    if (testMatch.isCommand) return testMatch;

    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    const diagnosticMatch = this.detectPatternMatch(trimmedText, this.diagnosticPatterns, 'diagnostic');
    if (diagnosticMatch.isCommand) return diagnosticMatch;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ enable/disable –∫–æ–º–∞–Ω–¥–∏
    const featureControlMatch = this.detectFeatureControl(trimmedText);
    if (featureControlMatch.isCommand) {
      return featureControlMatch;
    }

    return {
      isCommand: false,
      command: '',
      args: [],
      confidence: 0,
      language: 'uk',
      trigger: ''
    };
  }

  private detectPatternMatch(
    text: string, 
    patterns: Array<{ pattern: RegExp; language: 'uk' | 'en' }>, 
    commandName: string
  ): CLICommandMatch {
    for (const { pattern, language } of patterns) {
      const match = text.match(pattern);
      if (match) {
        // –í–∏—Ç—è–≥—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∑ –≥—Ä—É–ø–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
        const argsString = match[2] || match[1] || '';
        const args = argsString.trim() ? argsString.trim().split(/\s+/) : [];
        
        return {
          isCommand: true,
          command: commandName,
          args,
          confidence: 0.85,
          language,
          trigger: pattern.source
        };
      }
    }

    return {
      isCommand: false,
      command: '',
      args: [],
      confidence: 0,
      language: 'uk',
      trigger: ''
    };
  }

  private detectFeatureControl(text: string): CLICommandMatch {
    const patterns = [
      // –ü—Ä—è–º—ñ CLI –∫–æ–º–∞–Ω–¥–∏
      { pattern: /^enable\s+(\w+)$/i, command: 'enable', language: 'en' as const },
      { pattern: /^disable\s+(\w+)$/i, command: 'disable', language: 'en' as const },
      { pattern: /^toggle\s+(\w+)$/i, command: 'toggle', language: 'en' as const },
      
      // –ó —Å–ª–µ—à –∫–æ–º–∞–Ω–¥–∞–º–∏
      { pattern: /^\/enable\s+(\w+)$/i, command: 'enable', language: 'en' as const },
      { pattern: /^\/disable\s+(\w+)$/i, command: 'disable', language: 'en' as const },
      { pattern: /^\/toggle\s+(\w+)$/i, command: 'toggle', language: 'en' as const },
      
      // –ó CLI –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
      { pattern: /^cli\s+enable\s+(\w+)$/i, command: 'enable', language: 'en' as const },
      { pattern: /^cli\s+disable\s+(\w+)$/i, command: 'disable', language: 'en' as const },
      { pattern: /^cli\s+toggle\s+(\w+)$/i, command: 'toggle', language: 'en' as const },
      
      // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
      { pattern: /^—É–≤—ñ–º–∫–Ω–∏\s+(\w+)$/i, command: 'enable', language: 'uk' as const },
      { pattern: /^–≤–∏–º–∫–Ω–∏\s+(\w+)$/i, command: 'disable', language: 'uk' as const },
      { pattern: /^–ø–µ—Ä–µ–º–∫–Ω–∏\s+(\w+)$/i, command: 'toggle', language: 'uk' as const },
      
      // –ó –±–æ—Ç–æ–º - —Ç—ñ–ª—å–∫–∏ –∑ —è–≤–Ω–∏–º CLI
      { pattern: /@bot\s+cli\s+enable\s+(\w+)$/i, command: 'enable', language: 'en' as const },
      { pattern: /@bot\s+cli\s+disable\s+(\w+)$/i, command: 'disable', language: 'en' as const },
      { pattern: /@bot\s+cli\s+toggle\s+(\w+)$/i, command: 'toggle', language: 'en' as const },
      
      { pattern: /@\w+_bot\s+cli\s+enable\s+(\w+)$/i, command: 'enable', language: 'en' as const },
      { pattern: /@\w+_bot\s+cli\s+disable\s+(\w+)$/i, command: 'disable', language: 'en' as const },
      { pattern: /@\w+_bot\s+cli\s+toggle\s+(\w+)$/i, command: 'toggle', language: 'en' as const }
    ];

    for (const { pattern, command, language } of patterns) {
      const match = text.match(pattern);
      if (match && match[1]) {
        return {
          isCommand: true,
          command,
          args: [match[1]],
          confidence: 0.85,
          language,
          trigger: pattern.source
        };
      }
    }

    return {
      isCommand: false,
      command: '',
      args: [],
      confidence: 0,
      language: 'uk',
      trigger: ''
    };
  }

  private detectLanguage(text: string): 'uk' | 'en' {
    const ukrainianIndicators = [
      '–∫–æ–º–∞–Ω–¥–∏', '–¥–æ–ø–æ–º–æ–≥–∞', '–¥–æ–≤—ñ–¥–∫–∞', '—Å—Ç–∞—Ç—É—Å', '—Ñ—É–Ω–∫—Ü—ñ—ó',
      '—É–≤—ñ–º–∫–Ω–∏', '–≤–∏–º–∫–Ω–∏', '–ø–µ—Ä–µ–º–∫–Ω–∏', '–ø–æ–∫–∞–∑–∞—Ç–∏', '—Å–ø–∏—Å–æ–∫',
      '–±–æ—Ç', '—è–∫—ñ', '—â–æ', '–≤–∞–ª—é—Ç–∞', '–∫—É—Ä—Å', '–Ω–æ–≤–∏–Ω–∏', '–ø–æ–≥–æ–¥–∞',
      '–ø–æ—à—É–∫', '–∑–Ω–∞–π—Ç–∏', '–º–µ–º', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ø–∞–º\'—è—Ç—å', '—Ç–µ—Å—Ç', '–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
    ];

    const lowerText = text.toLowerCase();
    const hasUkrainian = ukrainianIndicators.some(word => lowerText.includes(word));
    
    return hasUkrainian ? 'uk' : 'en';
  }

  public getStats() {
    return {
      helpPatterns: this.helpPatterns.length,
      statusPatterns: this.statusPatterns.length,
      featurePatterns: this.featurePatterns.length,
      currencyPatterns: this.currencyPatterns.length,
      newsPatterns: this.newsPatterns.length,
      weatherPatterns: this.weatherPatterns.length,
      searchPatterns: this.searchPatterns.length,
      memePatterns: this.memePatterns.length,
      statsPatterns: this.statsPatterns.length,
      memoryPatterns: this.memoryPatterns.length,
      testPatterns: this.testPatterns.length,
      diagnosticPatterns: this.diagnosticPatterns.length,
      supportedCommands: [
        'help', 'status', 'features', 'enable', 'disable', 'toggle',
        'currency', 'exchange', 'news', 'weather', 'search', 'find',
        'meme', 'stats', 'statistics', 'memory', 'test', 'diagnostic',
        // Ukrainian commands
        '–∫—É—Ä—Å', '–≤–∞–ª—é—Ç–∞', '–Ω–æ–≤–∏–Ω–∏', '–ø–æ–≥–æ–¥–∞', '–∑–Ω–∞–π—Ç–∏', '–ø–æ—à—É–∫',
        '–º–µ–º', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ø–∞–º\'—è—Ç—å', '—Ç–µ—Å—Ç', '–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
        '—É–≤—ñ–º–∫–Ω–∏', '–≤–∏–º–∫–Ω–∏', '–ø–µ—Ä–µ–º–∫–Ω–∏'
      ],
      languages: ['uk', 'en'],
      triggerTypes: ['direct', 'slash', 'mention', 'natural'],
      totalPatterns: this.helpPatterns.length + this.statusPatterns.length + 
                    this.featurePatterns.length + this.currencyPatterns.length +
                    this.newsPatterns.length + this.weatherPatterns.length +
                    this.searchPatterns.length + this.memePatterns.length +
                    this.statsPatterns.length + this.memoryPatterns.length +
                    this.testPatterns.length + this.diagnosticPatterns.length
    };
  }
} 