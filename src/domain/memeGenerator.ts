import axios from 'axios';

export interface MemeRequest {
  templateId?: string;
  topText: string;
  bottomText?: string;
  style?: 'classic' | 'modern' | 'ukrainian';
  language?: 'uk' | 'en';
}

export interface MemeResult {
  success: boolean;
  text?: string;
  imageUrl?: string;
  errorMessage?: string;
  attribution?: string;
  language: 'uk' | 'en';
}

export class MemeGenerator {
  // Ukrainian text-based meme templates
  private readonly ukrainianTextMemes: { [key: string]: string[] } = {
    programming: [
      "–ö–æ–ª–∏ —Ç–≤—ñ–π –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É:\n{text}",
      "–Ø –ø–æ—è—Å–Ω—é—é —Å–≤—ñ–π –∫–æ–¥ –≥—É–º–æ–≤—ñ–π –∫–∞—á–µ—á—Ü—ñ:\n{text}",
      "–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª–∞–≥–æ–¥–∏—Ç–∏ —ó—Ö –∫–æ–º–ø'—é—Ç–µ—Ä:\n{text}",
    ],
    life: [
      "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ —Ç–∞–∫–∏–π:\n{text}",
      "–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –∫–∞–∂–µ '–ø—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–æ–±–æ—é':\n{text}",
      "–Ø –Ω–∞–º–∞–≥–∞—é—Å—è –±—É—Ç–∏ –¥–æ—Ä–æ—Å–ª–∏–º:\n{text}",
    ],
    food: [
      "–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –ø–∏—Ç–∞—î —â–æ –Ω–∞ –≤–µ—á–µ—Ä—é:\n{text}",
      "–Ø –±–∞—á—É –ø—ñ—Ü—É:\n{text}",
      "–ù–∞–º–∞–≥–∞—é—Å—è —Ö–∞—Ä—á—É–≤–∞—Ç–∏—Å—è –∑–¥–æ—Ä–æ–≤–æ:\n{text}",
    ],
    work: [
      "–ö–æ–ª–∏ –Ω–∞—Ä–µ—à—Ç—ñ –ø'—è—Ç–Ω–∏—Ü—è:\n{text}",
      "–Ø –Ω–∞ –Ω–∞—Ä–∞–¥–∞—Ö:\n{text}",
      "–ö–æ–ª–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞:\n{text}",
    ],
    general: [
      "–í—Å—ñ: {text}\n–Ø: –ù—É, –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ...",
      "–ù—ñ—Ö—Ç–æ:\n–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω—ñ—Ö—Ç–æ:\n–Ø: {text}",
      "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–µ–≤–¥–∞–ª–æ:\n{text}",
    ],
    ukrainian: [
      "–ö–æ–ª–∏ –≥–æ—Ç—É—î—à –±–æ—Ä—â:\n{text}",
      "–ë–∞—á–∏—à —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ø—Ä–∞–ø–æ—Ä:\n{text} üá∫üá¶",
      "–ü–æ—è—Å–Ω—é—î—à —ñ–Ω–æ–∑–µ–º—Ü—è–º –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É:\n{text}",
      "–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –ø–ª—É—Ç–∞—î –£–∫—Ä–∞—ó–Ω—É –∑ –†–æ—Å—ñ—î—é:\n{text}",
    ]
  };

  private readonly textMemeTemplates: { [key: string]: string[] } = {
    programming: [
      "When your code works on the first try:\n{text}",
      "Me explaining my code to rubber duck:\n{text}",
      "When someone asks me to fix their computer:\n{text}",
    ],
    life: [
      "Monday morning be like:\n{text}",
      "When someone says 'just be yourself':\n{text}",
      "Me trying to adult:\n{text}",
    ],
    food: [
      "When someone asks what's for dinner:\n{text}",
      "Me seeing pizza:\n{text}",
      "Trying to eat healthy:\n{text}",
    ],
    work: [
      "When Friday finally arrives:\n{text}",
      "Me in meetings:\n{text}",
      "When the deadline is tomorrow:\n{text}",
    ],
    general: [
      "Everyone: {text}\nMe: Well, actually...",
      "Nobody:\nAbsolutely nobody:\nMe: {text}",
      "Task failed successfully:\n{text}",
    ]
  };

  // Ukrainian meme suggestions
  private readonly ukrainianMemeSuggestions: { [key: string]: MemeRequest } = {
    '–∫–æ–¥': { topText: "–ö–æ–ª–∏ –∫–æ–¥ –ø—Ä–∞—Ü—é—î", bottomText: "–ê–ª–µ —Ç–∏ –Ω–µ –∑–Ω–∞—î—à —á–æ–º—É", language: 'uk' },
    '–∫–∞–≤–∞': { topText: "–Ø –¥–æ –∫–∞–≤–∏", bottomText: "–Ø –ø—ñ—Å–ª—è –∫–∞–≤–∏", language: 'uk' },
    '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫': { topText: "–ü'—è—Ç–Ω–∏—Ü—è –≤–µ—á–æ—Ä–æ–º", bottomText: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ —Ä–∞–Ω–∫–æ–º", language: 'uk' },
    '—Ä–æ–±–æ—Ç–∞': { topText: "–ú–æ—è —Ä–æ–±–æ—Ç–∞", bottomText: "–¢–∞–∫–æ–∂ –º–æ—è —Ä–æ–±–æ—Ç–∞ –æ 3 –Ω–æ—á—ñ", language: 'uk' },
    '—ó–∂–∞': { topText: "–ö–æ–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —ó–∂–∞", bottomText: "–ú–∏—Ä –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–≤ –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º", language: 'uk' },
    '—É–∫—Ä–∞—ó–Ω–∞': { topText: "–ü–æ–∫–∞–∑—É—é –ø—Ä–∞–ø–æ—Ä –£–∫—Ä–∞—ó–Ω–∏", bottomText: "–í—Å—ñ–º –Ω–∞–≤–∫–æ–ª–æ", language: 'uk' }
  };

  private readonly memeSuggestions: { [key: string]: MemeRequest } = {
    'code': { topText: "When code works", bottomText: "But you don't know why", language: 'en' },
    'coffee': { topText: "Me before coffee", bottomText: "Me after coffee", language: 'en' },
    'monday': { topText: "Friday evening", bottomText: "Monday morning", language: 'en' },
    'work': { topText: "My code", bottomText: "Also my code at 3am", language: 'en' },
    'food': { topText: "When food arrives", bottomText: "Peace was never an option", language: 'en' }
  };

  constructor() {
    console.log('üé≠ Ukrainian Meme Generator initialized');
  }

  public async generateMeme(request: MemeRequest): Promise<MemeResult> {
    try {
      const language = request.language || 'uk';
      
      // Try Imgflip API for image memes if available
      const imgflipResult = await this.tryImgflipGeneration(request);
      if (imgflipResult.success) {
        return { ...imgflipResult, language };
      }

      // Fallback to text-based memes
      return await this.generateTextMeme('general', request.topText, language);
    } catch (error) {
      console.error('Error generating meme:', error);
      return {
        success: false,
        errorMessage: 'Failed to generate meme',
        language: request.language || 'uk'
      };
    }
  }

  public async generateTextMeme(topic: string, text: string, language: 'uk' | 'en' = 'uk'): Promise<MemeResult> {
    try {
      const templates = language === 'uk' 
        ? (this.ukrainianTextMemes[topic] || this.ukrainianTextMemes.general)
        : (this.textMemeTemplates[topic] || this.textMemeTemplates.general);
      
      const template = templates[Math.floor(Math.random() * templates.length)];
      const memeText = template.replace('{text}', text);

      return {
        success: true,
        text: memeText,
        attribution: language === 'uk' ? '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –º–µ–º-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º' : 'Generated with Ukrainian meme engine',
        language
      };
    } catch (error) {
      console.error('Error generating text meme:', error);
      return {
        success: false,
        errorMessage: 'Failed to generate text meme',
        language
      };
    }
  }

  public suggestMemeForMessage(message: string, language: 'uk' | 'en' = 'uk'): MemeRequest | null {
    const lowerMessage = message.toLowerCase();
    
    const suggestions = language === 'uk' ? this.ukrainianMemeSuggestions : this.memeSuggestions;
    
    // Check for Ukrainian-specific keywords first
    if (language === 'uk') {
      // Enhanced Ukrainian keyword matching with flexible patterns
      if (lowerMessage.includes('—Ä–æ–±–æ—Ç') || lowerMessage.includes('—Ä–æ–±–æ—Ç—ñ')) {
        return this.ukrainianMemeSuggestions['—Ä–æ–±–æ—Ç–∞'];
      }
      if (lowerMessage.includes('—ó–∂') || lowerMessage.includes('—Ö–æ—á—É —ó–∂—É')) {
        return this.ukrainianMemeSuggestions['—ó–∂–∞'];
      }
      if (lowerMessage.includes('—É–∫—Ä–∞—ó–Ω') || lowerMessage.includes('—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ')) {
        return this.ukrainianMemeSuggestions['—É–∫—Ä–∞—ó–Ω–∞'];
      }
      if (lowerMessage.includes('–∫–∞–≤')) {
        return this.ukrainianMemeSuggestions['–∫–∞–≤–∞'];
      }
      if (lowerMessage.includes('–ø–æ–Ω–µ–¥—ñ–ª')) {
        return this.ukrainianMemeSuggestions['–ø–æ–Ω–µ–¥—ñ–ª–æ–∫'];
      }
      
      // Exact keyword matches as fallback
      for (const [keyword, meme] of Object.entries(suggestions)) {
        if (lowerMessage.includes(keyword)) {
          return meme;
        }
      }
      
      // Ukrainian-specific patterns
      if (lowerMessage.includes('–±–æ—Ä—â') || lowerMessage.includes('–≤–∞—Ä–µ–Ω–∏–∫–∏')) {
        return { topText: "–ö–æ–ª–∏ –≥–æ—Ç—É—î—à —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —ó–∂—É", bottomText: "–î—É—à–∞ —Å–ø—ñ–≤–∞—î", language: 'uk' };
      }
      if (lowerMessage.includes('—É–∫—Ä–∞—ó–Ω–∞') || lowerMessage.includes('üá∫üá¶')) {
        return { topText: "–°–µ—Ä—Ü–µ —Ä–∞–¥—ñ—î", bottomText: "–ö–æ–ª–∏ –∑–≥–∞–¥—É—é—Ç—å –£–∫—Ä–∞—ó–Ω—É", language: 'uk' };
      }
    } else {
      for (const [keyword, meme] of Object.entries(suggestions)) {
        if (lowerMessage.includes(keyword)) {
          return meme;
        }
      }
    }
    
    // General patterns for both languages
    if (lowerMessage.includes('confused') || lowerMessage.includes('–ø–ª—É—Ç–∞–Ω–∏–π')) {
      return {
        topText: language === 'uk' ? "–ù–∞–º–∞–≥–∞—é—Å—è –∑—Ä–æ–∑—É–º—ñ—Ç–∏" : "Me trying to understand",
        bottomText: message.substring(0, 30) + (message.length > 30 ? '...' : ''),
        language
      };
    }

    return null;
  }

  private async tryImgflipGeneration(request: MemeRequest): Promise<MemeResult> {
    // Try to use Imgflip API if credentials are available
    const username = process.env.IMGFLIP_USERNAME;
    const password = process.env.IMGFLIP_PASSWORD;
    
    if (!username || !password) {
      return { success: false, language: request.language || 'uk' };
    }

    try {
      const response = await axios.post('https://api.imgflip.com/caption_image', {
        template_id: request.templateId || '181913649', // Drake meme
        username,
        password,
        text0: request.topText,
        text1: request.bottomText || '',
      }, { timeout: 5000 });

      if (response.data.success) {
        return {
          success: true,
          imageUrl: response.data.data.url,
          attribution: 'Created with Imgflip API',
          language: request.language || 'uk'
        };
      }
    } catch (error) {
      console.log('Imgflip API not available, using text memes');
    }

    return { success: false, language: request.language || 'uk' };
  }

  // Ukrainian trending memes
  public async generateUkrainianTrendingMeme(topic: string): Promise<MemeResult> {
    const ukrainianTrendingTemplates = {
      'cat': { top: '–ö–æ–ª–∏ —Ö—Ç–æ—Å—å –∑–≥–∞–¥—É—î –∫–æ—Ç—ñ–≤', bottom: '–Ø –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π' },
      'coffee': { top: '–Ø –¥–æ –∫–∞–≤–∏', bottom: '–Ø –ø—ñ—Å–ª—è –∫–∞–≤–∏' },
      'weekend': { top: "–ü'—è—Ç–Ω–∏—Ü—è –≤–µ—á–æ—Ä–æ–º", bottom: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ —Ä–∞–Ω–∫–æ–º' },
      'coding': { top: '–ú—ñ–π –∫–æ–¥', bottom: '–¢–∞–∫–æ–∂ –º—ñ–π –∫–æ–¥ –æ 3 —Ä–∞–Ω–∫—É' },
      'food': { top: '–ö–æ–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —ó–∂–∞', bottom: '–ú–∏—Ä –Ω–µ –≤–∞—Ä—ñ–∞–Ω—Ç' },
      'ukraine': { top: '–ö–æ–ª–∏ –±–∞—á—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å–∏–º–≤–æ–ª—ñ–∫—É', bottom: '–ì–æ—Ä–¥—ñ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–≤–Ω—é—î' }
    };

    const template = ukrainianTrendingTemplates[topic as keyof typeof ukrainianTrendingTemplates] || 
                    { top: `–ö–æ–ª–∏ –∑–≥–∞–¥—É—î—Ç—å—Å—è ${topic}`, bottom: '–í—Å—ñ–º —Ü–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è' };

    return await this.generateMeme({
      topText: template.top,
      bottomText: template.bottom,
      language: 'uk'
    });
  }

  // Quick meme generation with Ukrainian support
  public async generateQuickMeme(text: string, language: 'uk' | 'en' = 'uk'): Promise<MemeResult> {
    const shortText = text.length > 50 ? text.substring(0, 47) + '...' : text;
    
    const memeText = language === 'uk' 
      ? `–í—Å—ñ: ${shortText}\n–Ø: –ù—É, –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ... –º–µ–º –º–æ–º–µ–Ω—Ç`
      : `Everyone: ${shortText}\nMe: Well, actually... meme moment`;
    
    return {
      success: true,
      text: memeText,
      attribution: language === 'uk' ? '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –º–µ–º-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º' : 'Generated with Ukrainian meme engine',
      language
    };
  }

  // Get meme statistics
  public getStats(): {
    availableUkrainianTemplates: number;
    availableEnglishTemplates: number;
    totalSuggestions: number;
  } {
    return {
      availableUkrainianTemplates: Object.keys(this.ukrainianTextMemes).length,
      availableEnglishTemplates: Object.keys(this.textMemeTemplates).length,
      totalSuggestions: Object.keys(this.ukrainianMemeSuggestions).length + Object.keys(this.memeSuggestions).length
    };
  }

  // Language detection for memes
  private detectLanguage(text: string): 'uk' | 'en' {
    const ukrainianChars = /[—ñ—ó—î“ë]/g;
    const ukrainianWords = ['—â–æ', '—è–∫', '–∫–æ–ª–∏', '–¥–µ', '—á–æ–º—É'];
    
    const hasUkrainianChars = ukrainianChars.test(text.toLowerCase());
    const ukrainianWordCount = ukrainianWords.filter(word => text.toLowerCase().includes(word)).length;
    
    return (hasUkrainianChars || ukrainianWordCount >= 1) ? 'uk' : 'en';
  }

  // Public method to get available templates by language
  public getAvailableTemplates(language: 'uk' | 'en' = 'uk'): string[] {
    return Object.keys(language === 'uk' ? this.ukrainianTextMemes : this.textMemeTemplates);
  }
} 