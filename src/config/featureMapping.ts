// Mapper –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –Ω–∞–∑–≤ —Ñ—É–Ω–∫—Ü—ñ–π –º—ñ–∂ appConfig —Ç–∞ FeatureManager

export interface FeatureMapping {
  appConfigName: string;
  featureManagerName: string;
  description: string;
  emoji: string;
}

export const FEATURE_MAPPINGS: FeatureMapping[] = [
  {
    appConfigName: 'nlpConversations',
    featureManagerName: 'nlp',
    description: 'NLP —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É',
    emoji: 'üí¨'
  },
  {
    appConfigName: 'contentModeration',
    featureManagerName: 'moderation',
    description: '–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏',
    emoji: 'üõ°Ô∏è'
  },
  {
    appConfigName: 'atmosphereEnhancement',
    featureManagerName: 'atmosphere',
    description: '–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ —É —á–∞—Ç–∞—Ö',
    emoji: 'üåü'
  },
  {
    appConfigName: 'memeGeneration',
    featureManagerName: 'memes',
    description: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–µ–º—ñ–≤',
    emoji: 'üé≠'
  },
  {
    appConfigName: 'sentimentReactions',
    featureManagerName: 'powerWords',
    description: '–†–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ —Å–ª–æ–≤–∞ —Ç–∞ –µ–º–æ—Ü—ñ—ó',
    emoji: '‚ö°'
  },
  {
    appConfigName: 'userMemory',
    featureManagerName: 'memory',
    description: '–°–∏—Å—Ç–µ–º–∞ –ø–∞–º\'—è—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
    emoji: 'üß†'
  },
  {
    appConfigName: 'profanityFilter',
    featureManagerName: 'profanityFilter',
    description: '–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—ó –ª–µ–∫—Å–∏–∫–∏',
    emoji: 'üö´'
  },
  {
    appConfigName: 'newsWeatherMonitoring',
    featureManagerName: 'news',
    description: '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏–Ω',
    emoji: 'üì∞'
  },
  {
    appConfigName: 'learningSystem',
    featureManagerName: 'weather',
    description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–≥–æ–¥—É',
    emoji: 'üå§Ô∏è'
  }
];

// –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –≤ FeatureManager
export const FEATURE_MANAGER_ONLY: FeatureMapping[] = [
  {
    appConfigName: '',
    featureManagerName: 'knowledgeSearch',
    description: '–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è',
    emoji: 'üîç'
  }
];

export class FeatureMapper {
  private appToFeatureMap: Map<string, string> = new Map();
  private featureToAppMap: Map<string, string> = new Map();
  private allFeatures: Map<string, FeatureMapping> = new Map();

  constructor() {
    this.initializeMappings();
  }

  private initializeMappings(): void {
    // –û—Å–Ω–æ–≤–Ω—ñ –º–∞–ø—ñ–Ω–≥–∏
    FEATURE_MAPPINGS.forEach(mapping => {
      this.appToFeatureMap.set(mapping.appConfigName, mapping.featureManagerName);
      this.featureToAppMap.set(mapping.featureManagerName, mapping.appConfigName);
      this.allFeatures.set(mapping.featureManagerName, mapping);
    });

    // –§—É–Ω–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –≤ FeatureManager
    FEATURE_MANAGER_ONLY.forEach(mapping => {
      this.allFeatures.set(mapping.featureManagerName, mapping);
    });
  }

  public mapAppConfigToFeatureManager(appConfigName: string): string | null {
    return this.appToFeatureMap.get(appConfigName) || null;
  }

  public mapFeatureManagerToAppConfig(featureManagerName: string): string | null {
    return this.featureToAppMap.get(featureManagerName) || null;
  }

  public getAllFeatureManagerNames(): string[] {
    return Array.from(this.allFeatures.keys());
  }

  public getFeatureInfo(featureManagerName: string): FeatureMapping | null {
    return this.allFeatures.get(featureManagerName) || null;
  }

  public findFeatureByAlias(input: string): string | null {
    const lowerInput = input.toLowerCase();
    
    // –ü—Ä—è–º–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ feature manager –Ω–∞–∑–≤–æ—é
    if (this.allFeatures.has(lowerInput)) {
      return lowerInput;
    }

    // –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ appConfig –Ω–∞–∑–≤–æ—é
    const mapped = this.mapAppConfigToFeatureManager(lowerInput);
    if (mapped) {
      return mapped;
    }

    // –ß–∞—Å—Ç–∫–æ–≤–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∞–±–æ –∞–ª—ñ–∞—Å–∏
    const aliases: Record<string, string[]> = {
      'nlp': ['conversations', 'chat', '—Ä–æ–∑–º–æ–≤–∏'],
      'moderation': ['–º–æ–¥–µ—Ä–∞—Ü—ñ—è', 'contentmoderation', 'content'],
      'atmosphere': ['–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞', 'atmosphereenhancement'],
      'memes': ['–º–µ–º–∏', 'memegeneration'],
      'powerWords': ['powerwords', 'sentiment', 'sentimentreactions', '—Ä–µ–∞–∫—Ü—ñ—ó'],
      'memory': ['–ø–∞–º\'—è—Ç—å', 'usermemory'],
      'profanityFilter': ['profanity', '–Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∞', '—Ñ—ñ–ª—å—Ç—Ä'],
      'news': ['–Ω–æ–≤–∏–Ω–∏', 'newsweathermonitoring'],
      'weather': ['–ø–æ–≥–æ–¥–∞', 'learningsystem'],
      'knowledgeSearch': ['knowledge', 'search', '–ø–æ—à—É–∫', '–∑–Ω–∞–Ω–Ω—è']
    };

    for (const [feature, aliasArray] of Object.entries(aliases)) {
      if (aliasArray.some(alias => alias.toLowerCase() === lowerInput)) {
        return feature;
      }
    }

    // Fuzzy matching
    for (const feature of this.getAllFeatureManagerNames()) {
      if (feature.toLowerCase().includes(lowerInput) || lowerInput.includes(feature.toLowerCase())) {
        return feature;
      }
    }

    return null;
  }

  public getFormattedFeaturesList(): string {
    let result = 'üéõÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**\n\n';
    
    this.allFeatures.forEach((mapping, featureName) => {
      const appConfigName = mapping.appConfigName || '—Ç—ñ–ª—å–∫–∏ –≤ FeatureManager';
      result += `${mapping.emoji} **${featureName}** (${appConfigName})\n`;
      result += `   ${mapping.description}\n\n`;
    });

    result += 'üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É (nlp), —Ç–∞–∫ —ñ –ø–æ–≤–Ω—É (nlpConversations)\n';
    
    return result;
  }

  public getStats() {
    return {
      totalMappings: FEATURE_MAPPINGS.length,
      featureManagerOnly: FEATURE_MANAGER_ONLY.length,
      totalFeatures: this.allFeatures.size,
      mappedFeatures: this.appToFeatureMap.size,
      availableAliases: this.getAllFeatureManagerNames()
    };
  }
}

// Singleton instance
export const featureMapper = new FeatureMapper(); 