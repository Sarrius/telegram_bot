import { CLICommandDetector, CLICommandMatch } from '../domain/cliCommandDetector';
import { FeatureManager } from '../config/featureManager';
import { featureMapper } from '../config/featureMapping';
import { CurrencyHandler, CurrencyResponse } from './currencyHandler';
import { NewsWeatherHandler } from './newsWeatherHandler';
import { KnowledgeSearchHandler } from './knowledgeSearchHandler';
import { MemeGenerator } from '../domain/memeGenerator';
import { UserMemory } from '../domain/userMemory';

export interface CLICommandResponse {
  shouldRespond: boolean;
  responseType: 'cli_help' | 'cli_status' | 'cli_features' | 'cli_control' | 'cli_currency' | 'cli_news' | 'cli_weather' | 'cli_knowledge' | 'cli_meme' | 'cli_stats' | 'cli_memory' | 'cli_test' | 'cli_diagnostic' | 'ignore';
  response: string;
  confidence: number;
  reasoning: string;
  command?: string;
  args?: string[];
  data?: any; // –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
}

export class CLICommandHandler {
  private detector: CLICommandDetector;
  private featureManager: FeatureManager;
  private currencyHandler: CurrencyHandler;
  private newsWeatherHandler: NewsWeatherHandler | null = null;
  private knowledgeHandler: KnowledgeSearchHandler;
  private memeGenerator: MemeGenerator;
  private userMemory: UserMemory;

  constructor(newsWeatherHandler?: NewsWeatherHandler) {
    this.detector = new CLICommandDetector();
    this.featureManager = FeatureManager.getInstance();
    this.currencyHandler = new CurrencyHandler();
    this.newsWeatherHandler = newsWeatherHandler || null;
    this.knowledgeHandler = new KnowledgeSearchHandler();
    this.memeGenerator = new MemeGenerator();
    this.userMemory = new UserMemory();
    console.log('üéõÔ∏è Enhanced CLI Command Handler initialized with full feature support');
  }

  public async handleMessage(
    text: string,
    chatType: string,
    userId: string,
    chatId: string
  ): Promise<CLICommandResponse> {
    try {
      const match = this.detector.detectCommand(text);

      if (!match.isCommand) {
        return {
          shouldRespond: false,
          responseType: 'ignore',
          response: '',
          confidence: 0,
          reasoning: 'Not a CLI command'
        };
      }

      console.log(`üéõÔ∏è CLI command detected: ${match.command} (${match.confidence})`);

      switch (match.command) {
        case 'help':
          return this.handleHelpCommand(match);
        case 'status':
          return this.handleStatusCommand(match);
        case 'features':
          return this.handleFeaturesCommand(match);
        case 'cli':
          return this.handleCliModeCommand(match);
        case 'enable':
        case 'disable':
        case 'toggle':
          return this.handleFeatureControl(match);
        
        // === –í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ===
        case 'currency':
        case 'exchange':
        case '–∫—É—Ä—Å':
        case '–≤–∞–ª—é—Ç–∞':
          return await this.handleCurrencyCommand(match, chatId);
        
        // === –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–¥–∞ ===
        case 'news':
        case '–Ω–æ–≤–∏–Ω–∏':
          return await this.handleNewsCommand(match, chatId);
        case 'weather':
        case '–ø–æ–≥–æ–¥–∞':
          return await this.handleWeatherCommand(match, chatId);
        
        // === –ü–æ—à—É–∫ –∑–Ω–∞–Ω—å ===
        case 'search':
        case 'find':
        case '–∑–Ω–∞–π—Ç–∏':
        case '–ø–æ—à—É–∫':
          return await this.handleKnowledgeSearchCommand(match, chatId, userId);
        
        // === –ú–µ–º–∏ ===
        case 'meme':
        case '–º–µ–º':
          return await this.handleMemeCommand(match, userId);
        
        // === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        case 'stats':
        case 'statistics':
        case '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
          return this.handleStatsCommand(match, chatId, userId);
        
        // === –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é ===
        case 'memory':
        case '–ø–∞–º\'—è—Ç—å':
          return this.handleMemoryCommand(match, userId);
        
        // === –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===
        case 'test':
        case '—Ç–µ—Å—Ç':
          return this.handleTestCommand(match);
        
        // === –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===
        case 'diagnostic':
        case '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞':
          return this.handleDiagnosticCommand(match, chatId, userId);
        
        default:
          return {
            shouldRespond: false,
            responseType: 'ignore',
            response: '',
            confidence: 0,
            reasoning: `Unknown CLI command: ${match.command}`
          };
      }
    } catch (error) {
      console.error('‚ùå CLI command handler error:', error);
      return {
        shouldRespond: true,
        responseType: 'cli_diagnostic',
        response: `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ CLI –∫–æ–º–∞–Ω–¥–∏: ${error}`,
        confidence: 1.0,
        reasoning: `Error processing CLI command: ${error}`
      };
    }
  }

  private handleHelpCommand(match: CLICommandMatch): CLICommandResponse {
    const response = this.generateHelpResponse(match.language);
    
    return {
      shouldRespond: true,
      responseType: 'cli_help',
      response,
      confidence: match.confidence,
      reasoning: `CLI help command in ${match.language}`,
      command: match.command,
      args: match.args
    };
  }

  private handleStatusCommand(match: CLICommandMatch): CLICommandResponse {
    const response = this.generateStatusResponse(match.language);
    
    return {
      shouldRespond: true,
      responseType: 'cli_status',
      response,
      confidence: match.confidence,
      reasoning: `CLI status command in ${match.language}`,
      command: match.command,
      args: match.args
    };
  }

  private handleFeaturesCommand(match: CLICommandMatch): CLICommandResponse {
    const response = this.generateFeaturesResponse(match.language);
    
    return {
      shouldRespond: true,
      responseType: 'cli_features',
      response,
      confidence: match.confidence,
      reasoning: `CLI features command in ${match.language}`,
      command: match.command,
      args: match.args
    };
  }

  private handleCliModeCommand(match: CLICommandMatch): CLICommandResponse {
    const response = this.generateCliModeResponse(match.language);
    
    return {
      shouldRespond: true,
      responseType: 'cli_help',
      response,
      confidence: match.confidence,
      reasoning: `CLI mode entry command in ${match.language}`,
      command: match.command,
      args: match.args
    };
  }

  private handleFeatureControl(match: CLICommandMatch): CLICommandResponse {
    if (!match.args || match.args.length === 0) {
      const errorMsg = match.language === 'uk' 
        ? '‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "—É–≤—ñ–º–∫–Ω–∏ powerWords" –∞–±–æ "—É–≤—ñ–º–∫–Ω–∏ nlpConversations"'
        : '‚ùå Feature name required. Example: "enable powerWords" or "enable nlpConversations"';
      
      return {
        shouldRespond: true,
        responseType: 'cli_control',
        response: errorMsg,
        confidence: match.confidence,
        reasoning: 'Missing feature name',
        command: match.command,
        args: match.args
      };
    }

    const inputFeature = match.args[0];
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ mapper
    const mappedFeature = featureMapper.findFeatureByAlias(inputFeature);
    
    if (!mappedFeature) {
      const availableFeatures = featureMapper.getAllFeatureManagerNames().join(', ');
      const errorMsg = match.language === 'uk' 
        ? `‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è: "${inputFeature}"\n\nüéõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n${availableFeatures}\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ: features - –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É`
        : `‚ùå Unknown feature: "${inputFeature}"\n\nüéõÔ∏è Available features:\n${availableFeatures}\n\nüí° Try: features - for detailed list`;
      
      return {
        shouldRespond: true,
        responseType: 'cli_control',
        response: errorMsg,
        confidence: match.confidence,
        reasoning: `Unknown feature: ${inputFeature}`,
        command: match.command,
        args: match.args
      };
    }

    let result: string;

    switch (match.command) {
      case 'enable':
        result = this.featureManager.enableFeature(mappedFeature as any);
        break;
      case 'disable':
        result = this.featureManager.disableFeature(mappedFeature as any);
        break;
      case 'toggle':
        result = this.featureManager.toggleFeature(mappedFeature as any);
        break;
      default:
        result = match.language === 'uk' 
          ? '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞'
          : '‚ùå Unknown command';
    }

    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–ø—ñ–Ω–≥
    const featureInfo = featureMapper.getFeatureInfo(mappedFeature);
    if (featureInfo && inputFeature !== mappedFeature) {
      result += `\nüí° "${inputFeature}" ‚Üí "${mappedFeature}" (${featureInfo.description})`;
    }

    return {
      shouldRespond: true,
      responseType: 'cli_control',
      response: result,
      confidence: match.confidence,
      reasoning: `Feature control: ${match.command} ${inputFeature} ‚Üí ${mappedFeature}`,
      command: match.command,
      args: [mappedFeature] // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ mapped –Ω–∞–∑–≤—É
    };
  }

  private generateHelpResponse(language: 'uk' | 'en'): string {
    const features = this.featureManager.getAllFeatures();
    const featureEntries = Object.entries(features);

    if (language === 'uk') {
      let response = 'üéõÔ∏è **–†–æ–∑—à–∏—Ä–µ–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏:**\n\n';
      
      // –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
      response += 'üìã **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n';
      response += '‚Ä¢ `help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n';
      response += '‚Ä¢ `status` - —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π\n';
      response += '‚Ä¢ `features` - —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π\n';
      response += '‚Ä¢ `enable [—Ñ—É–Ω–∫—Ü—ñ—è]` - —É–≤—ñ–º–∫–Ω—É—Ç–∏\n';
      response += '‚Ä¢ `disable [—Ñ—É–Ω–∫—Ü—ñ—è]` - –≤–∏–º–∫–Ω—É—Ç–∏\n';
      response += '‚Ä¢ `toggle [—Ñ—É–Ω–∫—Ü—ñ—è]` - –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏\n\n';

      // –í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
      response += 'üí± **–í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n';
      response += '‚Ä¢ `currency rate [–≤–∞–ª—é—Ç–∞]` - –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏\n';
      response += '‚Ä¢ `currency convert [—Å—É–º–∞] [–∑] [–≤]` - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è\n';
      response += '‚Ä¢ `currency list` - —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\n';
      response += '‚Ä¢ `currency popular` - –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏\n\n';

      // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
      response += 'üì∞ **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**\n';
      response += '‚Ä¢ `news [–ª–æ–∫–∞—Ü—ñ—è]` - –Ω–æ–≤–∏–Ω–∏\n';
      response += '‚Ä¢ `weather [–º—ñ—Å—Ç–æ]` - –ø–æ–≥–æ–¥–∞\n';
      response += '‚Ä¢ `search [–∑–∞–ø–∏—Ç]` - –ø–æ—à—É–∫ –∑–Ω–∞–Ω—å\n\n';

      // –†–æ–∑–≤–∞–≥–∏
      response += 'üé≠ **–†–æ–∑–≤–∞–≥–∏:**\n';
      response += '‚Ä¢ `meme generate [—Ç–µ–∫—Å—Ç]` - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–º\n';
      response += '‚Ä¢ `meme templates` - —à–∞–±–ª–æ–Ω–∏ –º–µ–º—ñ–≤\n\n';

      // –°–∏—Å—Ç–µ–º–∞
      response += 'üîß **–°–∏—Å—Ç–µ–º–∞:**\n';
      response += '‚Ä¢ `stats [—Ç–∏–ø]` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n';
      response += '‚Ä¢ `memory [–∫–æ–º–∞–Ω–¥–∞]` - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º\'—è—Ç—Ç—é\n';
      response += '‚Ä¢ `test [–º–æ–¥—É–ª—å]` - —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è\n';
      response += '‚Ä¢ `diagnostic` - –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n';

      // –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π
      response += '‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π:**\n';
      featureEntries.forEach(([name, enabled]) => {
        const emoji = enabled ? '‚úÖ' : 'üî¥';
        response += `‚Ä¢ ${emoji} \`${name}\`\n`;
      });

      response += '\nüì± **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:** `cli [–∫–æ–º–∞–Ω–¥–∞]` –∞–±–æ `@bot [–∫–æ–º–∞–Ω–¥–∞]`';

      return response;
    } else {
      let response = 'üéõÔ∏è **Enhanced CLI Commands:**\n\n';
      
      // Basic commands
      response += 'üìã **Basic Commands:**\n';
      response += '‚Ä¢ `help` - this help\n';
      response += '‚Ä¢ `status` - features status\n';
      response += '‚Ä¢ `features` - list features\n';
      response += '‚Ä¢ `enable [feature]` - enable\n';
      response += '‚Ä¢ `disable [feature]` - disable\n';
      response += '‚Ä¢ `toggle [feature]` - toggle\n\n';

      // Currency commands
      response += 'üí± **Currency Commands:**\n';
      response += '‚Ä¢ `currency rate [currency]` - get rate\n';
      response += '‚Ä¢ `currency convert [amount] [from] [to]` - convert\n';
      response += '‚Ä¢ `currency list` - list currencies\n';
      response += '‚Ä¢ `currency popular` - popular rates\n\n';

      // Information commands
      response += 'üì∞ **Information:**\n';
      response += '‚Ä¢ `news [location]` - news\n';
      response += '‚Ä¢ `weather [city]` - weather\n';
      response += '‚Ä¢ `search [query]` - knowledge search\n\n';

      // Entertainment
      response += 'üé≠ **Entertainment:**\n';
      response += '‚Ä¢ `meme generate [text]` - create meme\n';
      response += '‚Ä¢ `meme templates` - meme templates\n\n';

      // System
      response += 'üîß **System:**\n';
      response += '‚Ä¢ `stats [type]` - statistics\n';
      response += '‚Ä¢ `memory [command]` - memory management\n';
      response += '‚Ä¢ `test [module]` - testing\n';
      response += '‚Ä¢ `diagnostic` - diagnostics\n\n';

      // Features status
      response += '‚öôÔ∏è **Features Status:**\n';
      featureEntries.forEach(([name, enabled]) => {
        const emoji = enabled ? '‚úÖ' : 'üî¥';
        response += `‚Ä¢ ${emoji} \`${name}\`\n`;
      });

      response += '\nüì± **Usage:** `cli [command]` or `@bot [command]`';

      return response;
    }
  }

  private generateStatusResponse(language: 'uk' | 'en'): string {
    return this.featureManager.getFeatureStatus();
  }

  private generateFeaturesResponse(language: 'uk' | 'en'): string {
    const basicHelp = this.featureManager.getFeatureHelp();
    const mappedFeatures = featureMapper.getFormattedFeaturesList();
    
    return basicHelp + '\n\n' + mappedFeatures;
  }

  private generateCliModeResponse(language: 'uk' | 'en'): string {
    if (language === 'uk') {
      return `üñ•Ô∏è **CLI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!**

üìñ **–î–æ—Å—Ç—É–ø–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏:**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ \`help\` - –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
‚Ä¢ \`status\` - —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
‚Ä¢ \`features\` - —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è

**–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏:**
‚Ä¢ \`enable [—Ñ—É–Ω–∫—Ü—ñ—è]\` - —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é
‚Ä¢ \`disable [—Ñ—É–Ω–∫—Ü—ñ—è]\` - –≤–∏–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é
‚Ä¢ \`toggle [—Ñ—É–Ω–∫—Ü—ñ—è]\` - –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é

**–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ \`enable powerWords\`
‚Ä¢ \`disable moderation\`
‚Ä¢ \`status\`

üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –ø–∏—à—ñ—Ç—å –±–µ–∑ –∫–æ–º–∞–Ω–¥ CLI.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "—â–æ —Ç–∏ –º–æ–∂–µ—à?" - –¥–∞—Å—Ç—å –¥—Ä—É–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.`;
    } else {
      return `üñ•Ô∏è **CLI Mode Activated!**

üìñ **Available CLI Commands:**

**Basic Commands:**
‚Ä¢ \`help\` - show help
‚Ä¢ \`status\` - show all features status
‚Ä¢ \`features\` - list manageable features

**Feature Management:**
‚Ä¢ \`enable [feature]\` - enable feature
‚Ä¢ \`disable [feature]\` - disable feature
‚Ä¢ \`toggle [feature]\` - toggle feature

**Examples:**
‚Ä¢ \`enable powerWords\`
‚Ä¢ \`disable moderation\`
‚Ä¢ \`status\`

üí° **Tip:** For natural conversation, just type without CLI commands.
Example: "what can you do?" - will give a friendly response.`;
    }
  }

  public getStats() {
    const detectorStats = this.detector.getStats();
    return {
      ...detectorStats,
      handlerName: 'CLICommandHandler',
      version: '1.0.0',
      integrations: ['FeatureManager', 'CLICommandDetector'],
      capabilities: [
        'Help command with features status',
        'Feature status display',
        'Feature management (enable/disable/toggle)',
        'Multi-language support (Ukrainian/English)',
        'Bot mention support (@bot commands)',
        'Telegram slash commands (/help, /status)'
      ]
    };
  }

  // –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CLI
  public async testCommand(command: string): Promise<any> {
    const result = await this.handleMessage(command, 'private', 'test', 'test');
    return {
      command,
      detected: result.shouldRespond,
      response: result.shouldRespond ? result.response.substring(0, 100) + '...' : 'Not detected',
      confidence: result.confidence,
      reasoning: result.reasoning
    };
  }

  // === –í–∞–ª—é—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ===
  private async handleCurrencyCommand(match: CLICommandMatch, chatId: string): Promise<CLICommandResponse> {
    const subCommand = match.args?.[0] || 'help';
    
    try {
      switch (subCommand.toLowerCase()) {
        case 'rate':
        case '–∫—É—Ä—Å': {
          const currency = match.args?.[1];
          if (!currency) {
            return this.createErrorResponse('cli_currency', 
              '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤–∞–ª—é—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: currency rate USD',
              match.confidence);
          }
          
          const result = await this.currencyHandler.handleMessage(`–∫—É—Ä—Å ${currency}`);
          return {
            shouldRespond: true,
            responseType: 'cli_currency',
            response: result.response,
            confidence: match.confidence,
            reasoning: `Currency rate query for ${currency}`,
            command: match.command,
            args: match.args,
            data: result
          };
        }
        
        case 'convert':
        case '–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏': {
          const amount = match.args?.[1];
          const fromCurrency = match.args?.[2];
          const toCurrency = match.args?.[3] || 'UAH';
          
          if (!amount || !fromCurrency) {
            return this.createErrorResponse('cli_currency',
              '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Å—É–º—É —Ç–∞ –≤–∞–ª—é—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: currency convert 100 USD UAH',
              match.confidence);
          }
          
          const result = await this.currencyHandler.handleMessage(`${amount} ${fromCurrency} –≤ ${toCurrency}`);
          return {
            shouldRespond: true,
            responseType: 'cli_currency',
            response: result.response,
            confidence: match.confidence,
            reasoning: `Currency conversion: ${amount} ${fromCurrency} to ${toCurrency}`,
            command: match.command,
            args: match.args,
            data: result
          };
        }
        
        case 'list':
        case '—Å–ø–∏—Å–æ–∫': {
          const result = await this.currencyHandler.handleMessage('—Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç');
          return {
            shouldRespond: true,
            responseType: 'cli_currency',
            response: result.response,
            confidence: match.confidence,
            reasoning: 'Currency list request',
            command: match.command,
            args: match.args,
            data: result
          };
        }
        
        case 'popular':
        case '–ø–æ–ø—É–ª—è—Ä–Ω—ñ': {
          const result = await this.currencyHandler.handleMessage('–ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏');
          return {
            shouldRespond: true,
            responseType: 'cli_currency',
            response: result.response,
            confidence: match.confidence,
            reasoning: 'Popular currencies request',
            command: match.command,
            args: match.args,
            data: result
          };
        }
        
        default:
          return {
            shouldRespond: true,
            responseType: 'cli_currency',
            response: this.generateCurrencyHelp(match.language),
            confidence: match.confidence,
            reasoning: 'Currency help',
            command: match.command,
            args: match.args
          };
      }
    } catch (error) {
      return this.createErrorResponse('cli_currency', 
        `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∞–ª—é—Ç–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏: ${error}`, 
        match.confidence);
    }
  }

  // === –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–¥–∞ ===
  private async handleNewsCommand(match: CLICommandMatch, chatId: string): Promise<CLICommandResponse> {
    if (!this.newsWeatherHandler) {
      return this.createErrorResponse('cli_news',
        '–ú–æ–¥—É–ª—å –Ω–æ–≤–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
        match.confidence);
    }

    try {
      const location = match.args?.join(' ') || '';
      const query = location ? `–Ω–æ–≤–∏–Ω–∏ ${location}` : '–Ω–æ–≤–∏–Ω–∏';
      
      const result = await this.newsWeatherHandler.handleNewsCommand(
        parseInt(chatId),
        query
      );

      return {
        shouldRespond: true,
        responseType: 'cli_news',
        response: result || '–ù–æ–≤–∏–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ',
        confidence: match.confidence,
        reasoning: `News request${location ? ` for ${location}` : ''}`,
        command: match.command,
        args: match.args
      };
    } catch (error) {
      return this.createErrorResponse('cli_news',
        `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: ${error}`,
        match.confidence);
    }
  }

  private async handleWeatherCommand(match: CLICommandMatch, chatId: string): Promise<CLICommandResponse> {
    if (!this.newsWeatherHandler) {
      return this.createErrorResponse('cli_weather',
        '–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
        match.confidence);
    }

    try {
      const location = match.args?.join(' ') || '–ö–∏—ó–≤';
      const query = `–ø–æ–≥–æ–¥–∞ ${location}`;
      
      const result = await this.newsWeatherHandler.handleNewsCommand(
        parseInt(chatId),
        query
      );

      return {
        shouldRespond: true,
        responseType: 'cli_weather',
        response: result || '–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        confidence: match.confidence,
        reasoning: `Weather request for ${location}`,
        command: match.command,
        args: match.args
      };
    } catch (error) {
      return this.createErrorResponse('cli_weather',
        `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏: ${error}`,
        match.confidence);
    }
  }

  // === –ü–æ—à—É–∫ –∑–Ω–∞–Ω—å ===
  private async handleKnowledgeSearchCommand(match: CLICommandMatch, chatId: string, userId: string): Promise<CLICommandResponse> {
    const query = match.args?.join(' ');
    
    if (!query) {
      return this.createErrorResponse('cli_knowledge',
        '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: search –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        match.confidence);
    }

    try {
      const result = await this.knowledgeHandler.handleMessage(
        query,
        'private',
        userId,
        chatId
      );

      return {
        shouldRespond: true,
        responseType: 'cli_knowledge',
        response: result.response,
        confidence: Math.min(match.confidence, result.confidence),
        reasoning: `Knowledge search for: ${query}`,
        command: match.command,
        args: match.args,
        data: result
      };
    } catch (error) {
      return this.createErrorResponse('cli_knowledge',
        `–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: ${error}`,
        match.confidence);
    }
  }

  // === –ú–µ–º–∏ ===
  private async handleMemeCommand(match: CLICommandMatch, userId: string): Promise<CLICommandResponse> {
    const subCommand = match.args?.[0] || 'random';
    
    try {
      switch (subCommand.toLowerCase()) {
        case 'generate':
        case '—Å—Ç–≤–æ—Ä–∏—Ç–∏': {
          const memeText = match.args?.slice(1).join(' ');
          if (!memeText) {
            return this.createErrorResponse('cli_meme',
              '–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: meme generate funny text',
              match.confidence);
          }

          const result = await this.memeGenerator.generateQuickMeme(memeText);
          
          return {
            shouldRespond: true,
            responseType: 'cli_meme',
            response: result.success ? 
              `üé≠ –ú–µ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n${result.text || result.imageUrl || '–ì–æ—Ç–æ–≤–æ!'}` :
              '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–º',
            confidence: match.confidence,
            reasoning: `Meme generation: ${memeText}`,
            command: match.command,
            args: match.args,
            data: result
          };
        }
        
        case 'templates':
        case '—à–∞–±–ª–æ–Ω–∏': {
          const templates = this.memeGenerator.getAvailableTemplates();
          const templateList = templates.map(t => `‚Ä¢ ${t}: —à–∞–±–ª–æ–Ω –º–µ–º—É`).join('\n');
          
          return {
            shouldRespond: true,
            responseType: 'cli_meme',
            response: `üé≠ **–î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –º–µ–º—ñ–≤:**\n\n${templateList}`,
            confidence: match.confidence,
            reasoning: 'Meme templates list',
            command: match.command,
            args: match.args,
            data: { templates }
          };
        }
        
        default: {
          // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º
          const result = await this.memeGenerator.generateQuickMeme('CLI –º–µ–º');
          
          return {
            shouldRespond: true,
            responseType: 'cli_meme',
            response: result.success ? 
              `üé≠ –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º!\n${result.text || result.imageUrl || '–ì–æ—Ç–æ–≤–æ!'}` :
              '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–º',
            confidence: match.confidence,
            reasoning: 'Random meme generation',
            command: match.command,
            args: match.args,
            data: result
          };
        }
      }
    } catch (error) {
      return this.createErrorResponse('cli_meme',
        `–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–º—É: ${error}`,
        match.confidence);
    }
  }

  // === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
  private handleStatsCommand(match: CLICommandMatch, chatId: string, userId: string): CLICommandResponse {
    const statsType = match.args?.[0] || 'general';
    
    try {
      let statsData: any = {};
      let response: string;

      switch (statsType.toLowerCase()) {
        case 'features':
        case '—Ñ—É–Ω–∫—Ü—ñ—ó': {
          const features = this.featureManager.getAllFeatures();
          const featureEntries = Object.entries(features);
          const enabled = featureEntries.filter(([, isEnabled]) => isEnabled).length;
          const total = featureEntries.length;
          
          response = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π:**\n\n`;
          response += `‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ: ${enabled}/${total}\n`;
          response += `üî¥ –í–∏–º–∫–Ω–µ–Ω–æ: ${total - enabled}/${total}\n\n`;
          
          featureEntries.forEach(([name, isEnabled]) => {
            const emoji = isEnabled ? '‚úÖ' : 'üî¥';
            response += `${emoji} ${name}\n`;
          });
          
          statsData = { features, enabled, total };
          break;
        }
        
        case 'memory':
        case '–ø–∞–º\'—è—Ç—å': {
          const memoryStats = this.userMemory.getStats();
          response = `üß† **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º'—è—Ç—ñ:**\n\n`;
          response += `üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${memoryStats.totalUsers}\n`;
          response += `üí¨ –í–∑–∞—î–º–æ–¥—ñ–π: ${memoryStats.totalInteractions}\n`;
          response += `‚ö†Ô∏è –ü–æ—Ä—É—à–µ–Ω—å: ${memoryStats.totalOffenses}\n`;
          response += `üèÜ –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤: ${memoryStats.totalCompliments}\n`;
          
          statsData = memoryStats;
          break;
        }
        
        case 'currency':
        case '–≤–∞–ª—é—Ç–∞': {
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
          response = `üí± **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç:**\n\n`;
          response += `üìà –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –≤–∞–ª—é—Ç: 20+\n`;
          response += `üîÑ –î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó: –∫—É—Ä—Å, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è, —Å–ø–∏—Å–æ–∫\n`;
          response += `üè¶ –î–∂–µ—Ä–µ–ª–æ: –ù–ë–£ (–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –±–∞–Ω–∫ –£–∫—Ä–∞—ó–Ω–∏)\n`;
          
          statsData = { supportedCurrencies: 20, source: 'NBU' };
          break;
        }
        
        default: {
          // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          const features = this.featureManager.getAllFeatures();
          const enabledFeatures = Object.values(features).filter(Boolean).length;
          const totalFeatures = Object.keys(features).length;
          
          response = `üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:**\n\n`;
          response += `üéõÔ∏è CLI –∫–æ–º–∞–Ω–¥: 15+\n`;
          response += `‚öôÔ∏è –§—É–Ω–∫—Ü—ñ–π —É–≤—ñ–º–∫–Ω–µ–Ω–æ: ${enabledFeatures}/${totalFeatures}\n`;
          response += `ü§ñ –ú–æ–¥—É–ª—ñ–≤: 8 –æ—Å–Ω–æ–≤–Ω–∏—Ö\n`;
          response += `üåç –ú–æ–≤–∏: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞\n`;
          response += `üíº –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: –≤–∞–ª—é—Ç–∏, –Ω–æ–≤–∏–Ω–∏, –ø–æ–≥–æ–¥–∞, –º–µ–º–∏, –ø–æ—à—É–∫\n`;
          
          statsData = {
            totalCommands: 15,
            enabledFeatures,
            totalFeatures,
            modules: 8,
            languages: ['uk', 'en']
          };
          break;
        }
      }

      return {
        shouldRespond: true,
        responseType: 'cli_stats',
        response,
        confidence: match.confidence,
        reasoning: `Statistics request: ${statsType}`,
        command: match.command,
        args: match.args,
        data: statsData
      };
    } catch (error) {
      return this.createErrorResponse('cli_stats',
        `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`,
        match.confidence);
    }
  }

  // === –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é ===
  private handleMemoryCommand(match: CLICommandMatch, userId: string): CLICommandResponse {
    const subCommand = match.args?.[0] || 'status';
    
    try {
      switch (subCommand.toLowerCase()) {
        case 'status':
        case '—Å—Ç–∞—Ç—É—Å': {
          const profile = this.userMemory.getUserProfile(userId);
          let response = `üß† **–ü—Ä–æ—Ñ—ñ–ª—å –ø–∞–º'—è—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n\n`;
          response += `üë§ ID: ${profile?.userId || userId}\n`;
          response += `üòä –°–µ—Ä–µ–¥–Ω—î —Å—Ç–∞–≤–ª–µ–Ω–Ω—è: ${profile?.averageAttitude || 0}\n`;
          response += `üî¢ –í–∑–∞—î–º–æ–¥—ñ–π: ${profile?.totalInteractions || 0}\n`;
          response += `‚ö†Ô∏è –û–±—Ä–∞–∑: ${profile?.offensiveHistory?.count || 0}\n`;
          response += `üèÜ –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤: ${profile?.positiveHistory?.count || 0}\n`;
          response += `üïí –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: ${profile?.lastSeen?.toLocaleString('uk-UA') || '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}\n`;
          
          return {
            shouldRespond: true,
            responseType: 'cli_memory',
            response,
            confidence: match.confidence,
            reasoning: `Memory status for user ${userId}`,
            command: match.command,
            args: match.args,
            data: profile
          };
        }
        
        case 'reset':
        case '—Å–∫–∏–Ω—É—Ç–∏': {
          this.userMemory.resetUserApology(userId);
          
          return {
            shouldRespond: true,
            responseType: 'cli_memory',
            response: 'üîÑ –ü–∞–º\'—è—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∫–∏–Ω—É—Ç–∞. –í–∏–±–∞—á–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ.',
            confidence: match.confidence,
            reasoning: `Memory reset for user ${userId}`,
            command: match.command,
            args: match.args
          };
        }
        
        case 'stats':
        case '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {
          const stats = this.userMemory.getStats();
          let response = `üß† **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º'—è—Ç—ñ:**\n\n`;
          response += `üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${stats.totalUsers}\n`;
          response += `üí¨ –í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π: ${stats.totalInteractions}\n`;
          response += `‚ö†Ô∏è –í—Å—å–æ–≥–æ –ø–æ—Ä—É—à–µ–Ω—å: ${stats.totalOffenses}\n`;
          response += `üèÜ –í—Å—å–æ–≥–æ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤: ${stats.totalCompliments}\n`;
          
          return {
            shouldRespond: true,
            responseType: 'cli_memory',
            response,
            confidence: match.confidence,
            reasoning: 'Memory global statistics',
            command: match.command,
            args: match.args,
            data: stats
          };
        }
        
        default:
          return this.createErrorResponse('cli_memory',
            '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: status, reset, stats',
            match.confidence);
      }
    } catch (error) {
      return this.createErrorResponse('cli_memory',
        `–ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é: ${error}`,
        match.confidence);
    }
  }

  // === –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===
  private handleTestCommand(match: CLICommandMatch): CLICommandResponse {
    const testType = match.args?.[0] || 'system';
    
    try {
      let response: string;
      let testData: any = {};

      switch (testType.toLowerCase()) {
        case 'features':
        case '—Ñ—É–Ω–∫—Ü—ñ—ó': {
          const features = this.featureManager.getAllFeatures();
          const featureTests = Object.entries(features).map(([name, enabled]) => ({
            feature: name,
            enabled,
            status: enabled ? 'PASS' : 'DISABLED'
          }));
          
          response = `üß™ **–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π:**\n\n`;
          featureTests.forEach(test => {
            const emoji = test.enabled ? '‚úÖ' : '‚ö™';
            response += `${emoji} ${test.feature}: ${test.status}\n`;
          });
          
          testData = { tests: featureTests };
          break;
        }
        
        case 'currency':
        case '–≤–∞–ª—é—Ç–∞': {
          // –¢–µ—Å—Ç –≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
          response = `üß™ **–¢–µ—Å—Ç –≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è:**\n\n`;
          response += `‚úÖ CurrencyHandler: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ\n`;
          response += `‚úÖ CurrencyExchangeService: –¥–æ—Å—Ç—É–ø–Ω–∏–π\n`;
          response += `‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ NBU API: –∞–∫—Ç–∏–≤–Ω–∞\n`;
          response += `‚úÖ –ö–æ–º–∞–Ω–¥–∏: rate, convert, list, popular\n`;
          
          testData = { 
            currencyHandler: true,
            exchangeService: true,
            nbuApi: true,
            commands: ['rate', 'convert', 'list', 'popular']
          };
          break;
        }
        
        case 'cli':
        case '–∫–æ–º–∞–Ω–¥–∏': {
          const allCommands = [
            'help', 'status', 'features', 'enable', 'disable', 'toggle',
            'currency', 'news', 'weather', 'search', 'meme', 'stats', 'memory', 'test', 'diagnostic'
          ];
          
          response = `üß™ **–¢–µ—Å—Ç CLI –∫–æ–º–∞–Ω–¥:**\n\n`;
          allCommands.forEach(cmd => {
            response += `‚úÖ ${cmd}: –¥–æ—Å—Ç—É–ø–Ω–∞\n`;
          });
          
          testData = { commands: allCommands, available: allCommands.length };
          break;
        }
        
        default: {
          // –°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç
          const features = this.featureManager.getAllFeatures();
          const enabledCount = Object.values(features).filter(Boolean).length;
          
          response = `üß™ **–°–∏—Å—Ç–µ–º–Ω–∏–π —Ç–µ—Å—Ç:**\n\n`;
          response += `‚úÖ FeatureManager: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ\n`;
          response += `‚úÖ CLI Detector: –ø—Ä–∞—Ü—é—î\n`;
          response += `‚úÖ CurrencyHandler: –≥–æ—Ç–æ–≤–∏–π\n`;
          response += `‚úÖ KnowledgeHandler: –∞–∫—Ç–∏–≤–Ω–∏–π\n`;
          response += `‚úÖ MemeGenerator: –¥–æ—Å—Ç—É–ø–Ω–∏–π\n`;
          response += `‚úÖ UserMemory: –ø—Ä–∞—Ü—é—î\n`;
          response += `üìä –§—É–Ω–∫—Ü—ñ–π —É–≤—ñ–º–∫–Ω–µ–Ω–æ: ${enabledCount}\n`;
          
          testData = {
            featureManager: true,
            cliDetector: true,
            currencyHandler: true,
            knowledgeHandler: true,
            memeGenerator: true,
            userMemory: true,
            enabledFeatures: enabledCount
          };
          break;
        }
      }

      return {
        shouldRespond: true,
        responseType: 'cli_test',
        response,
        confidence: match.confidence,
        reasoning: `System test: ${testType}`,
        command: match.command,
        args: match.args,
        data: testData
      };
    } catch (error) {
      return this.createErrorResponse('cli_test',
        `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error}`,
        match.confidence);
    }
  }

  // === –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ===
  private handleDiagnosticCommand(match: CLICommandMatch, chatId: string, userId: string): CLICommandResponse {
    try {
      const diagnosticData = {
        timestamp: new Date().toISOString(),
        chatId,
        userId,
        features: this.featureManager.getAllFeatures(),
        handlers: {
          cli: true,
          currency: !!this.currencyHandler,
          newsWeather: !!this.newsWeatherHandler,
          knowledge: !!this.knowledgeHandler,
          meme: !!this.memeGenerator,
          memory: !!this.userMemory
        },
        system: {
          nodeVersion: process.version,
          platform: process.platform,
          memory: process.memoryUsage(),
          uptime: process.uptime()
        }
      };

      let response = `üîß **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:**\n\n`;
      response += `üïí –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}\n`;
      response += `üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userId}\n`;
      response += `üí¨ –ß–∞—Ç: ${chatId}\n\n`;
      
      response += `üéõÔ∏è **–û–±—Ä–æ–±–Ω–∏–∫–∏:**\n`;
      Object.entries(diagnosticData.handlers).forEach(([name, status]) => {
        const emoji = status ? '‚úÖ' : '‚ùå';
        response += `${emoji} ${name}\n`;
      });
      
      response += `\n‚öôÔ∏è **–§—É–Ω–∫—Ü—ñ—ó:**\n`;
      Object.entries(diagnosticData.features).forEach(([name, enabled]) => {
        const emoji = enabled ? '‚úÖ' : 'üî¥';
        response += `${emoji} ${name}\n`;
      });
      
      response += `\nüñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:**\n`;
      response += `‚Ä¢ Node.js: ${diagnosticData.system.nodeVersion}\n`;
      response += `‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${diagnosticData.system.platform}\n`;
      response += `‚Ä¢ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: ${Math.round(diagnosticData.system.uptime / 60)} —Ö–≤\n`;
      response += `‚Ä¢ –ü–∞–º'—è—Ç—å: ${Math.round(diagnosticData.system.memory.heapUsed / 1024 / 1024)} MB\n`;

      return {
        shouldRespond: true,
        responseType: 'cli_diagnostic',
        response,
        confidence: match.confidence,
        reasoning: 'System diagnostic',
        command: match.command,
        args: match.args,
        data: diagnosticData
      };
    } catch (error) {
      return this.createErrorResponse('cli_diagnostic',
        `–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error}`,
        match.confidence);
    }
  }

  // === –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ ===
  private createErrorResponse(responseType: CLICommandResponse['responseType'], message: string, confidence: number): CLICommandResponse {
    return {
      shouldRespond: true,
      responseType,
      response: `‚ùå ${message}`,
      confidence,
      reasoning: 'Error response'
    };
  }

  private generateCurrencyHelp(language: 'uk' | 'en'): string {
    if (language === 'uk') {
      return `üí± **–í–∞–ª—é—Ç–Ω—ñ CLI –∫–æ–º–∞–Ω–¥–∏:**\n\n` +
             `‚Ä¢ \`currency rate [–≤–∞–ª—é—Ç–∞]\` - –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏\n` +
             `‚Ä¢ \`currency convert [—Å—É–º–∞] [–∑] [–≤]\` - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è\n` +
             `‚Ä¢ \`currency list\` - —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç\n` +
             `‚Ä¢ \`currency popular\` - –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏\n\n` +
             `**–ü—Ä–∏–∫–ª–∞–¥–∏:**\n` +
             `‚Ä¢ \`currency rate USD\`\n` +
             `‚Ä¢ \`currency convert 100 USD UAH\`\n` +
             `‚Ä¢ \`currency popular\``;
    } else {
      return `üí± **Currency CLI Commands:**\n\n` +
             `‚Ä¢ \`currency rate [currency]\` - get rate\n` +
             `‚Ä¢ \`currency convert [amount] [from] [to]\` - convert\n` +
             `‚Ä¢ \`currency list\` - list currencies\n` +
             `‚Ä¢ \`currency popular\` - popular rates\n\n` +
             `**Examples:**\n` +
             `‚Ä¢ \`currency rate USD\`\n` +
             `‚Ä¢ \`currency convert 100 USD UAH\`\n` +
             `‚Ä¢ \`currency popular\``;
    }
  }
} 