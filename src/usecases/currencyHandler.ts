// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç
import { CurrencyExchangeService, CurrencyData } from '../domain/currencyExchangeService';
import { CurrencyCommandsFuzzyMatcher } from '../config/vocabulary/currencyCommandsFuzzyMatcher';

export interface CurrencyResponse {
  shouldRespond: boolean;
  response: string;
  responseType: 'currency_rate' | 'currency_convert' | 'currency_list' | 'error';
}

export class CurrencyHandler {
  private currencyService: CurrencyExchangeService;
  private matcher: CurrencyCommandsFuzzyMatcher;

  constructor() {
    this.currencyService = new CurrencyExchangeService();
    this.matcher = new CurrencyCommandsFuzzyMatcher();
  }

  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async handleMessage(text: string): Promise<CurrencyResponse> {
    if (!text || text.trim().length === 0) {
      return {
        shouldRespond: false,
        response: '',
        responseType: 'error'
      };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π FuzzyMatcher –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
    const command = this.matcher.findCurrencyCommand(text);
    
    if (!command) {
      return {
        shouldRespond: false,
        response: '',
        responseType: 'error'
      };
    }

    try {
      switch (command.type) {
        case 'rate_query':
          if (command.parameters?.currency) {
            return await this.handleCurrencyRateQuery(command.parameters.currency);
          }
          break;
          
        case 'conversion':
          if (command.parameters?.amount && command.parameters?.fromCurrency) {
            return await this.handleCurrencyConversion({
              amount: command.parameters.amount,
              fromCode: command.parameters.fromCurrency,
              toCode: command.parameters.toCurrency || 'UAH'
            });
          }
          break;
          
        case 'popular':
          return await this.handlePopularCurrenciesQuery();
          
        case 'list':
          return await this.handleCurrencyListQuery();
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∞–ª—é—Ç–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏:', error);
      return {
        shouldRespond: true,
        response: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        responseType: 'error'
      };
    }
    return {
      shouldRespond: false,
      response: '',
      responseType: 'error'
    };
  }

  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫—É—Ä—Å—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∞–ª—é—Ç–∏
   */
  private async handleCurrencyRateQuery(currencyCode: string): Promise<CurrencyResponse> {
    try {
      const currencyData = await this.currencyService.getCurrencyRate(currencyCode);
      
      if (!currencyData) {
        return {
          shouldRespond: true,
          response: `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç–∏ "${currencyCode}". –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–æ–¥ –≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, USD, EUR).`,
          responseType: 'error'
        };
      }

      const formattedRate = currencyData.rate.toFixed(4);
      const supportedCurrency = this.currencyService.getSupportedCurrencies()
        .find(c => c.code === currencyData.code);
      
      const symbol = supportedCurrency?.symbol || currencyData.code;
      
      return {
        shouldRespond: true,
        response: `üí± **–ö—É—Ä—Å ${currencyData.name}**\n\n` +
                 `${symbol} 1 ${currencyData.code} = ${formattedRate} ‚Ç¥\n` +
                 `üìÖ –î–∞—Ç–∞: ${currencyData.date}\n\n` +
                 `üè¶ _–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫—É—Ä—Å –ù–ë–£_`,
        responseType: 'currency_rate'
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏:', error);
      return {
        shouldRespond: true,
        response: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        responseType: 'error'
      };
    }
  }

  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤–∞–ª—é—Ç
   */
  private async handleCurrencyConversion(conversionData: {
    amount: number;
    fromCode: string;
    toCode?: string;
  }): Promise<CurrencyResponse> {
    try {
      const result = await this.currencyService.convertCurrency(
        conversionData.amount,
        conversionData.fromCode,
        conversionData.toCode || 'UAH'
      );

      if (!result) {
        return {
          shouldRespond: true,
          response: `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∞–ª—é—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∫–æ–¥—ñ–≤ –≤–∞–ª—é—Ç.`,
          responseType: 'error'
        };
      }

      const fromSymbol = this.getCurrencySymbol(result.fromCurrency.code);
      const toSymbol = result.toCurrency ? 
        this.getCurrencySymbol(result.toCurrency.code) : '‚Ç¥';
      
      const formattedResult = result.result.toFixed(2);
      
      let response = `üí∏ **–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤–∞–ª—é—Ç**\n\n` +
                    `${fromSymbol} ${result.amount} ${result.fromCurrency.code} = ` +
                    `${toSymbol} ${formattedResult} ${result.toCurrency?.code || 'UAH'}\n\n`;

      if (result.toCurrency) {
        response += `üìä –ö—É—Ä—Å–∏ –ù–ë–£:\n` +
                   `‚Ä¢ ${result.fromCurrency.code}: ${result.fromCurrency.rate.toFixed(4)} ‚Ç¥\n` +
                   `‚Ä¢ ${result.toCurrency.code}: ${result.toCurrency.rate.toFixed(4)} ‚Ç¥\n\n`;
      } else {
        response += `üìä –ö—É—Ä—Å –ù–ë–£: ${result.fromCurrency.rate.toFixed(4)} ‚Ç¥\n\n`;
      }

      response += `üìÖ –î–∞—Ç–∞: ${result.fromCurrency.date}`;

      return {
        shouldRespond: true,
        response,
        responseType: 'currency_convert'
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç–∏:', error);
      return {
        shouldRespond: true,
        response: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        responseType: 'error'
      };
    }
  }

  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç —Å–ø–∏—Å–∫—É –≤–∞–ª—é—Ç
   */
  private async handleCurrencyListQuery(): Promise<CurrencyResponse> {
    const supportedCurrencies = this.currencyService.getSupportedCurrencies();
    
    let response = `üìã **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –≤–∞–ª—é—Ç–∏:**\n\n`;
    
    supportedCurrencies.forEach(currency => {
      response += `${currency.symbol} **${currency.code}** - ${currency.name}\n`;
    });

    response += `\nüí° **–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n` +
               `‚Ä¢ "–∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞" –∞–±–æ "USD"\n` +
               `‚Ä¢ "100 USD –≤ UAH"\n` +
               `‚Ä¢ "50 EUR –≤ USD"\n` +
               `‚Ä¢ "–ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏"`;

    return {
      shouldRespond: true,
      response,
      responseType: 'currency_list'
    };
  }

  /**
   * –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
   */
  private async handlePopularCurrenciesQuery(): Promise<CurrencyResponse> {
    try {
      const popularCurrencies = await this.currencyService.getPopularCurrencies();
      
      if (popularCurrencies.length === 0) {
        return {
          shouldRespond: true,
          response: '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          responseType: 'error'
        };
      }

      let response = `üí∞ **–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç**\n\n`;
      
      popularCurrencies.forEach(currency => {
        const symbol = this.getCurrencySymbol(currency.code);
        const formattedRate = currency.rate.toFixed(4);
        response += `${symbol} **${currency.code}**: ${formattedRate} ‚Ç¥\n`;
      });

      response += `\nüìÖ –î–∞—Ç–∞: ${popularCurrencies[0].date}\n` +
                 `üè¶ _–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫—É—Ä—Å–∏ –ù–ë–£_`;

      return {
        shouldRespond: true,
        response,
        responseType: 'currency_rate'
      };
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤:', error);
      return {
        shouldRespond: true,
        response: '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        responseType: 'error'
      };
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏
   */
  private getCurrencySymbol(code: string): string {
    const currency = this.currencyService.getSupportedCurrencies()
      .find(c => c.code === code);
    return currency?.symbol || code;
  }
} 