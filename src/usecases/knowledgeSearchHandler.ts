import { KnowledgeSearchEngine, SearchResult, SearchQuery } from '../domain/knowledgeSearchEngine';

export interface KnowledgeSearchResponse {
  shouldRespond: boolean;
  responseType: 'knowledge' | 'ignore';
  response: string;
  confidence: number;
  reasoning: string;
  source?: string;
}

export class KnowledgeSearchHandler {
  private searchEngine: KnowledgeSearchEngine;

  constructor() {
    this.searchEngine = new KnowledgeSearchEngine();
    console.log('üîç Knowledge Search Handler initialized');
  }

  public async handleMessage(
    text: string,
    chatType: string,
    userId: string,
    chatId: string
  ): Promise<KnowledgeSearchResponse> {
    try {
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É
      const language = this.detectLanguage(text);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç
      const query: SearchQuery = {
        text: text.trim(),
        userId,
        chatId,
        language
      };

      console.log(`üîç Processing knowledge query: "${text}"`);

      // –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const result = await this.searchEngine.searchKnowledge(query);
      
      if (result) {
        return {
          shouldRespond: true,
          responseType: 'knowledge',
          response: this.formatResponse(result),
          confidence: result.confidence,
          reasoning: `Knowledge search successful. Source: ${result.source}, Confidence: ${Math.round(result.confidence * 100)}%`,
          source: result.source
        };
      }

      return {
        shouldRespond: false,
        responseType: 'ignore',
        response: '',
        confidence: 0,
        reasoning: 'Not a knowledge query or no answer found'
      };

    } catch (error) {
      console.error('‚ùå Knowledge search handler error:', error);
      return {
        shouldRespond: false,
        responseType: 'ignore',
        response: '',
        confidence: 0,
        reasoning: `Error processing knowledge query: ${error}`
      };
    }
  }

  private detectLanguage(text: string): 'uk' | 'en' {
    const ukrainianPatterns = [
      /—Ö—Ç–æ\s+—Ç–∞–∫/i, /—â–æ\s+—Ç–∞–∫/i, /–∫–æ–ª–∏/i, /–¥–µ\s+/i, /—è–∫\s+/i,
      /–Ω–∞–≤—ñ—â–æ/i, /—á–æ–º—É/i, /—Å–∫—ñ–ª—å–∫–∏/i, /–æ–±—á–∏—Å–ª–∏/i, /—Ä–æ–∑—Ä–∞—Ö—É–π/i
    ];

    const englishPatterns = [
      /who\s+is/i, /what\s+is/i, /when\s+/i, /where\s+/i, 
      /how\s+/i, /why\s+/i, /calculate/i
    ];

    const hasUkrainian = ukrainianPatterns.some(pattern => pattern.test(text));
    const hasEnglish = englishPatterns.some(pattern => pattern.test(text));

    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ
    if (hasUkrainian) return 'uk';
    if (hasEnglish) return 'en';

    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    return 'uk';
  }

  private formatResponse(result: SearchResult): string {
    const sourceText = result.language === 'uk' ? '–î–∂–µ—Ä–µ–ª–æ' : 'Source';
    const confidenceText = result.language === 'uk' ? '–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å' : 'Confidence';
    
    let response = `üîç **${result.answer}**`;
    
    if (result.source && result.source !== 'DuckDuckGo') {
      response += `\n\nüìñ ${sourceText}: ${result.source}`;
    }

    if (result.confidence < 0.8) {
      const warningText = result.language === 'uk' 
        ? '‚ö†Ô∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ç–æ—á–Ω–æ—é'
        : '‚ö†Ô∏è Information may be inaccurate';
      response += `\n${warningText}`;
    }

    return response;
  }

  public getStats() {
    const engineStats = this.searchEngine.getStats();
    return {
      ...engineStats,
      handlerName: 'KnowledgeSearchHandler',
      version: '1.0.0',
      capabilities: [
        'Mathematical calculations (Ukrainian/English)',
        'Factual questions via DuckDuckGo',
        'Wikipedia-style answers',
        'Instant definitions and facts',
        'Multi-language support'
      ]
    };
  }

  // –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è CLI
  public async testSearch(query: string): Promise<any> {
    const result = await this.handleMessage(query, 'private', 'test', 'test');
    return {
      query,
      result: result.shouldRespond ? result.response : 'No answer found',
      confidence: result.confidence,
      reasoning: result.reasoning
    };
  }
} 