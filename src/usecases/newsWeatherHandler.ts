import { NewsWeatherMonitor, NewsItem } from '../domain/newsWeatherMonitor';
import TelegramBot from 'node-telegram-bot-api';
import { NewsCommandsFuzzyMatcher, NewsCommandMatch } from '../config/vocabulary/newsCommandsFuzzyMatcher';

export interface ScheduledTask {
  id: string;
  type: 'morning_summary' | 'critical_monitoring';
  nextRun: Date;
  interval: number; // –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
  enabled: boolean;
}

export class NewsWeatherHandler {
  private monitor: NewsWeatherMonitor;
  private bot: TelegramBot;
  private scheduledTasks: Map<string, ScheduledTask> = new Map();
  private timers: Map<string, NodeJS.Timeout> = new Map();
  private subscribedChats: Set<number> = new Set();
  private morningHour: number = 8; // –ì–æ–¥–∏–Ω–∞ —Ä–∞–Ω–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  private monitoringEnabled: boolean = true;
  private fuzzyMatcher: NewsCommandsFuzzyMatcher;

  constructor(
    newsApiKey: string, 
    weatherApiKey: string, 
    bot: TelegramBot,
    subscribedChats: number[] = []
  ) {
    this.monitor = new NewsWeatherMonitor(newsApiKey, weatherApiKey);
    this.bot = bot;
    this.subscribedChats = new Set(subscribedChats);
    this.fuzzyMatcher = new NewsCommandsFuzzyMatcher();
    this.initializeScheduler();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
   */
  private initializeScheduler(): void {
    // –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫
    this.scheduleMorningSummary();
    
    // –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
    this.scheduleCriticalMonitoring();
  }

  /**
   * –ü–ª–∞–Ω—É—î —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏
   */
  private scheduleMorningSummary(): void {
    const taskId = 'morning_summary';
    const now = new Date();
    const nextMorning = new Date();
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞ —Ä–∞–Ω–æ–∫ (–º—ñ–∂ 8 —ñ 10 –≥–æ–¥–∏–Ω–∞–º–∏)
    const randomHour = this.morningHour + Math.floor(Math.random() * 2); // 8-9 –≥–æ–¥–∏–Ω–∏
    const randomMinute = Math.floor(Math.random() * 60);
    
    nextMorning.setHours(randomHour, randomMinute, 0, 0);
    
    // –Ø–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤ —Å—å–æ–≥–æ–¥–Ω—ñ, –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (nextMorning <= now) {
      nextMorning.setDate(nextMorning.getDate() + 1);
    }

    const task: ScheduledTask = {
      id: taskId,
      type: 'morning_summary',
      nextRun: nextMorning,
      interval: 24 * 60 * 60 * 1000, // 24 –≥–æ–¥–∏–Ω–∏
      enabled: true
    };

    this.scheduledTasks.set(taskId, task);
    this.scheduleTask(task);
  }

  /**
   * –ü–ª–∞–Ω—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
   */
  private scheduleCriticalMonitoring(): void {
    const taskId = 'critical_monitoring';
    const now = new Date();
    const nextCheck = new Date(now.getTime() + 30 * 60 * 1000); // –ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω

    const task: ScheduledTask = {
      id: taskId,
      type: 'critical_monitoring',
      nextRun: nextCheck,
      interval: 30 * 60 * 1000, // –ö–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
      enabled: true
    };

    this.scheduledTasks.set(taskId, task);
    this.scheduleTask(task);
  }

  /**
   * –ü–ª–∞–Ω—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  private scheduleTask(task: ScheduledTask): void {
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
    const existingTimer = this.timers.get(task.id);
    if (existingTimer) {
      clearTimeout(existingTimer);
    }

    const now = Date.now();
    const delay = task.nextRun.getTime() - now;

    if (delay <= 0) {
      // –í–∏–∫–æ–Ω–∞—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ —è–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤
      this.executeTask(task);
      return;
    }

    const timer = setTimeout(async () => {
      await this.executeTask(task);
      
      // –ü–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      if (task.enabled) {
        task.nextRun = new Date(Date.now() + task.interval);
        this.scheduleTask(task);
      }
    }, delay);

    this.timers.set(task.id, timer);
    console.log(`–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${task.type} –Ω–∞ ${task.nextRun.toLocaleString('uk-UA')}`);
  }

  /**
   * –í–∏–∫–æ–Ω—É—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  private async executeTask(task: ScheduledTask): Promise<void> {
    try {
      switch (task.type) {
        case 'morning_summary':
          await this.sendMorningSummary();
          break;
        case 'critical_monitoring':
          await this.checkAndSendCriticalNews();
          break;
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ${task.type}:`, error);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–∞–Ω–∫–æ–≤—É –∑–≤–æ–¥–∫—É –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º —á–∞—Ç–∞–º
   */
  private async sendMorningSummary(): Promise<void> {
    if (this.subscribedChats.size === 0) {
      console.log('–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è —Ä–∞–Ω–∫–æ–≤–æ—ó –∑–≤–æ–¥–∫–∏');
      return;
    }

    const summary = await this.monitor.createMorningSummary();
    
    for (const chatId of this.subscribedChats) {
      try {
        await this.bot.sendMessage(chatId, summary, { 
          parse_mode: 'Markdown',
          disable_web_page_preview: true 
        });
        console.log(`–†–∞–Ω–∫–æ–≤–∞ –∑–≤–æ–¥–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ —á–∞—Ç—É ${chatId}`);
      } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–∫–æ–≤–æ—ó –∑–≤–æ–¥–∫–∏ –¥–æ —á–∞—Ç—É ${chatId}:`, error);
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏
   */
  private async checkAndSendCriticalNews(): Promise<void> {
    if (!this.monitoringEnabled || this.subscribedChats.size === 0) {
      return;
    }

    const criticalNews = await this.monitor.checkCriticalNews();
    
    for (const newsItem of criticalNews) {
      const alertMessage = this.monitor.formatCriticalAlert(newsItem);
      
      for (const chatId of this.subscribedChats) {
        try {
          await this.bot.sendMessage(chatId, alertMessage, { 
            parse_mode: 'Markdown',
            disable_web_page_preview: false 
          });
          console.log(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ —á–∞—Ç—É ${chatId}: ${newsItem.title}`);
        } catch (error) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–æ —á–∞—Ç—É ${chatId}:`, error);
        }
      }
    }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –Ω–æ–≤–∏–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—é –¥–æ –ø–æ–º–∏–ª–æ–∫
   */
  async handleNewsCommand(chatId: number, messageText: string): Promise<string> {
    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fuzzy matching –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
      const commandMatch = this.fuzzyMatcher.recognizeCommand(messageText);
      
      if (!commandMatch) {
        return '';
      }

      console.log(`–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: ${commandMatch.type} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${commandMatch.confidence})`);

      switch (commandMatch.type) {
        case 'news':
          return await this.getNewsOnDemand();
          
        case 'weather':
          const city = commandMatch.city || '–ö–∏—ó–≤';
          return await this.getWeatherOnDemand(city);
          
        case 'subscribe':
          return this.subscribeToMorningSummary(chatId);
          
        case 'unsubscribe':
          return this.unsubscribeFromMorningSummary(chatId);
          
        default:
          return '';
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏:`, error);
      return '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –Ω–∞ –≤–∏–º–æ–≥—É –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó
   */
  private async getNewsOnDemand(): Promise<string> {
    try {
      const news = await this.monitor.getUkrainianNews(24);
      
      if (news.length === 0) {
        return 'üì∞ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É.';
      }

      // –°–æ—Ä—Ç—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é: —Å–ø–æ—á–∞—Ç–∫—É –∫—Ä–∏—Ç–∏—á–Ω—ñ, –ø–æ—Ç—ñ–º –∑–∞ —á–∞—Å–æ–º
      const sortedNews = news.sort((a, b) => {
        // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
        const severityOrder: Record<string, number> = { critical: 4, high: 3, medium: 2, low: 1 };
        const severityDiff = severityOrder[b.severity] - severityOrder[a.severity];
        
        if (severityDiff !== 0) {
          return severityDiff;
        }
        
        // –ü—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ - —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
        return b.publishedAt.getTime() - a.publishedAt.getTime();
      });

      // –û–∫—Ä–µ–º–æ –≤–∏–¥—ñ–ª—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏
      const criticalNews = sortedNews.filter(item => item.severity === 'critical');
      const otherNews = sortedNews.filter(item => item.severity !== 'critical').slice(0, 5);

      let message = '';

      // –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º
      if (criticalNews.length > 0) {
        message += `üö® **–ö–†–ò–¢–ò–ß–ù–Ü –ù–û–í–ò–ù–ò:**\n\n`;
        
        criticalNews.forEach((item, index) => {
          message += `üö® **${item.title}**\n`;
          if (item.description) {
            message += `${item.description}\n`;
          }
          message += `üîó [–ß–ò–¢–ê–¢–ò –ü–û–í–ù–Ü–°–¢–Æ](${item.url})\n`;
          message += `üìç –î–∂–µ—Ä–µ–ª–æ: ${item.source}\n`;
          message += `üïê ${item.publishedAt.toLocaleString('uk-UA')}\n\n`;
        });
        
        message += `${'‚îÄ'.repeat(40)}\n\n`;
      }

      // –ü–æ—Ç—ñ–º –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—à—ñ –≤–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏
      if (otherNews.length > 0) {
        message += `üì∞ **–í–ê–ñ–õ–ò–í–Ü –ù–û–í–ò–ù–ò:**\n\n`;
        
        otherNews.forEach((item, index) => {
          const emoji = this.getSeverityEmoji(item.severity);
          message += `${emoji} **${item.title}**\n`;
          message += `üîó [–ß–∏—Ç–∞—Ç–∏](${item.url})\n`;
          message += `üïê ${item.publishedAt.toLocaleString('uk-UA', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}\n\n`;
        });
      }

      if (criticalNews.length === 0 && otherNews.length === 0) {
        return 'üì∞ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤–∞–∂–ª–∏–≤–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É.';
      }

      message += `üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
      
      return message;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –Ω–∞ –≤–∏–º–æ–≥—É:', error);
      return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥—É –Ω–∞ –≤–∏–º–æ–≥—É
   */
  private async getWeatherOnDemand(city: string): Promise<string> {
    try {
      const weather = await this.monitor.getWeatherData(city);
      
      if (!weather) {
        return `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è ${city}.`;
      }

      let message = `üå§ **–ü–æ–≥–æ–¥–∞ –≤ ${weather.city}:**\n\n`;
      message += `üå° **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** ${weather.temperature}¬∞C\n`;
      message += `‚òÅÔ∏è **–°—Ç–∞–Ω:** ${weather.condition}\n`;
      message += `üí® **–í—ñ—Ç–µ—Ä:** ${weather.windSpeed} –∫–º/–≥–æ–¥\n`;
      message += `üíß **–í–æ–ª–æ–≥—ñ—Å—Ç—å:** ${weather.humidity}%\n`;
      message += `üìä **–¢–∏—Å–∫:** ${weather.pressure} –º–º —Ä—Ç.—Å—Ç.\n`;

      if (weather.alerts.length > 0) {
        message += `\n‚ö†Ô∏è **–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:**\n`;
        weather.alerts.forEach(alert => {
          message += `‚Ä¢ ${alert.title}\n`;
        });
      }

      message += `\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
      
      return message;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–∞ –≤–∏–º–æ–≥—É:', error);
      return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
    }
  }

  /**
   * –ü—ñ–¥–ø–∏—Å—É—î —á–∞—Ç –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏
   */
  private subscribeToMorningSummary(chatId: number): string {
    if (this.subscribedChats.has(chatId)) {
      return '‚úÖ –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏.';
    }

    this.subscribedChats.add(chatId);
    return 'üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏! –©–æ–¥–Ω—è –º—ñ–∂ 8:00 —Ç–∞ 10:00 –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–¥—É.';
  }

  /**
   * –í—ñ–¥–ø–∏—Å—É—î —á–∞—Ç –≤—ñ–¥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫
   */
  private unsubscribeFromMorningSummary(chatId: number): string {
    if (!this.subscribedChats.has(chatId)) {
      return '‚ùå –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏.';
    }

    this.subscribedChats.delete(chatId);
    return 'üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏.';
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
   */
  getRecognitionStats(): {
    totalKeywords: number;
    totalVariations: number;
    supportedCities: number;
  } {
    return this.fuzzyMatcher.getRecognitionStats();
  }

  /**
   * –¢–µ—Å—Ç—É—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
   */
  testCommandRecognition(text: string): NewsCommandMatch | null {
    return this.fuzzyMatcher.recognizeCommand(text);
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–≤–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
   */
  private getSeverityEmoji(severity: string): string {
    switch (severity) {
      case 'critical': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      case 'medium': return 'üì¢';
      case 'low': return 'üí¨';
      default: return 'üì∞';
    }
  }

  /**
   * –í–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
   */
  toggleCriticalMonitoring(enabled: boolean): string {
    this.monitoringEnabled = enabled;
    const task = this.scheduledTasks.get('critical_monitoring');
    
    if (task) {
      task.enabled = enabled;
      if (enabled) {
        this.scheduleTask(task);
        return '‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ.';
      } else {
        const timer = this.timers.get(task.id);
        if (timer) {
          clearTimeout(timer);
          this.timers.delete(task.id);
        }
        return '‚ùå –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.';
      }
    }
    
    return '‚ùå –ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.';
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
   */
  getSchedulerStatus(): string {
    let status = 'üìÖ **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞:**\n\n';
    
    for (const [id, task] of this.scheduledTasks) {
      const emoji = task.enabled ? '‚úÖ' : '‚ùå';
      status += `${emoji} **${task.type}**\n`;
      status += `   –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: ${task.nextRun.toLocaleString('uk-UA')}\n`;
      status += `   –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(task.interval / (60 * 1000))} —Ö–≤\n\n`;
    }

    status += `üîî –ü—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤: ${this.subscribedChats.size}\n`;
    status += `üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: ${this.monitoringEnabled ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ'}`;
    
    return status;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤
   */
  getSubscribedChats(): number[] {
    return Array.from(this.subscribedChats);
  }

  /**
   * –û—á–∏—â–∞—î –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏
   */
  cleanup(): void {
    for (const timer of this.timers.values()) {
      clearTimeout(timer);
    }
    this.timers.clear();
    console.log('–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏ –æ—á–∏—â–µ–Ω–æ');
  }
} 