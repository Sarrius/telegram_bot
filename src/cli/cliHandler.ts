// CLI Handler –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
import { appConfig, getSafeConfig } from '../config/appConfig';
import { EnhancedMessageHandler } from '../usecases/enhancedMessageHandler';
import { FeatureManager } from '../config/featureManager';

export interface CLICommand {
  name: string;
  description: string;
  execute: () => Promise<void> | void;
}

export class CLIHandler {
  private commands: Map<string, CLICommand> = new Map();
  private messageHandler?: EnhancedMessageHandler;
  private featureManager: FeatureManager;

  constructor() {
    this.featureManager = FeatureManager.getInstance();
    this.initializeCommands();
  }

  private initializeCommands(): void {
    // –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    this.registerCommand('help', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥', this.showHelp.bind(this));
    this.registerCommand('config', '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é', this.showConfig.bind(this));
    this.registerCommand('stats', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞', this.showStats.bind(this));
    this.registerCommand('test', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó', this.runTests.bind(this));
    this.registerCommand('validate', '–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é', this.validateConfig.bind(this));
    this.registerCommand('features', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π', this.showFeatures.bind(this));
    this.registerCommand('env', '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞', this.showEnvironment.bind(this));
    this.registerCommand('health', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤\'—è —Å–∏—Å—Ç–µ–º–∏', this.checkHealth.bind(this));
    this.registerCommand('memory', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º\'—è—Ç—ñ', this.showMemoryStats.bind(this));
    this.registerCommand('profanity', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏', this.testProfanityFilter.bind(this));
    this.registerCommand('fuzzy', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ fuzzy matching', this.testFuzzyMatching.bind(this));
    this.registerCommand('powerwords', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ—Ç—É–∂–Ω–∏—Ö —Å–ª—ñ–≤', this.testPowerWordsDetector.bind(this));
    this.registerCommand('chat', '–ü–æ—á–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç —ñ–∑ –±–æ—Ç–æ–º', this.startInteractiveChat.bind(this));
    
    // –ö–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    this.registerCommand('enable', '–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é (enable <–Ω–∞–∑–≤–∞>)', this.enableFeature.bind(this));
    this.registerCommand('disable', '–í–∏–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é (disable <–Ω–∞–∑–≤–∞>)', this.disableFeature.bind(this));
    this.registerCommand('toggle', '–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é (toggle <–Ω–∞–∑–≤–∞>)', this.toggleFeature.bind(this));
    this.registerCommand('status', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π', this.showFeatureStatus.bind(this));
    this.registerCommand('enable-all', '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó', this.enableAllFeatures.bind(this));
    this.registerCommand('disable-all', '–í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó', this.disableAllFeatures.bind(this));
    this.registerCommand('reset-features', '–°–∫–∏–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö', this.resetFeatures.bind(this));
    this.registerCommand('feature-help', '–î–æ–≤—ñ–¥–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü—ñ—è—Ö', this.showFeatureHelp.bind(this));
    
    this.registerCommand('exit', '–í–∏–π—Ç–∏ –∑ CLI —Ä–µ–∂–∏–º—É', this.exit.bind(this));
  }

  private registerCommand(name: string, description: string, handler: () => Promise<void> | void): void {
    this.commands.set(name, { name, description, execute: handler });
  }

  public async start(): Promise<void> {
    console.log('üöÄ CLI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
    console.log('üí° –í–≤–µ–¥—ñ—Ç—å "help" –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ message handler –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
    try {
      this.messageHandler = new EnhancedMessageHandler();
      console.log('‚úÖ Message handler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó message handler:', error);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ CLI –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    await this.processArguments();

    if (!this.shouldExitAfterArguments()) {
      await this.startInteractiveMode();
    }
  }

  private async processArguments(): Promise<void> {
    const args = process.argv.slice(2);
    
    for (const arg of args) {
      if (arg === '--stats') {
        await this.showStats();
      } else if (arg === '--config') {
        await this.showConfig();
      } else if (arg === '--test-mode') {
        await this.runTests();
      } else if (arg === '--health') {
        await this.checkHealth();
      } else if (arg === '--validate') {
        await this.validateConfig();
      } else if (arg === '--features') {
        await this.showFeatures();
      }
    }
  }

  private shouldExitAfterArguments(): boolean {
    const args = process.argv.slice(2);
    return args.some(arg => ['--stats', '--config', '--health', '--validate', '--features'].includes(arg));
  }

  private async startInteractiveMode(): Promise<void> {
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      prompt: 'ü§ñ telegram-bot> '
    });

    rl.prompt();

    rl.on('line', async (input: string) => {
      const trimmedInput = input.trim();
      
      if (trimmedInput) {
        await this.executeCommand(trimmedInput);
      }
      
      rl.prompt();
    });

    rl.on('close', () => {
      console.log('\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
      process.exit(0);
    });
  }

  private async executeCommand(input: string): Promise<void> {
    const [commandName, ...args] = input.split(' ');
    
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    if (commandName === 'enable' || commandName === 'disable' || commandName === 'toggle') {
      await this.handleFeatureCommand(commandName, args);
      return;
    }

    const command = this.commands.get(commandName);

    if (!command) {
      console.log(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${commandName}`);
      console.log('üí° –í–≤–µ–¥—ñ—Ç—å "help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥');
      return;
    }

    try {
      await command.execute();
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ ${commandName}:`, error);
    }
  }

  private async handleFeatureCommand(command: string, args: string[]): Promise<void> {
    if (args.length === 0) {
      console.log(`‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ${command} <–Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó>`);
      console.log('üí° –í–≤–µ–¥—ñ—Ç—å "feature-help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
      return;
    }

    const feature = args[0];
    let result: string;

    switch (command) {
      case 'enable':
        result = this.featureManager.enableFeature(feature as any);
        break;
      case 'disable':
        result = this.featureManager.disableFeature(feature as any);
        break;
      case 'toggle':
        result = this.featureManager.toggleFeature(feature as any);
        break;
      default:
        console.log(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${command}`);
        return;
    }

    console.log(result);
  }

  // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
  private showHelp(): void {
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('='.repeat(80));
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π
    const features = this.featureManager.getAllFeatures();
    const featureEntries = Object.entries(features);
    let featureIndex = 0;
    
    const commands = Array.from(this.commands.values());
    const maxLines = Math.max(commands.length, featureEntries.length);
    
    for (let i = 0; i < maxLines; i++) {
      let line = '';
      
      // –õ—ñ–≤–∞ —Å—Ç–æ—Ä–æ–Ω–∞ - –∫–æ–º–∞–Ω–¥–∏
      if (i < commands.length) {
        const command = commands[i];
        line += `  ${command.name.padEnd(15)} - ${command.description.padEnd(40)}`;
      } else {
        line += ' '.repeat(58);
      }
      
      // –ü—Ä–∞–≤–∞ —Å—Ç–æ—Ä–æ–Ω–∞ - —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π
      if (i < featureEntries.length) {
        const [name, enabled] = featureEntries[i];
        const emoji = enabled ? '‚úÖ' : 'üî¥';
        const status = enabled ? 'ON ' : 'OFF';
        line += ` ‚îÇ ${emoji} ${name.padEnd(12)} ${status}`;
      }
      
      console.log(line);
    }
    
    console.log('='.repeat(80));
    console.log('\nüéõÔ∏è  –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏:');
    console.log('  enable <—Ñ—É–Ω–∫—Ü—ñ—è>    - —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é');
    console.log('  disable <—Ñ—É–Ω–∫—Ü—ñ—è>   - –≤–∏–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é'); 
    console.log('  toggle <—Ñ—É–Ω–∫—Ü—ñ—è>    - –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é');
    console.log('  status              - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
    console.log('  feature-help        - –¥–æ–≤—ñ–¥–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü—ñ—è—Ö');
    
    console.log('\nüí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
    console.log('  npm run dev -- --cli --stats     # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    console.log('  npm run dev -- --cli --config    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'); 
    console.log('  npm run dev -- --cli --test-mode # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ');
    console.log('  enable powerWords                # –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ —Å–ª–æ–≤–∞');
    console.log('  disable moderation               # –í–∏–º–∫–Ω—É—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é');
    console.log('  chat                             # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç');
  }

  private showConfig(): void {
    console.log('\n‚öôÔ∏è –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:');
    console.log('='.repeat(50));
    
    const safeConfig = getSafeConfig();
    console.log(JSON.stringify(safeConfig, null, 2));
  }

  private async showStats(): Promise<void> {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:');
    console.log('='.repeat(50));

    if (!this.messageHandler) {
      console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      const stats = this.messageHandler.getEnhancedStats();
      console.log('üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`  - –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ NLP: ${stats.nlp.activeUsers}`);
      console.log(`  - –í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π NLP: ${stats.nlp.totalInteractions}`);
      console.log(`  - –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.ukrainianUsers}`);
      console.log(`  - –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.englishUsers}`);
      console.log(`  - –î–æ—Å—Ç—É–ø–Ω—ñ –º–µ–º–∏: ${stats.memes.availableTemplates}`);
      console.log(`  - –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç callbacks: ${stats.atmosphere.activeChatCallbacks}`);
      
      console.log('\nüé≠ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ —á–∞—Ç—É:');
      // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
      const testChatId = 'test_chat';
      const atmosphereStats = this.messageHandler.getChatAtmosphereStats(testChatId);
      console.log(`  –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç ${testChatId}:`);
      console.log(`    - Callback –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${atmosphereStats.engagementCallbackRegistered}`);
      console.log(`    - –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${atmosphereStats.userRoles.length}`);

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  private async runTests(): Promise<void> {
    console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤:');
    console.log('='.repeat(50));

    if (!this.messageHandler) {
      console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    console.log('üîç –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É');
    try {
      const testMessage = '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? –ß—É–¥–æ–≤–∏–π –¥–µ–Ω—å —Å—å–æ–≥–æ–¥–Ω—ñ! üòä';
      const context = {
        text: testMessage,
        userId: 'test_user',
        chatId: 'test_chat',
        userName: '–¢–µ—Å—Ç',
        chatType: 'group' as const,
        isGroupChat: true,
        messageId: 1,
        isReplyToBot: false,
        mentionsBot: false,
        isDirectMention: false,
        requestsMeme: false
      };

      const response = await this.messageHandler.handleMessage(context);
      console.log(`  ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${response.shouldReact ? '–†–µ–∞–∫—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞' : '–†–µ–∞–∫—Ü—ñ—ó –Ω–µ–º–∞—î'}`);
      console.log(`  üìä –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.responseType}`);
      console.log(`  üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${response.confidence}`);
    } catch (error) {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
    }

    // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏
    console.log('\nüö´ –¢–µ—Å—Ç 2: –§—ñ–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏');
    try {
      const profaneMessage = '–¢–∏ –¥—É—Ä–∞–∫, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–º—ñ—î—à!';
      const context = {
        text: profaneMessage,
        userId: 'test_user2',
        chatId: 'test_chat',
        userName: '–¢–µ—Å—Ç2',
        chatType: 'group' as const,
        isGroupChat: true,
        messageId: 2,
        isReplyToBot: false,
        mentionsBot: false,
        isDirectMention: false,
        requestsMeme: false
      };

      const response = await this.messageHandler.handleMessage(context);
      console.log(`  ‚úÖ –ù–µ–Ω–∞–ª–µ–∂–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏—è–≤–ª–µ–Ω–æ: ${response.inappropriateContentWarning ? '–¢–∞–∫' : '–ù—ñ'}`);
      if (response.reply) {
        console.log(`  üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.reply.substring(0, 100)}...`);
      }
    } catch (error) {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
    }

    // –¢–µ—Å—Ç 3: –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
    console.log('\nü§ñ –¢–µ—Å—Ç 3: –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π');
    try {
      const capabilityMessage = '–©–æ —Ç–∏ –º–æ–∂–µ—à?';
      const context = {
        text: capabilityMessage,
        userId: 'test_user3',
        chatId: 'test_chat',
        userName: '–¢–µ—Å—Ç3',
        chatType: 'group' as const,
        isGroupChat: true,
        messageId: 3,
        isReplyToBot: false,
        mentionsBot: false,
        isDirectMention: false,
        requestsMeme: false
      };

      const response = await this.messageHandler.handleMessage(context);
      console.log(`  ‚úÖ –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${response.responseType === 'conversation' ? '–¢–∞–∫' : '–ù—ñ'}`);
      if (response.reply) {
        console.log(`  üìã –ü–æ–∫–∞–∑–∞–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: ${response.reply.includes('–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ') ? '–¢–∞–∫' : '–ù—ñ'}`);
      }
    } catch (error) {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }

  private validateConfig(): void {
    console.log('\n‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:');
    console.log('='.repeat(50));

    const { validateConfig } = require('../config/appConfig');
    const validation = validateConfig();

    if (validation.valid) {
      console.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞!');
    } else {
      console.log('‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏:');
      validation.errors.forEach((error: string) => {
        console.log(`  - ${error}`);
      });
    }
  }

  private showFeatures(): void {
    console.log('\nüéõÔ∏è –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π:');
    console.log('='.repeat(50));

    Object.entries(appConfig.features).forEach(([feature, enabled]) => {
      const status = enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ';
      console.log(`  ${feature.padEnd(25)} - ${status}`);
    });
  }

  private showEnvironment(): void {
    console.log('\nüåç –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:');
    console.log('='.repeat(50));

    const envVars = [
      'NODE_ENV', 'PORT', 'PRIMARY_LANGUAGE', 'LOG_LEVEL',
      'ENABLE_NLP', 'ENABLE_CONTENT_MODERATION', 'ENABLE_ATMOSPHERE',
      'ENABLE_MEMES', 'ENABLE_USER_MEMORY', 'ENABLE_PROFANITY_FILTER'
    ];

    envVars.forEach(varName => {
      const value = process.env[varName] || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
      console.log(`  ${varName.padEnd(30)} = ${value}`);
    });
  }

  private checkHealth(): void {
    console.log('\nüè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è —Å–∏—Å—Ç–µ–º–∏:');
    console.log('='.repeat(50));

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ
    const memUsage = process.memoryUsage();
    console.log('üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ:');
    console.log(`  RSS: ${Math.round(memUsage.rss / 1024 / 1024)} MB`);
    console.log(`  Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024)} MB`);
    console.log(`  Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024)} MB`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
    console.log('\n‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ü–µ—Å—É:');
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    console.log(`  ${hours}–≥–æ–¥ ${minutes}—Ö–≤ ${seconds}—Å`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    console.log('\n‚öôÔ∏è –°—Ç–∞–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:');
    const { validateConfig } = require('../config/appConfig');
    const validation = validateConfig();
    console.log(`  –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å: ${validation.valid ? '‚úÖ OK' : '‚ùå –ü–æ–º–∏–ª–∫–∏'}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ message handler
    console.log('\nü§ñ Message Handler:');
    console.log(`  –°—Ç–∞–Ω: ${this.messageHandler ? '‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' : '‚ùå –ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}`);
  }

  private showMemoryStats(): void {
    console.log('\nüß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º\'—è—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:');
    console.log('='.repeat(50));

    if (!this.messageHandler) {
      console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    try {
      // –¢—É—Ç –±—É–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ UserMemory, –∫–æ–ª–∏ –±—É–¥–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º\'—è—Ç—ñ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º\'—è—Ç—ñ:', error);
    }
  }

  private testProfanityFilter(): void {
    console.log('\nüö´ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏:');
    console.log('='.repeat(50));

    const testPhrases = [
      '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?',
      '–¢–∏ –¥—É—Ä–∞–∫',
      '–Ü–¥–∏ –≤ –±—ñ—Å!',
      '–ö–ª–∞—Å–Ω–∏–π –¥–µ–Ω—å —Å—å–æ–≥–æ–¥–Ω—ñ',
      'What a beautiful day',
      'You are stupid'
    ];

    try {
      const { ProfanityFilter } = require('../domain/profanityFilter');
      const filter = new ProfanityFilter();

      testPhrases.forEach(phrase => {
        const analysis = filter.analyzeMessage(phrase);
        const status = analysis.hasProfanity ? 'üö´ –ü–†–û–§–ê–ù–ê–¶–Ü–Ø' : '‚úÖ –ß–ò–°–¢–û';
        console.log(`  "${phrase}" - ${status}`);
        if (analysis.hasProfanity) {
          console.log(`    –ú–æ–≤–∞: ${analysis.language}, –†—ñ–≤–µ–Ω—å: ${analysis.severityLevel}`);
        }
      });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞:', error);
    }
  }

  private testFuzzyMatching(): void {
    console.log('\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è fuzzy matching:');
    console.log('='.repeat(50));

    const testQueries = [
      '—â–æ —Ç–∏ –º–æ–∂–µ—à',
      '—à–æ –º–æ–∂–µ—à',
      '–Ω–æ–≤–∏–Ω–∏',
      '–ø–æ–≥–æ–¥–∞ –≤ –∫–∏—î–≤—ñ',
      '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
      'what can you do'
    ];

    try {
      // –¢–µ—Å—Ç—É—î–º–æ capability matcher
      console.log('ü§ñ Capability Fuzzy Matcher:');
      const { CapabilityFuzzyMatcher } = require('../config/vocabulary/capabilityFuzzyMatcher');
      const capabilityMatcher = new CapabilityFuzzyMatcher();

      testQueries.forEach(query => {
        const result = capabilityMatcher.detectCapabilityRequest(query);
        console.log(`  "${query}" - ${result.isCapabilityRequest ? '‚úÖ –†–û–ó–ü–Ü–ó–ù–ê–ù–û' : '‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û'} (${result.confidence})`);
      });

      // –¢–µ—Å—Ç—É—î–º–æ news commands matcher
      console.log('\nüì∞ News Commands Fuzzy Matcher:');
      const { NewsCommandsFuzzyMatcher } = require('../config/vocabulary/newsCommandsFuzzyMatcher');
      const newsMatcher = new NewsCommandsFuzzyMatcher();

      testQueries.forEach(query => {
        const result = newsMatcher.recognizeCommand(query);
        if (result) {
          console.log(`  "${query}" - ‚úÖ ${result.type.toUpperCase()} (${result.confidence})`);
        } else {
          console.log(`  "${query}" - ‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û`);
        }
      });

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è fuzzy matching:', error);
    }
  }

  private testPowerWordsDetector(): void {
    console.log('\n‚ö° –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ—Ç—É–∂–Ω–∏—Ö —Å–ª—ñ–≤:');
    console.log('='.repeat(50));

    const testPhrases = [
      '–ü–æ—Ç—É–∂–Ω–æ –ø—Ä–∞—Ü—é—é —Å—å–æ–≥–æ–¥–Ω—ñ!',
      '–°—É–ø–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥—É–∂–µ –∫—Ä—É—Ç–æ',
      '–ú–æ–≥—É—Ç–Ω—ñ–π —É—Å–ø—ñ—Ö –≤ –ø—Ä–æ–µ–∫—Ç—ñ',
      '–û—Ñ—ñ–≥–µ–Ω–Ω–∏–π –¥–µ–Ω—å —Å—å–æ–≥–æ–¥–Ω—ñ',
      '–¢–æ–ø —Ä–æ–±–æ—Ç–∞, –∫–ª–∞—Å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
      '–ú–µ–≥–∞ –∫—Ä—É—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º',
      '–ó–≤–∏—á–∞–π–Ω–∏–π –¥–µ–Ω—å –Ω–∞ —Ä–æ–±–æ—Ç—ñ',
      '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?',
      '–±–æ–º–±–µ–∑–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞',
      '–Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –≤ —Ä–æ–∑–≤–∏—Ç–∫—É'
    ];

    try {
      const { PotuzhnoPowerWordsDetector } = require('../domain/potuzhnoPowerWordsDetector');
      const detector = new PotuzhnoPowerWordsDetector();

      testPhrases.forEach(phrase => {
        const matches = detector.detectPowerWords(phrase);
        const bestMatch = detector.getBestPowerWordMatch(phrase);
        
        if (bestMatch) {
          const emoji = detector.getReactionEmoji(bestMatch);
          const motivation = detector.getMotivationalResponse(bestMatch);
          console.log(`  ‚ö° "${phrase}"`);
          console.log(`    –ó–Ω–∞–π–¥–µ–Ω–æ: "${bestMatch.originalWord}" ‚Üí "${bestMatch.matchedWord}"`);
          console.log(`    –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${(bestMatch.confidence * 100).toFixed(1)}%`);
          console.log(`    –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${bestMatch.category}, –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: ${bestMatch.intensity}`);
          console.log(`    –†–µ–∞–∫—Ü—ñ—è: ${emoji}`);
          console.log(`    –ú–æ—Ç–∏–≤–∞—Ü—ñ—è: ${motivation}`);
        } else {
          console.log(`  ‚ùå "${phrase}" - –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç—É–∂–Ω–∏—Ö —Å–ª—ñ–≤`);
        }
        console.log('');
      });
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ—Ç—É–∂–Ω–∏—Ö —Å–ª—ñ–≤:', error);
    }
  }

  private exit(): void {
    console.log('\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
    process.exit(0);
  }

  // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
  private enableFeature(): void {
    console.log('üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: enable <–Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó>');
    console.log('üí° –í–≤–µ–¥—ñ—Ç—å "feature-help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
  }

  private disableFeature(): void {
    console.log('üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: disable <–Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó>');
    console.log('üí° –í–≤–µ–¥—ñ—Ç—å "feature-help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
  }

  private toggleFeature(): void {
    console.log('üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: toggle <–Ω–∞–∑–≤–∞_—Ñ—É–Ω–∫—Ü—ñ—ó>');
    console.log('üí° –í–≤–µ–¥—ñ—Ç—å "feature-help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π');
  }

  private showFeatureStatus(): void {
    console.log(this.featureManager.getFeatureStatus());
  }

  private enableAllFeatures(): void {
    const result = this.featureManager.enableAll();
    console.log(result);
  }

  private disableAllFeatures(): void {
    const result = this.featureManager.disableAll();
    console.log(result);
  }

  private resetFeatures(): void {
    const result = this.featureManager.resetToDefaults();
    console.log(result);
  }

  private showFeatureHelp(): void {
    console.log(this.featureManager.getFeatureHelp());
  }

  private async startInteractiveChat(): Promise<void> {
    console.log('\nüí¨ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç —ñ–∑ –±–æ—Ç–æ–º');
    console.log('='.repeat(50));
    console.log('üéØ –ï–º—É–ª—è—Ü—ñ—è –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É - –ø–∏—à—ñ—Ç—å —è–∫ —É Telegram!');
    console.log('üí° –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
    console.log('  /quit –∞–±–æ /exit  - –≤–∏–π—Ç–∏ –∑ —á–∞—Ç—É');
    console.log('  /stats          - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    console.log('  /reset          - —Å–∫–∏–Ω—É—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
    console.log('  @bot [—Ç–µ–∫—Å—Ç]    - –ø—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞');
    console.log('üìù –ü–æ—á–∏–Ω–∞–π—Ç–µ –ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n');

    if (!this.messageHandler) {
      console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
      return;
    }

    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      prompt: 'üë§ –í–∏: '
    });

    let messageId = 1;
    const chatId = 'test_group_chat';
    const userId = 'test_user_123';
    const userName = 'TestUser';

    rl.prompt();

    rl.on('line', async (input: string) => {
      const message = input.trim();
      
      if (!message) {
        rl.prompt();
        return;
      }

      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
      if (message === '/quit' || message === '/exit') {
        console.log('üëã –í–∏—Ö—ñ–¥ –∑ —á–∞—Ç—É...');
        rl.close();
        return;
      }

      if (message === '/stats') {
        await this.showQuickStats();
        rl.prompt();
        return;
      }

      if (message === '/reset') {
        console.log('üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É —Å–∫–∏–Ω—É—Ç–æ');
        rl.prompt();
        return;
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–æ–º
      try {
        console.log(`\nüì© [${new Date().toLocaleTimeString()}] –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...`);
        
        const context = {
          text: message,
          userId: userId,
          chatId: chatId,
          userName: userName,
          chatType: 'group' as const,
          isGroupChat: true,
          messageId: messageId++,
          isReplyToBot: false,
          mentionsBot: message.toLowerCase().includes('@bot'),
          isDirectMention: message.toLowerCase().includes('@bot'),
          requestsMeme: message.toLowerCase().includes('–º–µ–º') || message.toLowerCase().includes('meme'),
          memeRequest: (message.toLowerCase().includes('–º–µ–º') || message.toLowerCase().includes('meme')) ? message : undefined
        };

                  const response = await this.messageHandler?.handleMessage(context);

          if (!response) {
            console.log('‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç–∞');
            console.log(''); // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—É
            rl.prompt();
            return;
          }

        if (response.shouldReply || response.shouldReact) {
          if (response.shouldReact && response.reaction) {
            console.log(`ü§ñ –ë–æ—Ç —Ä–µ–∞–≥—É—î: ${response.reaction}`);
          }
          
          if (response.shouldReply && response.reply) {
            console.log(`ü§ñ –ë–æ—Ç [${response.responseType}]: ${response.reply}`);
          }
          
          if (response.confidence !== undefined) {
            console.log(`   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${(response.confidence * 100).toFixed(1)}%`);
          }

          if (response.memoryResponse) {
            console.log(`   üí≠ –ü–∞–º'—è—Ç—å: ${response.memoryResponse.message}`);
          }

          if (response.inappropriateContentWarning) {
            console.log(`   ‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: ${response.inappropriateContentWarning}`);
          }
          
          if (response.powerWordReaction) {
            console.log(`   ‚ö° –ü–æ—Ç—É–∂–Ω–µ —Å–ª–æ–≤–æ: ${response.powerWordReaction.emoji}`);
          }
          
          if (response.memeResponse) {
            console.log(`   üé≠ –ú–µ–º: ${response.memeResponse.type} - ${response.memeResponse.content}`);
          }
        } else {
          console.log('ü§ñ [–º–æ–≤—á–∏—Ç—å - –Ω–µ —Ä–µ–∞–≥—É—î –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]');
          if (response.reasoning) {
            console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${response.reasoning}`);
          }
        }

      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      }

      console.log(''); // –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—É
      rl.prompt();
    });

    rl.on('close', () => {
      console.log('\nüëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    });
  }

  private async showQuickStats(): Promise<void> {
    if (!this.messageHandler) return;
    
    try {
      const stats = this.messageHandler.getEnhancedStats();
      console.log('\nüìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log(`   üí¨ NLP –≤–∑–∞—î–º–æ–¥—ñ—ó: ${stats.nlp.totalInteractions}`);
      console.log(`   üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.ukrainianUsers}`);
      console.log(`   üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.englishUsers}`);
      console.log(`   üé≠ –ú–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: ${stats.memes.availableTemplates}`);
    } catch (error) {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
export function startCLI(): Promise<void> {
  const cli = new CLIHandler();
  return cli.start();
} 