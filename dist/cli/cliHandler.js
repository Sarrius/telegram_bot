"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLIHandler = void 0;
exports.startCLI = startCLI;
// CLI Handler –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
const appConfig_1 = require("../config/appConfig");
const enhancedMessageHandler_1 = require("../usecases/enhancedMessageHandler");
class CLIHandler {
    constructor() {
        this.commands = new Map();
        this.initializeCommands();
    }
    initializeCommands() {
        // –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        this.registerCommand('help', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥', this.showHelp.bind(this));
        this.registerCommand('config', '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é', this.showConfig.bind(this));
        this.registerCommand('stats', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞', this.showStats.bind(this));
        this.registerCommand('test', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó', this.runTests.bind(this));
        this.registerCommand('validate', '–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é', this.validateConfig.bind(this));
        this.registerCommand('features', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π', this.showFeatures.bind(this));
        this.registerCommand('env', '–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞', this.showEnvironment.bind(this));
        this.registerCommand('health', '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤\'—è —Å–∏—Å—Ç–µ–º–∏', this.checkHealth.bind(this));
        this.registerCommand('memory', '–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º\'—è—Ç—ñ', this.showMemoryStats.bind(this));
        this.registerCommand('profanity', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏', this.testProfanityFilter.bind(this));
        this.registerCommand('fuzzy', '–¢–µ—Å—Ç—É–≤–∞—Ç–∏ fuzzy matching', this.testFuzzyMatching.bind(this));
        this.registerCommand('exit', '–í–∏–π—Ç–∏ –∑ CLI —Ä–µ–∂–∏–º—É', this.exit.bind(this));
    }
    registerCommand(name, description, handler) {
        this.commands.set(name, { name, description, execute: handler });
    }
    async start() {
        console.log('üöÄ CLI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
        console.log('üí° –í–≤–µ–¥—ñ—Ç—å "help" –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥');
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ message handler –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        try {
            this.messageHandler = new enhancedMessageHandler_1.EnhancedMessageHandler();
            console.log('‚úÖ Message handler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó message handler:', error);
        }
        // –û–±—Ä–æ–±–ª—è—î–º–æ CLI –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        await this.processArguments();
        if (!this.shouldExitAfterArguments()) {
            await this.startInteractiveMode();
        }
    }
    async processArguments() {
        const args = process.argv.slice(2);
        for (const arg of args) {
            if (arg === '--stats') {
                await this.showStats();
            }
            else if (arg === '--config') {
                await this.showConfig();
            }
            else if (arg === '--test-mode') {
                await this.runTests();
            }
            else if (arg === '--health') {
                await this.checkHealth();
            }
            else if (arg === '--validate') {
                await this.validateConfig();
            }
            else if (arg === '--features') {
                await this.showFeatures();
            }
        }
    }
    shouldExitAfterArguments() {
        const args = process.argv.slice(2);
        return args.some(arg => ['--stats', '--config', '--health', '--validate', '--features'].includes(arg));
    }
    async startInteractiveMode() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            prompt: 'ü§ñ telegram-bot> '
        });
        rl.prompt();
        rl.on('line', async (input) => {
            const trimmedInput = input.trim();
            if (trimmedInput) {
                await this.executeCommand(trimmedInput);
            }
            rl.prompt();
        });
        rl.on('close', () => {
            console.log('\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!');
            process.exit(0);
        });
    }
    async executeCommand(input) {
        const [commandName, ...args] = input.split(' ');
        const command = this.commands.get(commandName);
        if (!command) {
            console.log(`‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${commandName}`);
            console.log('üí° –í–≤–µ–¥—ñ—Ç—å "help" –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥');
            return;
        }
        try {
            await command.execute();
        }
        catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ ${commandName}:`, error);
        }
    }
    // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
    showHelp() {
        console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:');
        console.log('='.repeat(50));
        this.commands.forEach(command => {
            console.log(`  ${command.name.padEnd(15)} - ${command.description}`);
        });
        console.log('\nüí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
        console.log('  npm run dev -- --cli --stats     # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        console.log('  npm run dev -- --cli --config    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó');
        console.log('  npm run dev -- --cli --test-mode # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ');
    }
    showConfig() {
        console.log('\n‚öôÔ∏è –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:');
        console.log('='.repeat(50));
        const safeConfig = (0, appConfig_1.getSafeConfig)();
        console.log(JSON.stringify(safeConfig, null, 2));
    }
    async showStats() {
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:');
        console.log('='.repeat(50));
        if (!this.messageHandler) {
            console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        try {
            const stats = this.messageHandler.getEnhancedStats();
            console.log('üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
            console.log(`  - –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ NLP: ${stats.nlp.activeUsers}`);
            console.log(`  - –í—Å—å–æ–≥–æ –≤–∑–∞—î–º–æ–¥—ñ–π NLP: ${stats.nlp.totalInteractions}`);
            console.log(`  - –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.ukrainianUsers}`);
            console.log(`  - –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${stats.nlp.englishUsers}`);
            console.log(`  - –î–æ—Å—Ç—É–ø–Ω—ñ –º–µ–º–∏: ${stats.memes.availableTemplates}`);
            console.log(`  - –ê–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç callbacks: ${stats.atmosphere.activeChatCallbacks}`);
            console.log('\nüé≠ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ —á–∞—Ç—É:');
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
            const testChatId = 'test_chat';
            const atmosphereStats = this.messageHandler.getChatAtmosphereStats(testChatId);
            console.log(`  –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç ${testChatId}:`);
            console.log(`    - Callback –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: ${atmosphereStats.engagementCallbackRegistered}`);
            console.log(`    - –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${atmosphereStats.userRoles.length}`);
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }
    async runTests() {
        console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤:');
        console.log('='.repeat(50));
        if (!this.messageHandler) {
            console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        console.log('üîç –¢–µ—Å—Ç 1: –ê–Ω–∞–ª—ñ–∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É');
        try {
            const testMessage = '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? –ß—É–¥–æ–≤–∏–π –¥–µ–Ω—å —Å—å–æ–≥–æ–¥–Ω—ñ! üòä';
            const context = {
                text: testMessage,
                userId: 'test_user',
                chatId: 'test_chat',
                userName: '–¢–µ—Å—Ç',
                chatType: 'group',
                isGroupChat: true,
                messageId: 1,
                isReplyToBot: false,
                mentionsBot: false,
                isDirectMention: false,
                requestsMeme: false
            };
            const response = await this.messageHandler.handleMessage(context);
            console.log(`  ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${response.shouldReact ? '–†–µ–∞–∫—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞' : '–†–µ–∞–∫—Ü—ñ—ó –Ω–µ–º–∞—î'}`);
            console.log(`  üìä –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.responseType}`);
            console.log(`  üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${response.confidence}`);
        }
        catch (error) {
            console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
        }
        // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏
        console.log('\nüö´ –¢–µ—Å—Ç 2: –§—ñ–ª—å—Ç—Ä –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏');
        try {
            const profaneMessage = '–¢–∏ –¥—É—Ä–∞–∫, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–º—ñ—î—à!';
            const context = {
                text: profaneMessage,
                userId: 'test_user2',
                chatId: 'test_chat',
                userName: '–¢–µ—Å—Ç2',
                chatType: 'group',
                isGroupChat: true,
                messageId: 2,
                isReplyToBot: false,
                mentionsBot: false,
                isDirectMention: false,
                requestsMeme: false
            };
            const response = await this.messageHandler.handleMessage(context);
            console.log(`  ‚úÖ –ù–µ–Ω–∞–ª–µ–∂–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏—è–≤–ª–µ–Ω–æ: ${response.inappropriateContentWarning ? '–¢–∞–∫' : '–ù—ñ'}`);
            if (response.reply) {
                console.log(`  üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${response.reply.substring(0, 100)}...`);
            }
        }
        catch (error) {
            console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
        }
        // –¢–µ—Å—Ç 3: –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        console.log('\nü§ñ –¢–µ—Å—Ç 3: –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π');
        try {
            const capabilityMessage = '–©–æ —Ç–∏ –º–æ–∂–µ—à?';
            const context = {
                text: capabilityMessage,
                userId: 'test_user3',
                chatId: 'test_chat',
                userName: '–¢–µ—Å—Ç3',
                chatType: 'group',
                isGroupChat: true,
                messageId: 3,
                isReplyToBot: false,
                mentionsBot: false,
                isDirectMention: false,
                requestsMeme: false
            };
            const response = await this.messageHandler.handleMessage(context);
            console.log(`  ‚úÖ –ó–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –æ–±—Ä–æ–±–ª–µ–Ω–æ: ${response.responseType === 'conversation' ? '–¢–∞–∫' : '–ù—ñ'}`);
            if (response.reply) {
                console.log(`  üìã –ü–æ–∫–∞–∑–∞–Ω–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: ${response.reply.includes('–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ') ? '–¢–∞–∫' : '–ù—ñ'}`);
            }
        }
        catch (error) {
            console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error}`);
        }
        console.log('\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    }
    validateConfig() {
        console.log('\n‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:');
        console.log('='.repeat(50));
        const { validateConfig } = require('../config/appConfig');
        const validation = validateConfig();
        if (validation.valid) {
            console.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞!');
        }
        else {
            console.log('‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏:');
            validation.errors.forEach((error) => {
                console.log(`  - ${error}`);
            });
        }
    }
    showFeatures() {
        console.log('\nüéõÔ∏è –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü—ñ–π:');
        console.log('='.repeat(50));
        Object.entries(appConfig_1.appConfig.features).forEach(([feature, enabled]) => {
            const status = enabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ';
            console.log(`  ${feature.padEnd(25)} - ${status}`);
        });
    }
    showEnvironment() {
        console.log('\nüåç –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:');
        console.log('='.repeat(50));
        const envVars = [
            'NODE_ENV', 'PORT', 'PRIMARY_LANGUAGE', 'LOG_LEVEL',
            'ENABLE_NLP', 'ENABLE_CONTENT_MODERATION', 'ENABLE_ATMOSPHERE',
            'ENABLE_MEMES', 'ENABLE_USER_MEMORY', 'ENABLE_PROFANITY_FILTER'
        ];
        envVars.forEach(varName => {
            const value = process.env[varName] || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            console.log(`  ${varName.padEnd(30)} = ${value}`);
        });
    }
    checkHealth() {
        console.log('\nüè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤\'—è —Å–∏—Å—Ç–µ–º–∏:');
        console.log('='.repeat(50));
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ
        const memUsage = process.memoryUsage();
        console.log('üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ:');
        console.log(`  RSS: ${Math.round(memUsage.rss / 1024 / 1024)} MB`);
        console.log(`  Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024)} MB`);
        console.log(`  Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024)} MB`);
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
        console.log('\n‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ—Ü–µ—Å—É:');
        const uptime = process.uptime();
        const hours = Math.floor(uptime / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        const seconds = Math.floor(uptime % 60);
        console.log(`  ${hours}–≥–æ–¥ ${minutes}—Ö–≤ ${seconds}—Å`);
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        console.log('\n‚öôÔ∏è –°—Ç–∞–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:');
        const { validateConfig } = require('../config/appConfig');
        const validation = validateConfig();
        console.log(`  –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å: ${validation.valid ? '‚úÖ OK' : '‚ùå –ü–æ–º–∏–ª–∫–∏'}`);
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ message handler
        console.log('\nü§ñ Message Handler:');
        console.log(`  –°—Ç–∞–Ω: ${this.messageHandler ? '‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' : '‚ùå –ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'}`);
    }
    showMemoryStats() {
        console.log('\nüß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º\'—è—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:');
        console.log('='.repeat(50));
        if (!this.messageHandler) {
            console.log('‚ùå Message handler –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        try {
            // –¢—É—Ç –±—É–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ UserMemory, –∫–æ–ª–∏ –±—É–¥–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º\'—è—Ç—ñ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤');
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º\'—è—Ç—ñ:', error);
        }
    }
    testProfanityFilter() {
        console.log('\nüö´ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏:');
        console.log('='.repeat(50));
        const testPhrases = [
            '–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?',
            '–¢–∏ –¥—É—Ä–∞–∫',
            '–Ü–¥–∏ –≤ –±—ñ—Å!',
            '–ö–ª–∞—Å–Ω–∏–π –¥–µ–Ω—å —Å—å–æ–≥–æ–¥–Ω—ñ',
            'What a beautiful day',
            'You are stupid'
        ];
        try {
            const { ProfanityFilter } = require('../domain/profanityFilter');
            const filter = new ProfanityFilter();
            testPhrases.forEach(phrase => {
                const analysis = filter.analyzeMessage(phrase);
                const status = analysis.hasProfanity ? 'üö´ –ü–†–û–§–ê–ù–ê–¶–Ü–Ø' : '‚úÖ –ß–ò–°–¢–û';
                console.log(`  "${phrase}" - ${status}`);
                if (analysis.hasProfanity) {
                    console.log(`    –ú–æ–≤–∞: ${analysis.language}, –†—ñ–≤–µ–Ω—å: ${analysis.severityLevel}`);
                }
            });
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞:', error);
        }
    }
    testFuzzyMatching() {
        console.log('\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è fuzzy matching:');
        console.log('='.repeat(50));
        const testQueries = [
            '—â–æ —Ç–∏ –º–æ–∂–µ—à',
            '—à–æ –º–æ–∂–µ—à',
            '–Ω–æ–≤–∏–Ω–∏',
            '–ø–æ–≥–æ–¥–∞ –≤ –∫–∏—î–≤—ñ',
            '–ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è',
            'what can you do'
        ];
        try {
            // –¢–µ—Å—Ç—É—î–º–æ capability matcher
            console.log('ü§ñ Capability Fuzzy Matcher:');
            const { CapabilityFuzzyMatcher } = require('../config/vocabulary/capabilityFuzzyMatcher');
            const capabilityMatcher = new CapabilityFuzzyMatcher();
            testQueries.forEach(query => {
                const result = capabilityMatcher.detectCapabilityRequest(query);
                console.log(`  "${query}" - ${result.isCapabilityRequest ? '‚úÖ –†–û–ó–ü–Ü–ó–ù–ê–ù–û' : '‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û'} (${result.confidence})`);
            });
            // –¢–µ—Å—Ç—É—î–º–æ news commands matcher
            console.log('\nüì∞ News Commands Fuzzy Matcher:');
            const { NewsCommandsFuzzyMatcher } = require('../config/vocabulary/newsCommandsFuzzyMatcher');
            const newsMatcher = new NewsCommandsFuzzyMatcher();
            testQueries.forEach(query => {
                const result = newsMatcher.recognizeCommand(query);
                if (result) {
                    console.log(`  "${query}" - ‚úÖ ${result.type.toUpperCase()} (${result.confidence})`);
                }
                else {
                    console.log(`  "${query}" - ‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û`);
                }
            });
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è fuzzy matching:', error);
        }
    }
    exit() {
        console.log('\nüëã –í–∏—Ö—ñ–¥ –∑ CLI —Ä–µ–∂–∏–º—É...');
        process.exit(0);
    }
}
exports.CLIHandler = CLIHandler;
// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
function startCLI() {
    const cli = new CLIHandler();
    return cli.start();
}
