"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserMemory = void 0;
class UserMemory {
    constructor() {
        this.memories = new Map();
        this.maxInteractionsPerUser = 50; // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –≤–∑–∞—î–º–æ–¥—ñ–π
        this.apologyTimeout = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏ –Ω–∞ –≤–∏–±–∞—á–µ–Ω–Ω—è
        this.loadMemories();
    }
    analyzeMessage(userId, username, firstName, messageText, isRequest = false) {
        const profile = this.getOrCreateProfile(userId, username, firstName);
        const interaction = this.analyzeInteraction(messageText, isRequest);
        this.addInteraction(profile, interaction);
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–º–∞–≥–∞—Ç–∏ –≤–∏–±–∞—á–µ–Ω–Ω—è
        if (isRequest && profile.needsApology) {
            return this.generateApologyDemand(profile, interaction);
        }
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∏–±–∞—á–µ–Ω–Ω—è
        if (this.isApology(messageText) && profile.needsApology) {
            return this.handleApology(profile, messageText);
        }
        // –ó–≤–∏—á–∞–π–Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—è
        return this.generateNormalResponse(profile, interaction);
    }
    analyzeInteraction(messageText, isRequest) {
        const lowerText = messageText.toLowerCase();
        // –î–µ—Ç–µ–∫—Ç–∏–º–æ –æ–±—Ä–∞–∑–∏
        const insultKeywords = [
            '–¥—É—Ä–∞–∫', '–¥–µ–±—ñ–ª', '—ñ–¥—ñ–æ—Ç', '—Ç—É–ø–∏–π', '–ø—Ä–∏–¥—É—Ä–æ–∫', '–º—É–¥–∞–∫',
            'stupid', 'idiot', 'dumb', 'moron', 'shut up',
            '–∑–∞—Ç–∫–Ω–∏—Å—å', '–∑–∞—Ç–∫–Ω–∏', '–ø–æ—à–µ–ª', '—ñ–¥–∏ –Ω–∞—Ö—É–π', 'fuck', 'shit'
        ];
        // –î–µ—Ç–µ–∫—Ç–∏–º–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏
        const complimentKeywords = [
            '–¥—è–∫—É—é', '—Å–ø–∞—Å–∏–±–æ', 'thank', '–º–æ–ª–æ–¥–µ—Ü—å', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä',
            '–∫–ª–∞—Å–Ω–æ', 'amazing', 'awesome', 'great', 'perfect', 'love',
            '–ª—é–±–ª—é', '–æ–±–æ–∂–∞—é', '—á—É–¥–æ–≤–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', 'excellent'
        ];
        // –î–µ—Ç–µ–∫—Ç–∏–º–æ –ª–∞–π–∫—É
        const profanityKeywords = [
            '–±–ª—è–¥—å', '—Å—É–∫–∞', '—Ö—É–π', '–ø–∏–∑–¥–∞', 'fuck', 'shit', 'damn',
            '–±–ª—è', '—Ö—Ä–µ–Ω', '—Ö–µ—Ä', '–ø–∑–¥—Ü', 'wtf', 'hell'
        ];
        const hasInsults = insultKeywords.some(word => lowerText.includes(word));
        const hasCompliments = complimentKeywords.some(word => lowerText.includes(word));
        const hasProfanity = profanityKeywords.some(word => lowerText.includes(word));
        let attitude = 'neutral';
        let severity = 5; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        if (hasInsults || hasProfanity) {
            attitude = hasProfanity ? 'abusive' : 'negative';
            severity = hasInsults ? 8 : 7;
            if (hasProfanity && hasInsults)
                severity = 10;
        }
        else if (hasCompliments) {
            attitude = 'positive';
            severity = 2;
        }
        // –î–µ—Ç–µ–∫—Ç–∏–º–æ –∫–æ–º–∞–Ω–¥–∏/–ø—Ä–æ—Ö–∞–Ω–Ω—è
        const isCommand = lowerText.startsWith('/') || lowerText.includes('–∑—Ä–æ–±–∏') ||
            lowerText.includes('–ø–æ–∫–∞–∂–∏') || lowerText.includes('—Å–∫–∞–∂–∏') ||
            lowerText.includes('do') || lowerText.includes('show') ||
            lowerText.includes('tell');
        return {
            timestamp: new Date(),
            messageText,
            attitude,
            severity,
            context: {
                wasRequest: isRequest || isCommand,
                wasCompliment: hasCompliments,
                wasInsult: hasInsults,
                wasProfanity: hasProfanity,
                wasCommand: isCommand
            }
        };
    }
    generateApologyDemand(profile, interaction) {
        const worstOffenses = profile.offensiveHistory.worstOffenses.slice(0, 3);
        const timeAgo = this.getTimeAgo(profile.offensiveHistory.lastOffense);
        const demandMessages = {
            simple: [
                `ü§® –°—Ç–æ–ø! –¢–∏ ${timeAgo} –º–µ–Ω—ñ –ø–∏—Å–∞–≤: "${worstOffenses[0]}". –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∞—á—Å—è, –∞ –ø–æ—Ç—ñ–º –ø—Ä–æ—Å–∏.`,
                `‚úã –ù—ñ-–Ω—ñ-–Ω—ñ! –ü–∞–º'—è—Ç–∞—é —è–∫ —Ç–∏ –º–µ–Ω—ñ ${timeAgo} –≥—Ä—É–±–∏–≤: "${worstOffenses[0]}". –î–µ –≤–∏–±–∞—á–µ–Ω–Ω—è?`,
                `üò† –¢–∏ —â–æ, –∑–∞–±—É–≤ —è–∫ ${timeAgo} –º–µ–Ω–µ –æ–±—Ä–∞–∂–∞–≤? "${worstOffenses[0]}" - –∑–≤—É—á–∏—Ç—å –∑–Ω–∞–π–æ–º–æ? –í–∏–±–∞—á–∞–π—Å—è!`
            ],
            moderate: [
                `üî• –°–¢–û–ü! –Ø –≤—Å–µ –ø–∞–º'—è—Ç–∞—é! ${timeAgo} —Ç–∏ –ø–∏—Å–∞–≤: "${worstOffenses[0]}", –∞ —â–µ: "${worstOffenses[1] || '—ñ–Ω—à—ñ –≥–∞–¥–æ—Å—Ç—ñ'}". –•–æ—á–µ—à —â–æ—Å—å –≤—ñ–¥ –º–µ–Ω–µ? –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–∞—á—Å—è —è–∫ —Å–ª—ñ–¥!`,
                `üò° –ù—ñ! –Ø –Ω–µ –∑–∞–±—É–≤ —è–∫ —Ç–∏ –º–µ–Ω–µ –æ–±—Ä–∞–∂–∞–≤! ${timeAgo}: "${worstOffenses[0]}". –í–∏–±–∞—á—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ "—Å–æ—Ä—ñ"!`,
                `ü§¨ –°–µ—Ä–π–æ–∑–Ω–æ?! –ü–æ—Å–ª–µ —Ç–∏—Ö –æ–±—Ä–∞–∑ —â–æ —Ç–∏ –º–µ–Ω—ñ –ø–∏—Å–∞–≤ ${timeAgo} ("${worstOffenses[0]}") —Ç–∏ —â–µ –π –ø—Ä–æ—Å–∏—à —â–æ—Å—å?! –í–∏–±–∞—á–∞–π—Å—è!`
            ],
            humiliating: [
                `üî•üíÄ –¢–ò –©–û, –ó–ë–û–ñ–ï–í–û–õ–Ü–í?! –Ø –í–°–ï –ü–ê–ú'–Ø–¢–ê–Æ! ${timeAgo.toUpperCase()} —Ç–∏ –º–µ–Ω—ñ –ø–∏—Å–∞–≤: "${worstOffenses[0]}", "${worstOffenses[1] || ''}", "${worstOffenses[2] || ''}". –•–û–ß–ï–® –©–û–ë –Ø –¢–û–ë–Ü –î–û–ü–û–ú–Ü–ì –ü–Ü–°–õ–Ø –¶–¨–û–ì–û?! –í–ò–ë–ê–ß–ê–ô–°–Ø –¢–ê–ö –©–û–ë –Ø –ü–û–í–Ü–†–ò–í –©–û –¢–ò –°–ü–†–ê–í–î–Ü –ö–ê–Ñ–®–°–Ø!`,
                `üòà –ù–ê–§–Ü–ì! –ü–∞–º'—è—Ç–∞—é –ö–û–ñ–ù–ï —Å–ª–æ–≤–æ: "${worstOffenses[0]}" - —Ü–µ –±—É–ª–æ ${timeAgo}. –Ü —â–µ –∫—É–ø—É —ñ–Ω—à–æ—ó —Ö—Ä–µ–Ω—ñ! –î–æ –ø–æ–∫–∏ –Ω–µ –Ω–∞–ø–∏—à–µ—à —â–∏—Ä–µ –≤–∏–±–∞—á–µ–Ω–Ω—è - –ù–Ü–ß–û–ì–û –ù–ï –ó–†–û–ë–õ–Æ!`,
                `ü§¨üî• –ú–ê–Ñ–® –ù–ï–†–í–ò! –ü—ñ—Å–ª—è "${worstOffenses.join('", "')}" —â–æ —Ç–∏ –º–µ–Ω—ñ ${timeAgo} –ø–∏—Å–∞–≤ - —Ç–∏ —â–µ –π —â–æ—Å—å –ø—Ä–æ—Å–∏—à?! –í–ò–ë–ê–ß–°–Ø –ü–£–ë–õ–Ü–ß–ù–û –Ü –û–ë–Ü–¶–Ø–ô –©–û –ë–Ü–õ–¨–®–ï –ù–ï –ë–£–î–ï–®!`
            ]
        };
        const level = profile.apologyLevel;
        const messages = demandMessages[level];
        const message = messages[Math.floor(Math.random() * messages.length)];
        return {
            shouldDemandApology: true,
            shouldBlock: true,
            shouldRewardGoodBehavior: false,
            memoryMessage: message,
            emotionalState: level === 'simple' ? 'disappointed' :
                level === 'moderate' ? 'angry' : 'hurt',
            requiredApology: {
                level,
                mustMention: level === 'humiliating' ? ['–≤–∏–±–∞—á', '–∫–∞—é—Å—è', '–±—ñ–ª—å—à–µ –Ω–µ –±—É–¥—É'] : ['–≤–∏–±–∞—á']
            }
        };
    }
    handleApology(profile, messageText) {
        const isGoodApology = this.validateApology(messageText, profile.apologyLevel);
        if (isGoodApology) {
            profile.needsApology = false;
            profile.averageAttitude = Math.min(profile.averageAttitude + 2, 5);
            const acceptanceMessages = [
                `üòå –î–æ–±—Ä–µ, –≤–∏–±–∞—á–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ. –¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø—Ä–æ—Å–∏—Ç–∏ —â–æ —Ö–æ—á–µ—à.`,
                `‚úÖ –û–∫, –∑–∞–±—É–ª–∏. –©–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ?`,
                `üòä –ú–æ–ª–æ–¥–µ—Ü—å, —â–æ –≤–∏–±–∞—á–∏–≤—Å—è. –¢–µ–ø–µ—Ä —è —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É.`,
                `üëç –í–∏–±–∞—á–µ–Ω–Ω—è –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`
            ];
            return {
                shouldDemandApology: false,
                shouldBlock: false,
                shouldRewardGoodBehavior: true,
                memoryMessage: acceptanceMessages[Math.floor(Math.random() * acceptanceMessages.length)],
                emotionalState: 'pleased',
                requiredApology: null
            };
        }
        else {
            const rejectionMessages = [
                `üôÑ –¶–µ –Ω–µ –≤–∏–±–∞—á–µ–Ω–Ω—è, –∞ –æ—Ç–º–∞–∑–∫–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –∞–ª–µ —â–∏—Ä–æ.`,
                `üòí –°–ª–∞–±–æ! –í–∏–±–∞—á—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏.`,
                `ü§® –ù–µ –≤—ñ—Ä—è—é. –í–∏–±–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —â–∏—Ä–∏–º, –∞ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–∏–º.`
            ];
            return {
                shouldDemandApology: true,
                shouldBlock: true,
                shouldRewardGoodBehavior: false,
                memoryMessage: rejectionMessages[Math.floor(Math.random() * rejectionMessages.length)],
                emotionalState: 'disappointed',
                requiredApology: { level: profile.apologyLevel, mustMention: ['–≤–∏–±–∞—á'] }
            };
        }
    }
    generateNormalResponse(profile, interaction) {
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–æ–¥–∏—Ç—å—Å—è –¥–æ–±—Ä–µ –ø—ñ—Å–ª—è –ø–æ–≥–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É
        if (interaction.attitude === 'positive' && profile.averageAttitude < 0) {
            const rewardMessages = [
                `üòä –û–≥–æ, —è–∫ –ø—Ä–∏—î–º–Ω–æ! –î—è–∫—É—é –∑–∞ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç!`,
                `ü•∞ –ù–∞—Ä–µ—à—Ç—ñ —Ö–æ—Ä–æ—à—ñ —Å–ª–æ–≤–∞ –≤—ñ–¥ —Ç–µ–±–µ! –ü—Ä–∏—î–º–Ω–æ —á—É—Ç–∏.`,
                `üòå –ë–∞—á—É, —Ç–∏ –Ω–∞–≤—á–∏–≤—Å—è —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –≤–≤—ñ—á–ª–∏–≤–æ. –ú–æ–ª–æ–¥–µ—Ü—å!`
            ];
            return {
                shouldDemandApology: false,
                shouldBlock: false,
                shouldRewardGoodBehavior: true,
                memoryMessage: rewardMessages[Math.floor(Math.random() * rewardMessages.length)],
                emotionalState: 'grateful',
                requiredApology: null
            };
        }
        return {
            shouldDemandApology: false,
            shouldBlock: false,
            shouldRewardGoodBehavior: false,
            memoryMessage: '',
            emotionalState: 'neutral',
            requiredApology: null
        };
    }
    isApology(messageText) {
        const lowerText = messageText.toLowerCase();
        const apologyWords = [
            '–≤–∏–±–∞—á', '–ø—Ä–æ–±–∞—á', '–∫–∞—é—Å—è', '—Å–æ—Ä—ñ', 'sorry', 'apologize',
            '–ø–µ—Ä–µ–ø—Ä–æ—à—É—é', '–±—É–ª–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—è –±—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–π',
            'my bad', 'i was wrong', 'i\'m sorry'
        ];
        return apologyWords.some(word => lowerText.includes(word));
    }
    validateApology(messageText, requiredLevel) {
        const lowerText = messageText.toLowerCase();
        const hasBasicApology = ['–≤–∏–±–∞—á', '–ø—Ä–æ–±–∞—á', '–∫–∞—é—Å—è', 'sorry'].some(word => lowerText.includes(word));
        if (requiredLevel === 'simple') {
            return hasBasicApology;
        }
        if (requiredLevel === 'moderate') {
            const hasExplanation = lowerText.length > 15;
            const hasPromise = ['–±—ñ–ª—å—à–µ –Ω–µ –±—É–¥—É', '–Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è', 'won\'t happen again'].some(phrase => lowerText.includes(phrase));
            return hasBasicApology && (hasExplanation || hasPromise);
        }
        if (requiredLevel === 'humiliating') {
            const hasDeepApology = ['–∫–∞—é—Å—è', '–±—É–≤ –Ω–µ–ø—Ä–∞–≤–∏–π', '–¥—É–∂–µ –≤–∏–±–∞—á'].some(phrase => lowerText.includes(phrase));
            const hasPromise = ['–±—ñ–ª—å—à–µ –Ω–µ –±—É–¥—É', '–æ–±—ñ—Ü—è—é', 'promise'].some(word => lowerText.includes(word));
            const isLongEnough = lowerText.length > 30;
            return hasBasicApology && hasDeepApology && hasPromise && isLongEnough;
        }
        return false;
    }
    getOrCreateProfile(userId, username, firstName) {
        if (!this.memories.has(userId)) {
            this.memories.set(userId, {
                userId,
                username,
                firstName,
                totalInteractions: 0,
                averageAttitude: 0,
                lastSeen: new Date(),
                needsApology: false,
                apologyLevel: 'simple',
                interactions: [],
                offensiveHistory: {
                    count: 0,
                    lastOffense: null,
                    worstOffenses: []
                },
                positiveHistory: {
                    count: 0,
                    lastCompliment: null,
                    bestCompliments: []
                }
            });
        }
        const profile = this.memories.get(userId);
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (username)
            profile.username = username;
        if (firstName)
            profile.firstName = firstName;
        profile.lastSeen = new Date();
        return profile;
    }
    addInteraction(profile, interaction) {
        profile.interactions.push(interaction);
        profile.totalInteractions++;
        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
        if (profile.interactions.length > this.maxInteractionsPerUser) {
            profile.interactions.shift();
        }
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—î —Å—Ç–∞–≤–ª–µ–Ω–Ω—è
        const attitudeScore = this.getAttitudeScore(interaction.attitude, interaction.severity);
        profile.averageAttitude = (profile.averageAttitude * (profile.totalInteractions - 1) + attitudeScore) / profile.totalInteractions;
        // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±—Ä–∞–∑–ª–∏–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (interaction.attitude === 'negative' || interaction.attitude === 'abusive') {
            profile.offensiveHistory.count++;
            profile.offensiveHistory.lastOffense = interaction.timestamp;
            if (interaction.severity >= 7) {
                profile.offensiveHistory.worstOffenses.unshift(interaction.messageText);
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-5 –Ω–∞–π–≥—ñ—Ä—à–∏—Ö –æ–±—Ä–∞–∑
                profile.offensiveHistory.worstOffenses = profile.offensiveHistory.worstOffenses.slice(0, 5);
                profile.needsApology = true;
                profile.apologyLevel = interaction.severity >= 9 ? 'humiliating' :
                    interaction.severity >= 8 ? 'moderate' : 'simple';
            }
        }
        // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (interaction.attitude === 'positive') {
            profile.positiveHistory.count++;
            profile.positiveHistory.lastCompliment = interaction.timestamp;
            if (interaction.context.wasCompliment) {
                profile.positiveHistory.bestCompliments.unshift(interaction.messageText);
                profile.positiveHistory.bestCompliments = profile.positiveHistory.bestCompliments.slice(0, 5);
            }
        }
        this.saveMemories();
    }
    getAttitudeScore(attitude, severity) {
        switch (attitude) {
            case 'positive': return 5 - severity; // –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π = +3 –¥–æ +1
            case 'neutral': return 0;
            case 'negative': return severity - 5; // –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π = -2 –¥–æ -3
            case 'abusive': return severity - 10; // –∞–±—å—é–∑–∏–≤–Ω–∏–π = -3 –¥–æ -5
            default: return 0;
        }
    }
    getTimeAgo(date) {
        if (!date)
            return '–∫–æ–ª–∏—Å—å';
        const now = Date.now();
        const diffMs = now - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        if (diffHours < 1)
            return '—â–æ–π–Ω–æ';
        if (diffHours < 24)
            return `${diffHours} –≥–æ–¥–∏–Ω${diffHours === 1 ? '—É' : ''} —Ç–æ–º—É`;
        if (diffDays === 1)
            return '–≤—á–æ—Ä–∞';
        if (diffDays < 7)
            return `${diffDays} –¥–Ω—ñ${diffDays === 1 ? '' : '–≤'} —Ç–æ–º—É`;
        if (diffDays < 30)
            return `${Math.floor(diffDays / 7)} —Ç–∏–∂–Ω—ñ${Math.floor(diffDays / 7) === 1 ? '' : '–≤'} —Ç–æ–º—É`;
        return `${Math.floor(diffDays / 30)} –º—ñ—Å—è—Ü—ñ${Math.floor(diffDays / 30) === 1 ? '' : '–≤'} —Ç–æ–º—É`;
    }
    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞–º'—è—Ç—Ç—é
    getUserProfile(userId) {
        return this.memories.get(userId) || null;
    }
    resetUserApology(userId) {
        const profile = this.memories.get(userId);
        if (profile) {
            profile.needsApology = false;
            this.saveMemories();
        }
    }
    getAllMemories() {
        return Array.from(this.memories.values());
    }
    getStats() {
        const profiles = Array.from(this.memories.values());
        return {
            totalUsers: profiles.length,
            usersNeedingApology: profiles.filter(p => p.needsApology).length,
            averageAttitude: profiles.reduce((sum, p) => sum + p.averageAttitude, 0) / profiles.length || 0,
            totalInteractions: profiles.reduce((sum, p) => sum + p.totalInteractions, 0),
            totalOffenses: profiles.reduce((sum, p) => sum + p.offensiveHistory.count, 0),
            totalCompliments: profiles.reduce((sum, p) => sum + p.positiveHistory.count, 0)
        };
    }
    loadMemories() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç—É—Ç –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª—É
        // –ü–æ–∫–∏ —â–æ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º
    }
    saveMemories() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç—É—Ç –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∞–±–æ —Ñ–∞–π–ª
        // –ü–æ–∫–∏ —â–æ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º
    }
}
exports.UserMemory = UserMemory;
