"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewsWeatherHandler = void 0;
const newsWeatherMonitor_1 = require("../domain/newsWeatherMonitor");
const newsCommandsFuzzyMatcher_1 = require("../config/vocabulary/newsCommandsFuzzyMatcher");
class NewsWeatherHandler {
    constructor(newsApiKey, weatherApiKey, bot, subscribedChats = []) {
        this.scheduledTasks = new Map();
        this.timers = new Map();
        this.subscribedChats = new Set();
        this.morningHour = 8; // –ì–æ–¥–∏–Ω–∞ —Ä–∞–Ω–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        this.monitoringEnabled = true;
        this.monitor = new newsWeatherMonitor_1.NewsWeatherMonitor(newsApiKey, weatherApiKey);
        this.bot = bot;
        this.subscribedChats = new Set(subscribedChats);
        this.fuzzyMatcher = new newsCommandsFuzzyMatcher_1.NewsCommandsFuzzyMatcher();
        this.initializeScheduler();
    }
    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
     */
    initializeScheduler() {
        // –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫
        this.scheduleMorningSummary();
        // –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
        this.scheduleCriticalMonitoring();
    }
    /**
     * –ü–ª–∞–Ω—É—î —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏
     */
    scheduleMorningSummary() {
        const taskId = 'morning_summary';
        const now = new Date();
        const nextMorning = new Date();
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞ —Ä–∞–Ω–æ–∫ (–º—ñ–∂ 8 —ñ 10 –≥–æ–¥–∏–Ω–∞–º–∏)
        const randomHour = this.morningHour + Math.floor(Math.random() * 2); // 8-9 –≥–æ–¥–∏–Ω–∏
        const randomMinute = Math.floor(Math.random() * 60);
        nextMorning.setHours(randomHour, randomMinute, 0, 0);
        // –Ø–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤ —Å—å–æ–≥–æ–¥–Ω—ñ, –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if (nextMorning <= now) {
            nextMorning.setDate(nextMorning.getDate() + 1);
        }
        const task = {
            id: taskId,
            type: 'morning_summary',
            nextRun: nextMorning,
            interval: 24 * 60 * 60 * 1000, // 24 –≥–æ–¥–∏–Ω–∏
            enabled: true
        };
        this.scheduledTasks.set(taskId, task);
        this.scheduleTask(task);
    }
    /**
     * –ü–ª–∞–Ω—É—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
     */
    scheduleCriticalMonitoring() {
        const taskId = 'critical_monitoring';
        const now = new Date();
        const nextCheck = new Date(now.getTime() + 30 * 60 * 1000); // –ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω
        const task = {
            id: taskId,
            type: 'critical_monitoring',
            nextRun: nextCheck,
            interval: 30 * 60 * 1000, // –ö–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
            enabled: true
        };
        this.scheduledTasks.set(taskId, task);
        this.scheduleTask(task);
    }
    /**
     * –ü–ª–∞–Ω—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    scheduleTask(task) {
        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
        const existingTimer = this.timers.get(task.id);
        if (existingTimer) {
            clearTimeout(existingTimer);
        }
        const now = Date.now();
        const delay = task.nextRun.getTime() - now;
        if (delay <= 0) {
            // –í–∏–∫–æ–Ω–∞—Ç–∏ –Ω–µ–≥–∞–π–Ω–æ —è–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤
            this.executeTask(task);
            return;
        }
        const timer = setTimeout(async () => {
            await this.executeTask(task);
            // –ü–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            if (task.enabled) {
                task.nextRun = new Date(Date.now() + task.interval);
                this.scheduleTask(task);
            }
        }, delay);
        this.timers.set(task.id, timer);
        console.log(`–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è ${task.type} –Ω–∞ ${task.nextRun.toLocaleString('uk-UA')}`);
    }
    /**
     * –í–∏–∫–æ–Ω—É—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
     */
    async executeTask(task) {
        try {
            switch (task.type) {
                case 'morning_summary':
                    await this.sendMorningSummary();
                    break;
                case 'critical_monitoring':
                    await this.checkAndSendCriticalNews();
                    break;
            }
        }
        catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è ${task.type}:`, error);
        }
    }
    /**
     * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–∞–Ω–∫–æ–≤—É –∑–≤–æ–¥–∫—É –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º —á–∞—Ç–∞–º
     */
    async sendMorningSummary() {
        if (this.subscribedChats.size === 0) {
            console.log('–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è —Ä–∞–Ω–∫–æ–≤–æ—ó –∑–≤–æ–¥–∫–∏');
            return;
        }
        const summary = await this.monitor.createMorningSummary();
        for (const chatId of this.subscribedChats) {
            try {
                await this.bot.sendMessage(chatId, summary, {
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                });
                console.log(`–†–∞–Ω–∫–æ–≤–∞ –∑–≤–æ–¥–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ —á–∞—Ç—É ${chatId}`);
            }
            catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–∫–æ–≤–æ—ó –∑–≤–æ–¥–∫–∏ –¥–æ —á–∞—Ç—É ${chatId}:`, error);
            }
        }
    }
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏
     */
    async checkAndSendCriticalNews() {
        if (!this.monitoringEnabled || this.subscribedChats.size === 0) {
            return;
        }
        const criticalNews = await this.monitor.checkCriticalNews();
        for (const newsItem of criticalNews) {
            const alertMessage = this.monitor.formatCriticalAlert(newsItem);
            for (const chatId of this.subscribedChats) {
                try {
                    await this.bot.sendMessage(chatId, alertMessage, {
                        parse_mode: 'Markdown',
                        disable_web_page_preview: false
                    });
                    console.log(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ —á–∞—Ç—É ${chatId}: ${newsItem.title}`);
                }
                catch (error) {
                    console.error(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏ –¥–æ —á–∞—Ç—É ${chatId}:`, error);
                }
            }
        }
    }
    /**
     * –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –Ω–æ–≤–∏–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—é –¥–æ –ø–æ–º–∏–ª–æ–∫
     */
    async handleNewsCommand(chatId, messageText) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fuzzy matching –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
        const commandMatch = this.fuzzyMatcher.recognizeCommand(messageText);
        if (!commandMatch) {
            return '';
        }
        console.log(`–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: ${commandMatch.type} (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${commandMatch.confidence})`);
        try {
            switch (commandMatch.type) {
                case 'news':
                    return await this.getNewsOnDemand();
                case 'weather':
                    const city = commandMatch.city || '–ö–∏—ó–≤';
                    return await this.getWeatherOnDemand(city);
                case 'subscribe':
                    return this.subscribeToMorningSummary(chatId);
                case 'unsubscribe':
                    return this.unsubscribeFromMorningSummary(chatId);
                default:
                    return '';
            }
        }
        catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ ${commandMatch.type}:`, error);
            return '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
        }
    }
    /**
     * –û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –Ω–∞ –≤–∏–º–æ–≥—É
     */
    async getNewsOnDemand() {
        try {
            const news = await this.monitor.getUkrainianNews(24);
            if (news.length === 0) {
                return 'üì∞ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É.';
            }
            const topNews = news
                .sort((a, b) => b.publishedAt.getTime() - a.publishedAt.getTime())
                .slice(0, 7);
            let message = `üì∞ **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏:**\n\n`;
            topNews.forEach((item, index) => {
                const emoji = this.getSeverityEmoji(item.severity);
                message += `${emoji} **${item.title}**\n`;
                if (item.description) {
                    message += `${item.description.substring(0, 120)}${item.description.length > 120 ? '...' : ''}\n`;
                }
                message += `üîó [–ß–∏—Ç–∞—Ç–∏](${item.url})\n\n`;
            });
            message += `üïê –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
            return message;
        }
        catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –Ω–∞ –≤–∏–º–æ–≥—É:', error);
            return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
        }
    }
    /**
     * –û—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥—É –Ω–∞ –≤–∏–º–æ–≥—É
     */
    async getWeatherOnDemand(city) {
        try {
            const weather = await this.monitor.getWeatherData(city);
            if (!weather) {
                return `‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è ${city}.`;
            }
            let message = `üå§ **–ü–æ–≥–æ–¥–∞ –≤ ${weather.city}:**\n\n`;
            message += `üå° **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** ${weather.temperature}¬∞C\n`;
            message += `‚òÅÔ∏è **–°—Ç–∞–Ω:** ${weather.condition}\n`;
            message += `üí® **–í—ñ—Ç–µ—Ä:** ${weather.windSpeed} –∫–º/–≥–æ–¥\n`;
            message += `üíß **–í–æ–ª–æ–≥—ñ—Å—Ç—å:** ${weather.humidity}%\n`;
            message += `üìä **–¢–∏—Å–∫:** ${weather.pressure} –º–º —Ä—Ç.—Å—Ç.\n`;
            if (weather.alerts.length > 0) {
                message += `\n‚ö†Ô∏è **–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:**\n`;
                weather.alerts.forEach(alert => {
                    message += `‚Ä¢ ${alert.title}\n`;
                });
            }
            message += `\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('uk-UA')}`;
            return message;
        }
        catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–∞ –≤–∏–º–æ–≥—É:', error);
            return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
        }
    }
    /**
     * –ü—ñ–¥–ø–∏—Å—É—î —á–∞—Ç –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏
     */
    subscribeToMorningSummary(chatId) {
        if (this.subscribedChats.has(chatId)) {
            return '‚úÖ –í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏.';
        }
        this.subscribedChats.add(chatId);
        return 'üîî –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏! –©–æ–¥–Ω—è –º—ñ–∂ 8:00 —Ç–∞ 10:00 –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≥–æ–¥—É.';
    }
    /**
     * –í—ñ–¥–ø–∏—Å—É—î —á–∞—Ç –≤—ñ–¥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫
     */
    unsubscribeFromMorningSummary(chatId) {
        if (!this.subscribedChats.has(chatId)) {
            return '‚ùå –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –∑–≤–æ–¥–∫–∏.';
        }
        this.subscribedChats.delete(chatId);
        return 'üîï –í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–∞–Ω–∫–æ–≤–∏—Ö –∑–≤–æ–¥–æ–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏.';
    }
    /**
     * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
     */
    getRecognitionStats() {
        return this.fuzzyMatcher.getRecognitionStats();
    }
    /**
     * –¢–µ—Å—Ç—É—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
     */
    testCommandRecognition(text) {
        return this.fuzzyMatcher.recognizeCommand(text);
    }
    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–≤–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
     */
    getSeverityEmoji(severity) {
        switch (severity) {
            case 'critical': return 'üö®';
            case 'high': return '‚ö†Ô∏è';
            case 'medium': return 'üì¢';
            case 'low': return 'üí¨';
            default: return 'üì∞';
        }
    }
    /**
     * –í–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω
     */
    toggleCriticalMonitoring(enabled) {
        this.monitoringEnabled = enabled;
        const task = this.scheduledTasks.get('critical_monitoring');
        if (task) {
            task.enabled = enabled;
            if (enabled) {
                this.scheduleTask(task);
                return '‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ.';
            }
            else {
                const timer = this.timers.get(task.id);
                if (timer) {
                    clearTimeout(timer);
                    this.timers.delete(task.id);
                }
                return '‚ùå –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.';
            }
        }
        return '‚ùå –ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º.';
    }
    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
     */
    getSchedulerStatus() {
        let status = 'üìÖ **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞:**\n\n';
        for (const [id, task] of this.scheduledTasks) {
            const emoji = task.enabled ? '‚úÖ' : '‚ùå';
            status += `${emoji} **${task.type}**\n`;
            status += `   –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: ${task.nextRun.toLocaleString('uk-UA')}\n`;
            status += `   –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(task.interval / (60 * 1000))} —Ö–≤\n\n`;
        }
        status += `üîî –ü—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤: ${this.subscribedChats.size}\n`;
        status += `üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: ${this.monitoringEnabled ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ'}`;
        return status;
    }
    /**
     * –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤
     */
    getSubscribedChats() {
        return Array.from(this.subscribedChats);
    }
    /**
     * –û—á–∏—â–∞—î –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä–æ–±–æ—Ç–∏
     */
    cleanup() {
        for (const timer of this.timers.values()) {
            clearTimeout(timer);
        }
        this.timers.clear();
        console.log('–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–æ–≤–∏–Ω —Ç–∞ –ø–æ–≥–æ–¥–∏ –æ—á–∏—â–µ–Ω–æ');
    }
}
exports.NewsWeatherHandler = NewsWeatherHandler;
